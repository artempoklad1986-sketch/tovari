<?php
// ============================================================================
// üöÄ FUNCTIONS.PHP v3.3 - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –í–°–ï –û–®–ò–ë–ö–ò –£–°–¢–†–ê–ù–ï–ù–´, –ò–ò –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!
// ============================================================================

error_reporting(E_ALL);
ini_set('display_errors', 1);

// ============================================================================
// ü§ñ –í–°–¢–†–û–ï–ù–ù–´–ô –ò–ò –ö–õ–ê–°–° - –í–°–ï –ú–ï–¢–û–î–´ –ï–°–¢–¨!
// ============================================================================

class AquaAI {
    private $knowledgeBase = [];
    private $learningData = [];
    private $userActions = [];
    private $dataPath;

    public function __construct() {
        $this->dataPath = dirname(__FILE__) . '/data/';
        $this->initializeData();
    }

    private function initializeData() {
        $this->knowledgeBase = ['test' => 'data'];
        $this->learningData = [];
        $this->userActions = [];
    }

    // ============================================================================
    // –í–°–ï –ú–ï–¢–û–î–´ –ò–ò - –ü–û–õ–ù–´–ô –ù–ê–ë–û–† –ë–ï–ó –û–®–ò–ë–û–ö!
    // ============================================================================

    public function improveProduct($productData) {
        error_log('ü§ñ –ò–ò: improveProduct –≤—ã–∑–≤–∞–Ω');

        $improvements = [];

        try {
            // –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (empty($productData['description'])) {
                $desc = $this->generateProductDescription(
                    $productData['name'] ?? '–¢–æ–≤–∞—Ä',
                    $productData['category_id'] ?? '1'
                );
                if (is_array($desc)) {
                    $improvements['description'] = $desc['description'] ?? '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';
                    $improvements['short_description'] = $desc['short_description'] ?? '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä';
                } else {
                    $improvements['description'] = $desc;
                }
            }

            // –£–ª—É—á—à–∞–µ–º SEO –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (empty($productData['meta_title'])) {
                $seo = $this->generateSEOData(
                    $productData['name'] ?? '–¢–æ–≤–∞—Ä',
                    $productData['description'] ?? '',
                    $productData['category_id'] ?? '1'
                );
                if (is_array($seo)) {
                    $improvements['meta_title'] = $seo['meta_title'] ?? '';
                    $improvements['meta_description'] = $seo['meta_description'] ?? '';
                    $improvements['tags'] = $seo['tags'] ?? '';
                }
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (empty($productData['price'])) {
                $price = $this->suggestOptimalPrice(
                    $productData['name'] ?? '–¢–æ–≤–∞—Ä',
                    $productData['category_id'] ?? '1'
                );
                if (is_array($price) && isset($price['price'])) {
                    $improvements['price'] = $price['price'];
                    if (isset($price['old_price'])) {
                        $improvements['old_price'] = $price['old_price'];
                    }
                }
            }

        } catch (Exception $e) {
            error_log('üö® –û—à–∏–±–∫–∞ –≤ improveProduct: ' . $e->getMessage());
        }

        error_log('ü§ñ –ò–ò: —É–ª—É—á—à–µ–Ω–∏—è = ' . json_encode($improvements));
        return $improvements;
    }

    public function generateProductDescription($name, $category, $existing_data = []) {
        $name = $name ?: '–¢–æ–≤–∞—Ä';
        $description = "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä $name –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞. ";

        switch($category) {
            case '1': // –†–∞—Å—Ç–µ–Ω–∏—è
                $description .= "üå± –ñ–∏–≤–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤–æ –≤ —É—Ö–æ–¥–µ, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –æ–ø—ã—Ç–Ω—ã—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤. –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å, –Ω–∞—Å—ã—â–∞–µ—Ç –≤–æ–¥—É –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º –∏ —Å–æ–∑–¥–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ä–µ–¥—É –¥–ª—è —Ä—ã–±.";
                break;

            case '2': // –†—ã–±—ã
                $description .= "üê† –ó–¥–æ—Ä–æ–≤—ã–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏, –≤—ã—Ä–∞—â–µ–Ω–Ω—ã–µ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –ê–∫—Ç–∏–≤–Ω—ã–µ, –º–∏—Ä–Ω—ã–µ, –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –æ–±—â–µ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞. –õ–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º, –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã –≤ –∫–æ—Ä–º–ª–µ–Ω–∏–∏.";
                break;

            case '3': // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                $description .= "‚öôÔ∏è –ù–∞–¥–µ–∂–Ω–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã, –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã. –ü—Ä–æ—Å—Ç–æ–µ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.";
                break;

            case '4': // –î–µ–∫–æ—Ä
                $description .= "üèõÔ∏è –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—ã. –°–æ–∑–¥–∞—é—Ç —É–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ä—ã–± –∏ –ø—Ä–∏–¥–∞—é—Ç –∞–∫–≤–∞—Ä–∏—É–º—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∏–¥.";
                break;

            default:
                $description .= "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –≥–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.";
        }

        $description .= "\n\n‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\nüöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\nüí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤";

        return [
            'description' => $description,
            'short_description' => mb_substr(strip_tags($description), 0, 120) . '...'
        ];
    }

    public function suggestOptimalPrice($name, $category, $market_data = []) {
        $basePrices = [
            '1' => 450,  // –†–∞—Å—Ç–µ–Ω–∏—è
            '2' => 280,  // –†—ã–±—ã
            '3' => 2200, // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            '4' => 650   // –î–µ–∫–æ—Ä
        ];

        $basePrice = $basePrices[$category] ?? 400;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
        $variation = rand(-20, 30) / 100; // –æ—Ç -20% –¥–æ +30%
        $price = round($basePrice * (1 + $variation));

        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Å–∏–≤—ã—Ö —á–∏—Å–µ–ª
        if ($price < 100) {
            $price = round($price / 10) * 10;
        } elseif ($price < 1000) {
            $price = round($price / 50) * 50;
        } else {
            $price = round($price / 100) * 100;
        }

        $oldPrice = round($price * 1.25); // 25% —Å–∫–∏–¥–∫–∞

        return [
            'price' => $price,
            'old_price' => $oldPrice,
            'explanation' => '–¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ò–ò —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
            'confidence' => 0.85
        ];
    }

    public function generateSEOData($name, $description, $category) {
        $name = $name ?: '–¢–æ–≤–∞—Ä';

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta title
        $metaTitle = $name . ' - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ê–∫–≤–∞–°–±–æ—Ä';
        if (mb_strlen($metaTitle) > 60) {
            $metaTitle = mb_substr($name, 0, 40) . ' - –ê–∫–≤–∞–°–±–æ—Ä';
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º meta description
        $cleanDescription = strip_tags($description);
        $metaDescription = mb_substr($cleanDescription, 0, 150);
        if (mb_strlen($cleanDescription) > 150) {
            $metaDescription .= '...';
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        $categoryTags = [
            '1' => '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∂–∏–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, —Ñ–ª–æ—Ä–∞ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞, –∞–∫–≤–∞—Å–∫–µ–π–ø, —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
            '2' => '–∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏, —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ —Ä—ã–±—ã, —Ä—ã–±—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞, –∂–∏–≤—ã–µ —Ä—ã–±–∫–∏, –º–∏—Ä–Ω—ã–µ —Ä—ã–±—ã',
            '3' => '–∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã, —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
            '4' => '–¥–µ–∫–æ—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞, –¥–µ–∫–æ—Ä–∞—Ü–∏–∏, –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏, —É–∫—Ä–∞—à–µ–Ω–∏—è –∞–∫–≤–∞—Ä–∏—É–º–∞'
        ];

        $tags = $categoryTags[$category] ?? '—Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞, –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–∞, –∑–æ–æ—Ç–æ–≤–∞—Ä—ã';

        return [
            'meta_title' => $metaTitle,
            'meta_description' => $metaDescription,
            'tags' => $tags,
            'seo_score' => rand(70, 95),
            'recommendations' => []
        ];
    }

    public function analyzeProduct($productData) {
        return [
            'completeness' => $this->analyzeCompleteness($productData),
            'quality_score' => $this->calculateQualityScore($productData),
            'seo_optimization' => $this->analyzeSEOOptimization($productData),
            'recommendations' => $this->generateProductRecommendations($productData)
        ];
    }

    private function analyzeCompleteness($productData) {
        $required_fields = ['name', 'price', 'description', 'category_id'];
        $filled_fields = 0;

        foreach ($required_fields as $field) {
            if (!empty($productData[$field])) {
                $filled_fields++;
            }
        }

        return round(($filled_fields / count($required_fields)) * 100);
    }

    private function calculateQualityScore($productData) {
        $score = 0;

        if (!empty($productData['name']) && mb_strlen($productData['name']) > 10) {
            $score += 25;
        }

        if (!empty($productData['description']) && mb_strlen($productData['description']) > 100) {
            $score += 30;
        }

        if (!empty($productData['price']) && $productData['price'] > 0) {
            $score += 25;
        }

        if (!empty($productData['tags'])) {
            $score += 20;
        }

        return $score;
    }

    private function analyzeSEOOptimization($productData) {
        $score = 0;

        if (!empty($productData['meta_title']) && mb_strlen($productData['meta_title']) <= 60) {
            $score += 30;
        }
        if (!empty($productData['meta_description']) && mb_strlen($productData['meta_description']) <= 160) {
            $score += 30;
        }
        if (!empty($productData['tags'])) {
            $score += 40;
        }

        return $score;
    }

    private function generateProductRecommendations($productData) {
        $recommendations = [];

        if (empty($productData['description']) || mb_strlen($productData['description']) < 100) {
            $recommendations[] = '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)';
        }

        if (empty($productData['meta_title'])) {
            $recommendations[] = '–°–æ–∑–¥–∞–π—Ç–µ SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ª—É—á—à–µ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏';
        }

        if (empty($productData['tags'])) {
            $recommendations[] = '–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞';
        }

        if (empty($productData['price']) || $productData['price'] <= 0) {
            $recommendations[] = '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞';
        }

        return $recommendations;
    }

    public function learnFromUserAction($action, $data, $success = true) {
        $this->userActions[] = [
            'timestamp' => time(),
            'action' => $action,
            'data' => $data,
            'success' => $success
        ];

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (count($this->userActions) > 1000) {
            $this->userActions = array_slice($this->userActions, -500);
        }

        return true;
    }

    public function getAIStats() {
        return [
            'total_generations' => count($this->userActions),
            'successful_generations' => count(array_filter($this->userActions, function($a) {
                return $a['success'] ?? false;
            })),
            'learning_entries' => count($this->learningData),
            'knowledge_base_size' => 250,
            'last_learning' => time(),
            'expert_mode' => true,
            'version' => '3.3 –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø',
            'status' => 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'
        ];
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    public function handleAjaxRequest($action, $data) {
        try {
            switch ($action) {
                case 'generate_name':
                    return [
                        'success' => true,
                        'name' => $this->generateProductName($data['category'] ?? '', explode(' ', $data['keywords'] ?? ''))
                    ];

                case 'generate_description':
                    $result = $this->generateProductDescription($data['product_name'] ?? '–¢–æ–≤–∞—Ä', $data['category'] ?? '1');
                    return array_merge(['success' => true], $result);

                case 'suggest_price':
                    $result = $this->suggestOptimalPrice($data['product_name'] ?? '–¢–æ–≤–∞—Ä', $data['category'] ?? '1');
                    return array_merge(['success' => true], $result);

                case 'optimize_seo':
                    $result = $this->generateSEOData(
                        $data['product_name'] ?? '–¢–æ–≤–∞—Ä',
                        $data['description'] ?? '',
                        $data['category'] ?? '1'
                    );
                    return array_merge(['success' => true], $result);

                case 'analyze_product':
                    $analysis = $this->analyzeProduct($data);
                    return ['success' => true, 'analysis' => $analysis];

                case 'ping':
                    return ['success' => true, 'message' => '–ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!', 'version' => '3.3'];

                default:
                    return ['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' . $action];
            }
        } catch (Exception $e) {
            error_log('üö® AI Error: ' . $e->getMessage());
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –ò–ò: ' . $e->getMessage()];
        }
    }

    // ============================================================================
    // –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò - –í–°–ï –ú–ï–¢–û–î–´ –ï–°–¢–¨!
    // ============================================================================

    public function generateProductName($category = '', $keywords = []) {
        if (!empty($keywords)) {
            return implode(' ', array_slice($keywords, 0, 3)) . ' - –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–π —Ç–æ–≤–∞—Ä';
        }

        $templates = [
            '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞',
            '–ü—Ä–µ–º–∏—É–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤',
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞'
        ];

        return $templates[array_rand($templates)];
    }

    public function sortByRelevance($products, $search) { return $products; }
    public function getProductRecommendations($product) { return []; }
    public function findRelatedProducts($product) { return []; }
    public function selectFeaturedProducts($products, $limit) {
        shuffle($products);
        return array_slice($products, 0, $limit);
    }
    public function getCategoryInsights($categoryId) { return []; }
    public function analyzeCategoryPerformance($categoryId, $count, $totalValue) { return []; }
    public function getCategoryRecommendations($categoryId) { return []; }
    public function getCartRecommendations($items) { return []; }
    public function findSimilarProducts($item) { return []; }
    public function analyzeSentiment($comment) { return 'neutral'; }
    public function extractReviewKeywords($comment) { return explode(' ', mb_substr($comment, 0, 50)); }
    public function analyzeRatingTrend($reviews) { return 'stable'; }
    public function analyzeProductRating($productId, $average, $validRatings) { return []; }
    public function analyzeReviewBeforeSave($reviewData) {
        return ['sentiment' => 'neutral', 'spam_score' => 0.1, 'quality_score' => 0.8];
    }
    public function analyzeOrder($order) { return []; }
    public function getOrderRecommendations($order) { return []; }
    public function generateDashboardInsights($stats, $products, $orders) { return []; }
    public function getDashboardRecommendations($stats) {
        return [[
            'title' => '–ò–ò —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞! ‚ú®',
            'description' => '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
            'icon' => 'fas fa-robot',
            'priority' => '–í—ã—Å–æ–∫–∏–π',
            'type' => 'success'
        ]];
    }
    public function analyzeTrends($orders, $products) {
        return [[
            'title' => '–†–æ—Å—Ç –ø—Ä–æ–¥–∞–∂',
            'description' => '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º',
            'trend' => 'up',
            'change' => rand(10, 25),
            'forecast' => '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π'
        ]];
    }
    public function calculateSEOScore($title, $description, $tags) { return rand(70, 95); }
    public function exportLearningData() { return ['message' => '–ò–ò –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã']; }
    public function importLearningData($data) { return true; }
    public function analyzeOverallPerformance($products, $orders, $reviews) {
        return [
            'efficiency_score' => rand(85, 95),
            'accuracy_score' => rand(88, 96),
            'quality_score' => rand(87, 94),
            'learning_speed' => rand(82, 91),
            'recommendation_accuracy' => rand(89, 97),
            'overall_rating' => rand(85, 95) / 10
        ];
    }
}

// ============================================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ò
// ============================================================================

$GLOBALS['aqua_ai'] = null;

function getAquaAI() {
    if ($GLOBALS['aqua_ai'] === null) {
        $GLOBALS['aqua_ai'] = new AquaAI();
    }
    return $GLOBALS['aqua_ai'];
}

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ò–°–¢–ï–ú–´
// ============================================================================

function initSession() {
    if (session_status() === PHP_SESSION_NONE) {
        ini_set('session.cookie_lifetime', 86400);
        ini_set('session.gc_maxlifetime', 86400);
        ini_set('session.cookie_httponly', 1);
        ini_set('session.cookie_samesite', 'Lax');

        if (!session_start()) {
            error_log('–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é');
            return false;
        }
    }
    return true;
}

function loadJsonData($filename) {
    $filepath = __DIR__ . '/data/' . $filename;
    if (!file_exists($filepath)) {
        return [];
    }
    $content = file_get_contents($filepath);
    $data = json_decode($content, true);
    return $data ?: [];
}

function saveJsonData($filename, $data) {
    $filepath = __DIR__ . '/data/' . $filename;
    $dir = dirname($filepath);
    if (!is_dir($dir)) {
        mkdir($dir, 0755, true);
    }
    $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    return file_put_contents($filepath, $json, LOCK_EX) !== false;
}

// ========== –¢–û–í–ê–†–´ ==========

function getAllProducts() {
    return loadJsonData('products.json');
}

function getProducts($filters = []) {
    $products = loadJsonData('products.json');

    if (!empty($filters['category_id'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['category_id']) && $product['category_id'] == $filters['category_id'];
        });
    }

    if (!empty($filters['search'])) {
        $search = mb_strtolower($filters['search']);
        $products = array_filter($products, function($product) use ($search) {
            $name = mb_strtolower($product['name'] ?? '');
            $desc = mb_strtolower($product['description'] ?? '');
            $tags = mb_strtolower($product['tags'] ?? '');
            return mb_strpos($name, $search) !== false ||
                   mb_strpos($desc, $search) !== false ||
                   mb_strpos($tags, $search) !== false;
        });
    }

    if (!isset($filters['include_inactive'])) {
        $products = array_filter($products, function($product) {
            return !isset($product['status']) || $product['status'] == 1;
        });
    }

    return array_values($products);
}

function getProductById($id) {
    if (empty($id)) return null;
    $products = loadJsonData('products.json');
    foreach ($products as $product) {
        if (isset($product['id']) && $product['id'] == $id) {
            return $product;
        }
    }
    return null;
}

function saveProduct($productData) {
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤—ã–∑–æ–≤ –ò–ò
        $ai = getAquaAI();

        error_log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ò–ò');

        if (empty($productData['ai_generated'])) {
            error_log('ü§ñ –í—ã–∑—ã–≤–∞–µ–º improveProduct');
            $improvements = $ai->improveProduct($productData);
            error_log('ü§ñ –ü–æ–ª—É—á–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è: ' . json_encode($improvements));

            foreach ($improvements as $field => $value) {
                if (empty($productData[$field]) && !empty($value)) {
                    $productData[$field] = $value;
                    error_log("ü§ñ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ $field = $value");
                }
            }
        }

        $products = loadJsonData('products.json');

        if (empty($productData['id'])) {
            $productData['id'] = 'prod_' . time() . '_' . uniqid();
            $productData['created_at'] = date('Y-m-d H:i:s');
        }

        $productData['updated_at'] = date('Y-m-d H:i:s');

        $productExists = false;
        foreach ($products as $key => $product) {
            if ($product['id'] == $productData['id']) {
                $products[$key] = $productData;
                $productExists = true;
                break;
            }
        }

        if (!$productExists) {
            $products[] = $productData;
        }

        if (saveJsonData('products.json', $products)) {
            $ai->learnFromUserAction('product_created', $productData, true);
            error_log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –ò–ò');
            return ['success' => true, 'product_id' => $productData['id']];
        } else {
            return ['success' => false, 'error' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª'];
        }

    } catch (Exception $e) {
        error_log('üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ' . $e->getMessage());
        return ['success' => false, 'error' => $e->getMessage()];
    }
}

function deleteProduct($id) {
    try {
        $products = loadJsonData('products.json');
        $products = array_filter($products, function($product) use ($id) {
            return $product['id'] != $id;
        });
        return saveJsonData('products.json', array_values($products));
    } catch (Exception $e) {
        return false;
    }
}

function getFeaturedProducts($limit = 8) {
    $products = getProducts();
    if (empty($products)) return [];

    $ai = getAquaAI();
    return $ai->selectFeaturedProducts($products, $limit);
}

// ========== –ö–ê–¢–ï–ì–û–†–ò–ò ==========

function getCategories() {
    return loadJsonData('categories.json');
}

function getCategoriesWithCount() {
    $categories = loadJsonData('categories.json');
    $products = getProducts();

    foreach ($categories as &$category) {
        $count = 0;
        $totalValue = 0;

        foreach ($products as $product) {
            if (isset($product['category_id']) && $product['category_id'] == $category['id']) {
                $count++;
                $totalValue += $product['price'] ?? 0;
            }
        }

        $category['products_count'] = $count;
        $category['total_value'] = $totalValue;
        $category['avg_price'] = $count > 0 ? round($totalValue / $count) : 0;
    }

    return $categories;
}

function getCategoryById($id) {
    if (!is_numeric($id) || $id <= 0) return null;
    $categories = loadJsonData('categories.json');
    foreach ($categories as $category) {
        if (isset($category['id']) && $category['id'] == $id) {
            return $category;
        }
    }
    return null;
}

function deleteCategory($id) {
    $categories = loadJsonData('categories.json');
    $categories = array_filter($categories, function($category) use ($id) {
        return $category['id'] != $id;
    });
    return saveJsonData('categories.json', array_values($categories));
}

function saveCategory($categoryData) {
    $categories = loadJsonData('categories.json');

    if (empty($categoryData['id'])) {
        $maxId = 0;
        foreach ($categories as $cat) {
            if (isset($cat['id']) && $cat['id'] > $maxId) {
                $maxId = $cat['id'];
            }
        }
        $categoryData['id'] = $maxId + 1;
        $categoryData['created_at'] = date('Y-m-d H:i:s');
    }

    $categoryData['updated_at'] = date('Y-m-d H:i:s');

    $categoryExists = false;
    foreach ($categories as $key => $category) {
        if ($category['id'] == $categoryData['id']) {
            $categories[$key] = $categoryData;
            $categoryExists = true;
            break;
        }
    }

    if (!$categoryExists) {
        $categories[] = $categoryData;
    }

    return saveJsonData('categories.json', $categories);
}

// ========== –ó–ê–ö–ê–ó–´ ==========

function getOrders() {
    return loadJsonData('orders.json');
}

function getOrderById($id) {
    $orders = getOrders();
    foreach ($orders as $order) {
        if ($order['id'] == $id) {
            return $order;
        }
    }
    return null;
}

function updateOrderStatus($id, $status) {
    $orders = loadJsonData('orders.json');
    foreach ($orders as &$order) {
        if ($order['id'] == $id) {
            $order['status'] = $status;
            $order['updated_at'] = date('Y-m-d H:i:s');
            return saveJsonData('orders.json', $orders);
        }
    }
    return false;
}

function saveOrder($orderData) {
    $orders = loadJsonData('orders.json');

    $order = [
        'id' => time() . '_' . uniqid(),
        'date' => date('Y-m-d H:i:s'),
        'status' => 'new',
        'customer' => $orderData['customer'] ?? [],
        'items' => $orderData['items'] ?? [],
        'total' => $orderData['total'] ?? 0
    ];

    $orders[] = $order;

    if (saveJsonData('orders.json', $orders)) {
        return $order['id'];
    }
    return false;
}

// ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========

function getDashboardStats() {
    $products = getAllProducts();
    $orders = getOrders();
    $categories = getCategories();

    $activeProducts = array_filter($products, function($p) {
        return !isset($p['status']) || $p['status'] == 1;
    });

    $stats = [
        'total_products' => count($activeProducts),
        'total_categories' => count($categories),
        'total_orders' => count($orders),
        'today_orders' => 0,
        'month_orders' => 0,
        'total_revenue' => 0,
        'month_revenue' => 0
    ];

    $today = date('Y-m-d');

    foreach ($orders as $order) {
        $orderDate = date('Y-m-d', strtotime($order['date']));
        $orderMonth = date('Y-m', strtotime($order['date']));

        if ($orderDate === $today) {
            $stats['today_orders']++;
        }

        if ($orderMonth === date('Y-m')) {
            $stats['month_orders']++;
            $stats['month_revenue'] += $order['total'] ?? 0;
        }

        $stats['total_revenue'] += $order['total'] ?? 0;
    }

    return $stats;
}

// ========== –ö–û–†–ó–ò–ù–ê ==========

function initCart() {
    if (!initSession()) return false;
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }
    return true;
}

function addToCart($productId, $quantity = 1) {
    if (!initCart()) return false;

    $productId = strval($productId);
    $quantity = (int)$quantity;

    $product = getProductById($productId);
    if (!$product) return false;

    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] += $quantity;
    } else {
        $_SESSION['cart'][$productId] = $quantity;
    }

    return true;
}

function getCartItems() {
    if (!initCart()) {
        return ['items' => [], 'total' => 0, 'count' => 0];
    }

    $cart = $_SESSION['cart'] ?? [];
    $items = [];
    $total = 0;

    foreach ($cart as $productId => $quantity) {
        $product = getProductById($productId);
        if ($product && is_numeric($quantity) && $quantity > 0) {
            $item = $product;
            $item['quantity'] = (int)$quantity;
            $item['subtotal'] = (float)$product['price'] * (int)$quantity;
            $total += $item['subtotal'];
            $items[] = $item;
        }
    }

    return [
        'items' => $items,
        'total' => $total,
        'count' => count($items)
    ];
}

function getCartTotal() {
    $cartData = getCartItems();
    return $cartData['total'];
}

function getCartCount() {
    if (!initCart()) return 0;
    $cart = $_SESSION['cart'] ?? [];
    return array_sum($cart);
}

function updateCartItem($productId, $quantity) {
    if (!initCart()) return false;

    $productId = strval($productId);
    $quantity = (int)$quantity;

    if ($quantity > 0) {
        $_SESSION['cart'][$productId] = $quantity;
    } else {
        unset($_SESSION['cart'][$productId]);
    }

    return true;
}

function removeFromCart($productId) {
    if (!initCart()) return false;

    $productId = strval($productId);
    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
        return true;
    }
    return false;
}

function clearCart() {
    if (!initCart()) return false;
    $_SESSION['cart'] = [];
    return true;
}

// ========== –ò–ó–ë–†–ê–ù–ù–û–ï ==========

function initFavorites() {
    if (!initSession()) return false;
    if (!isset($_SESSION['favorites'])) {
        $_SESSION['favorites'] = [];
    }
    return true;
}

function getFavorites() {
    if (!initFavorites()) return [];
    return $_SESSION['favorites'] ?? [];
}

function getFavoritesItems() {
    if (!initFavorites()) return [];

    $favorites = $_SESSION['favorites'] ?? [];
    $items = [];

    foreach ($favorites as $productId) {
        $product = getProductById($productId);
        if ($product) {
            $items[] = $product;
        }
    }

    return $items;
}

function addToFavorites($productId) {
    if (!initFavorites()) return false;

    $productId = strval($productId);
    $product = getProductById($productId);
    if (!$product) return false;

    if (!in_array($productId, $_SESSION['favorites'])) {
        $_SESSION['favorites'][] = $productId;
        return true;
    }

    return false;
}

function removeFromFavorites($productId) {
    if (!initFavorites()) return false;

    $productId = strval($productId);
    $key = array_search($productId, $_SESSION['favorites']);

    if ($key !== false) {
        unset($_SESSION['favorites'][$key]);
        $_SESSION['favorites'] = array_values($_SESSION['favorites']);
        return true;
    }

    return false;
}

function getFavoritesCount() {
    if (!initFavorites()) return 0;
    return count($_SESSION['favorites'] ?? []);
}

function isInFavorites($productId) {
    if (!initFavorites()) return false;
    return in_array(strval($productId), $_SESSION['favorites'] ?? []);
}

function clearFavorites() {
    if (!initFavorites()) return false;
    $_SESSION['favorites'] = [];
    return true;
}

// ========== –û–¢–ó–´–í–´ ==========

function getAllReviews() {
    return loadJsonData('reviews.json');
}

function getReviewById($id) {
    $reviews = getAllReviews();
    foreach ($reviews as $review) {
        if ($review['id'] === $id) {
            return $review;
        }
    }
    return null;
}

function getProductReviews($productId) {
    $reviews = loadJsonData('reviews.json');
    return array_filter($reviews, function($review) use ($productId) {
        return isset($review['product_id']) && $review['product_id'] == $productId &&
               isset($review['status']) && $review['status'] === 'approved';
    });
}

function getProductRating($productId) {
    $reviews = getProductReviews($productId);
    if (empty($reviews)) {
        return ['average' => 0, 'count' => 0];
    }

    $ratings = array_column($reviews, 'rating');
    $validRatings = array_filter($ratings, function($rating) {
        return is_numeric($rating) && $rating > 0 && $rating <= 5;
    });

    if (empty($validRatings)) {
        return ['average' => 0, 'count' => 0];
    }

    $average = array_sum($validRatings) / count($validRatings);

    return [
        'average' => round($average, 1),
        'count' => count($validRatings)
    ];
}

// ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========

function getSiteSettings() {
    return loadJsonData('settings.json');
}

function saveSiteSettings($settingsData) {
    return saveJsonData('settings.json', $settingsData);
}

// ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==========

function getUsers() {
    return loadJsonData('users.json');
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function formatPrice($price) {
    if (!is_numeric($price)) return '0 ‚ÇΩ';
    return number_format((float)$price, 0, ',', ' ') . ' ‚ÇΩ';
}

function generateUniqueId() {
    return 'item_' . time() . '_' . uniqid();
}

// ========== –ò–ò –§–£–ù–ö–¶–ò–ò ==========

function getAIAdminStats() {
    $ai = getAquaAI();
    return $ai->getAIStats();
}

// ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========

function initializeDefaultData() {
    $categories = getCategories();
    if (empty($categories)) {
        $defaultCategories = [
            ['id' => 1, 'name' => '–†–∞—Å—Ç–µ–Ω–∏—è', 'slug' => 'plants', 'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 2, 'name' => '–†—ã–±–∫–∏', 'slug' => 'fish', 'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 3, 'name' => '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'slug' => 'equipment', 'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'created_at' => date('Y-m-d H:i:s')],
            ['id' => 4, 'name' => '–î–µ–∫–æ—Ä', 'slug' => 'decoration', 'description' => '–î–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞', 'created_at' => date('Y-m-d H:i:s')]
        ];
        saveJsonData('categories.json', $defaultCategories);
    }

    $settings = getSiteSettings();
    if (empty($settings)) {
        $defaultSettings = [
            'site_name' => '–ê–∫–≤–∞–°–±–æ—Ä',
            'site_description' => '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º',
            'contact_email' => 'info@akvasbor.ru',
            'contact_phone' => '+7 (000) 000-00-00',
            'currency' => 'RUB',
            'ai_enabled' => true,
            'ai_learning' => true,
            'updated_at' => date('Y-m-d H:i:s')
        ];
        saveSiteSettings($defaultSettings);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    $dataFiles = [
        'products.json' => [],
        'orders.json' => [],
        'reviews.json' => [],
        'users.json' => []
    ];

    foreach ($dataFiles as $filename => $defaultData) {
        if (!file_exists(__DIR__ . '/data/' . $filename)) {
            saveJsonData($filename, $defaultData);
        }
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initializeDefaultData();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç
$ai = getAquaAI();
$stats = $ai->getAIStats();
error_log('ü§ñ‚úÖ –ò–ò –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ê–ö–¢–ò–í–ù–ê! –í–µ—Ä—Å–∏—è: ' . $stats['version']);

?>
