<?php
// index.php — Single-file Shop CMS for PHP 8.0 (Beget compatible)
declare(strict_types=1);
session_start();

// ---------------------------- FS bootstrap ----------------------------
const DATA_DIR   = __DIR__ . '/data';
const UPLOAD_DIR = __DIR__ . '/uploads';
@ini_set('file_uploads', '1');
@ini_set('upload_max_filesize', '16M');
@ini_set('post_max_size', '16M');

if (!is_dir(DATA_DIR))  { @mkdir(DATA_DIR, 0775, true); }
if (!is_dir(UPLOAD_DIR)){ @mkdir(UPLOAD_DIR, 0775, true); }

// Soft CSRF (compat safe)
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(16));
}
function csrf_ok(): bool {
    $hdr = $_SERVER['HTTP_X_CSRF'] ?? '';
    if ($hdr === '') return true;
    return hash_equals($_SESSION['csrf_token'] ?? '', $hdr);
}

function read_json(string $file, $default) {
    if (!file_exists($file)) return $default;
    $raw = @file_get_contents($file);
    if ($raw === false || $raw === '') return $default;
    $data = json_decode($raw, true);
    return (is_array($data) || is_object($data)) ? $data : $default;
}
function write_json(string $file, $data): bool {
    $tmp = $file . '.tmp';
    $payload = json_encode($data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
    if ($payload === false) return false;
    $ok = (bool)@file_put_contents($tmp, $payload, LOCK_EX);
    if ($ok) { @rename($tmp, $file); return true; }
    return false;
}
function guid(): string { return bin2hex(random_bytes(8)); }
function slugify(string $s): string {
    $s = trim($s);
    if (function_exists('mb_strtolower')) $s = mb_strtolower($s, 'UTF-8'); else $s = strtolower($s);
    $s = preg_replace('~[^\pL\d]+~u', '-', $s);
    $s = trim($s, '-');
    $s = preg_replace('~[^-\w]+~', '', $s);
    return $s ?: ('item-' . substr(guid(),0,6));
}
function is_admin(): bool { return !empty($_SESSION['is_admin']); }
function require_admin(): void { if (!is_admin()) { http_response_code(403); exit('Forbidden'); } }
function respond_json($data): void { header('Content-Type: application/json; charset=utf-8'); echo json_encode($data, JSON_UNESCAPED_UNICODE); exit; }
function get_body(): array {
    $ct = $_SERVER['CONTENT_TYPE'] ?? '';
    if (stripos($ct, 'application/json') !== false) {
        $raw = file_get_contents('php://input');
        $j = json_decode($raw, true);
        return is_array($j) ? $j : [];
    }
    return $_POST ?? [];
}
function guess_mime(string $file): string {
    if (function_exists('mime_content_type')) {
        $m = @mime_content_type($file);
        if ($m) return $m;
    }
    if (class_exists('finfo')) {
        $finfo = new finfo(FILEINFO_MIME_TYPE);
        $m = @$finfo->file($file);
        if ($m) return $m;
    }
    return 'application/octet-stream';
}
function base_url(): string {
    $scheme = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https' : 'http';
    $host = $_SERVER['HTTP_HOST'] ?? 'localhost';
    $path = rtrim(dirname($_SERVER['SCRIPT_NAME'] ?? ''), '/\\');
    return $scheme . '://' . $host . ($path ? $path : '');
}
// Helpers: color
function hex_to_rgb(string $hex): array {
    $hex = ltrim($hex, '#');
    if (strlen($hex) === 3) $hex = $hex[0].$hex[0].$hex[1].$hex[1].$hex[2].$hex[2];
    if (strlen($hex) !== 6) return [0,0,0];
    $int = hexdec($hex);
    return [($int >> 16) & 255, ($int >> 8) & 255, $int & 255];
}

// ---------------------------- Data files ----------------------------
$productsFile = DATA_DIR . '/products.json';
$catsFile     = DATA_DIR . '/categories.json';
$pagesFile    = DATA_DIR . '/pages.json';
$ordersFile   = DATA_DIR . '/orders.json';
$settingsFile = DATA_DIR . '/settings.json';
// customers/chats
$customersFile= DATA_DIR . '/customers.json';
$chatsFile    = DATA_DIR . '/chats.json';
// NEW: Articles
$articlesFile = DATA_DIR . '/articles.json';

$products  = read_json($productsFile, []);
$categories= read_json($catsFile, []);
$pages     = read_json($pagesFile, []);
$orders    = read_json($ordersFile, []);
$settings  = read_json($settingsFile, [
    'site_name' => 'Neon Bites',
    'brand_color' => '#0ea5e9',
    'accent_beige' => '#f6efe3',
    'admin_password_hash' => password_hash('admin123', PASSWORD_BCRYPT),
    'telegram_bot_token' => '',
    'telegram_chat_id' => '',
    'tg_send_payment_form' => true,
    'delivery_api_url' => '',
    'delivery_api_key' => '',
    'auto_send_delivery' => false,
    'slider_images' => [],
    'slider_items' => [],
    'qr_image' => '',
    'logo' => '',
    'theme' => [
        'font_family' => 'ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial,sans-serif',
        'base_font_size' => 16,
        'radius' => 12,
        'glass_blur' => 12,
        'slider_title_size' => 22,
        'slider_subtitle_size' => 14,
        'logo_height' => 28,
    ],
    // new global slider overlay/text controls (defaults)
    'slider_settings' => [
        'overlay_color' => '#000000',
        'overlay_opacity' => 0.45, // 0..1
        'text_color' => '#ffffff',
    ],
    'footer_widgets' => [
        ['title'=>'Contacts', 'content'=>'<p>Phone: +1 000 000 0000<br>Email: hello@example.com</p>', 'column'=>1],
        ['title'=>'Working hours', 'content'=>'<p>Mon-Sun 09:00—22:00</p>', 'column'=>2],
        ['title'=>'Address', 'content'=>'<p>123 Main St, City</p>', 'column'=>3],
    ],
    'delivery' => ['base_fee'=>0, 'free_from'=>0],
    'promos' => [],
    'ga4_id' => '',
    'yandex_metrika_id' => '',
    'pwa_enabled' => false,
    'donation' => [
        'enabled' => true,
        'button_label' => 'Donate',
        'title' => 'Support our kitchen',
        'content' => '<p>You can support our project. Your donation helps us stay independent and improve the service.</p><p>Methods: cash at pickup, Zelle: donate@example.com, PayPal: @neonbites</p>',
    ],
    'loyalty' => [
        'levels' => [
            ['name'=>'Bronze','percent'=>0,'min_orders'=>0,'min_spent'=>0],
            ['name'=>'Silver','percent'=>3,'min_orders'=>3,'min_spent'=>150],
            ['name'=>'Gold','percent'=>5,'min_orders'=>8,'min_spent'=>400],
        ]
    ],
    'payment_links' => [
        'zelle_email' => 'jfta.team@gmail.com',
        'venmo_url' => 'https://www.venmo.com/u/JFTA-Team'
    ],
]);

$customers = read_json($customersFile, []);
if (!is_array($customers)) $customers = [];
$chats = read_json($chatsFile, ['messages'=>[]]);
if (!is_array($chats) || !isset($chats['messages']) || !is_array($chats['messages'])) $chats = ['messages'=>[]];

$articles = read_json($articlesFile, []);
if (!is_array($articles)) $articles = [];

// Migrate legacy slider_images -> slider_items once
if (empty($settings['slider_items']) && !empty($settings['slider_images'])) {
    $settings['slider_items'] = array_map(fn($p)=>[
        'image' => (string)$p, 'title'=>'', 'subtitle'=>'', 'align'=>'center'
    ], $settings['slider_images']);
    $settings['slider_images'] = [];
    write_json($settingsFile, $settings);
}

// Ensure new settings keys exist
$settings['delivery'] = is_array($settings['delivery'] ?? null) ? $settings['delivery'] : ['base_fee'=>0, 'free_from'=>0];
$settings['delivery']['base_fee'] = (float)($settings['delivery']['base_fee'] ?? 0);
$settings['delivery']['free_from'] = (float)($settings['delivery']['free_from'] ?? 0);
$settings['promos'] = is_array($settings['promos'] ?? null) ? $settings['promos'] : [];
$settings['ga4_id'] = (string)($settings['ga4_id'] ?? '');
$settings['yandex_metrika_id'] = (string)($settings['yandex_metrika_id'] ?? '');
$settings['pwa_enabled'] = (bool)($settings['pwa_enabled'] ?? false);
$settings['donation'] = is_array($settings['donation'] ?? null) ? $settings['donation'] : ['enabled'=>true,'button_label'=>'Donate','title'=>'Donate','content'=>''];
$settings['loyalty'] = is_array($settings['loyalty'] ?? null) ? $settings['loyalty'] : ['levels'=>[['name'=>'Bronze','percent'=>0,'min_orders'=>0,'min_spent'=>0]]];
$settings['theme'] = is_array($settings['theme'] ?? null) ? $settings['theme'] : [];
$settings['theme']['logo_height'] = (int)($settings['theme']['logo_height'] ?? 28);
// slider_settings normalization
$settings['slider_settings'] = is_array($settings['slider_settings'] ?? null) ? $settings['slider_settings'] : [];
$settings['slider_settings']['overlay_color'] = (string)($settings['slider_settings']['overlay_color'] ?? '#000000');
$settings['slider_settings']['overlay_opacity'] = (float)($settings['slider_settings']['overlay_opacity'] ?? 0.45);
if ($settings['slider_settings']['overlay_opacity'] < 0) $settings['slider_settings']['overlay_opacity'] = 0.0;
if ($settings['slider_settings']['overlay_opacity'] > 1) $settings['slider_settings']['overlay_opacity'] = 1.0;
$settings['slider_settings']['text_color'] = (string)($settings['slider_settings']['text_color'] ?? '#ffffff');
// Payment links normalization
$settings['payment_links'] = is_array($settings['payment_links'] ?? null) ? $settings['payment_links'] : [];
$settings['payment_links']['zelle_email'] = (string)($settings['payment_links']['zelle_email'] ?? 'jfta.team@gmail.com');
$settings['payment_links']['venmo_url'] = (string)($settings['payment_links']['venmo_url'] ?? 'https://www.venmo.com/u/JFTA-Team');

// ---------------------------- Seed menu (first run) ----------------------------
if (empty($categories) && empty($products)) {
    $seedCats = [
        ['name'=>'Hot Dishes','slug'=>'hot-dishes'],
        ['name'=>'Side Dishes','slug'=>'side-dishes'],
        ['name'=>'Breakfast','slug'=>'breakfast'],
        ['name'=>'Soups','slug'=>'soups'],
        ['name'=>'Salad','slug'=>'salad'],
        ['name'=>'Desserts','slug'=>'desserts'],
        ['name'=>'Drinks','slug'=>'drinks'],
        ['name'=>'Combo','slug'=>'combo'],
    ];
    $categories = array_map(function($c){ return ['id'=>guid(),'name'=>$c['name'],'slug'=>$c['slug'],'sort'=>0]; }, $seedCats);

    $P = [];
    $add = function($title,$price,$cat) use (&$P) {
        $P[] = [
            'id'=>guid(),
            'title'=>$title,
            'description'=>'',
            'price'=>(float)$price,
            'category'=>$cat,
            'label'=>'',
            'image'=>'',
            'visible'=>true,
            'created_at'=>date('c'),
            'updated_at'=>date('c'),
            'sort'=>0,
            'tags'=>[],
            'options'=>[],
            'available_times'=>[],
            'modifiers'=>[],
            'enable_weight'=>false,
            'enable_split'=>false,
            'badges'=>[],
            'custom_badges'=>[],
            'weight_min'=>0,
            'weight_max'=>1000,
            'weight_step'=>10,
            'split_max_parts'=>4,
            'variants'=>[],
        ];
    };
    $add('Chicken wings (5 pcs)', 4.99, 'hot-dishes');
    $add('Chicken wings (7 pcs)', 6.99, 'hot-dishes');
    $add('Chicken wings (9 pcs)', 8.99, 'hot-dishes');
    $add('Chicken drumsticks (3 pcs)', 4.99, 'hot-dishes');
    $add('Chicken drumsticks (5 pcs)', 6.99, 'hot-dishes');
    $add('Chicken drumsticks (7 pcs)', 8.99, 'hot-dishes');
    $add('Chicken meatballs (cutlets)', 8.99, 'hot-dishes');
    $add('Beef meatballs (cutlets)', 11.99, 'hot-dishes');
    $add('Chicken & cheese quesadilla', 9.99, 'hot-dishes');
    $add('Beef & cheese quesadilla', 11.99, 'hot-dishes');
    $add('Cheese quesadilla', 7.99, 'hot-dishes');
    $add('Chicken nuggets (7 pcs)', 6.49, 'hot-dishes');
    $add('Chicken nuggets (9 pcs)', 8.49, 'hot-dishes');
    $add('Chicken nuggets (12 pcs)', 11.49, 'hot-dishes');
    $add('Beef burger', 9.99, 'hot-dishes');
    $add('Chicken burger', 8.99, 'hot-dishes');
    $add('Beef lula kebab (2 pcs)', 9.99, 'hot-dishes');
    $add('Chicken lula kebab (2 pcs)', 9.99, 'hot-dishes');
    $add('Grilled pork ribs', 14.99, 'hot-dishes');
    $add('Beef shashlik', 19.99, 'hot-dishes');
    $add('Pork shashlik', 15.99, 'hot-dishes');
    $add('Macaroni and cheese', 4.99, 'side-dishes');
    $add('Rice', 4.99, 'side-dishes');
    $add('Mashed potatoes', 4.99, 'side-dishes');
    $add('Fried potatoes', 4.99, 'side-dishes');
    $add('French fries', 4.99, 'side-dishes');
    $add('Oatmeal with milk and berries set', 11.99, 'breakfast');
    $add('Omelet with bacon set', 14.99, 'breakfast');
    $add('Fried eggs set', 14.99, 'breakfast');
    $add('Borscht', 8.99, 'soups');
    $add('Chicken soup', 7.99, 'soups');
    $add('Fresh vegetable salad', 8.99, 'salad');
    $add('Fruit and berry cup', 7.99, 'desserts');
    $add('Cheesecake', 4.99, 'desserts');
    $add('Juice (apple/orange/tomato)', 4.99, 'drinks');
    $add('Iced tea (green/black with lemon)', 2.99, 'drinks');
    $add('Hot tea (green/black/chamomile/mint)', 2.99, 'drinks');
    $add('Combo Lunch Special', 24.99, 'combo');

    $products = $P;
    write_json($catsFile, $categories);
    write_json($productsFile, $products);
}

// Normalize products/categories to include new fields
$products = array_map(function($p){
    $p['sort'] = (int)($p['sort'] ?? 0);
    $p['tags'] = is_array($p['tags'] ?? null) ? $p['tags'] : [];
    $p['options'] = is_array($p['options'] ?? null) ? $p['options'] : [];
    $p['available_times'] = is_array($p['available_times'] ?? null) ? $p['available_times'] : [];
    $p['modifiers'] = is_array($p['modifiers'] ?? null) ? $p['modifiers'] : [];
    $p['enable_weight'] = (bool)($p['enable_weight'] ?? false);
    $p['enable_split'] = (bool)($p['enable_split'] ?? false);
    $p['badges'] = is_array($p['badges'] ?? null) ? array_values(array_unique(array_map('strval',$p['badges']))) : [];
    $p['custom_badges'] = is_array($p['custom_badges'] ?? null) ? array_values(array_filter(array_map('trim',$p['custom_badges']))) : [];
    $p['weight_min'] = is_numeric($p['weight_min'] ?? null) ? (float)$p['weight_min'] : 0.0;
    $p['weight_max'] = is_numeric($p['weight_max'] ?? null) ? (float)$p['weight_max'] : 1000.0;
    $p['weight_step'] = is_numeric($p['weight_step'] ?? null) ? (float)$p['weight_step'] : 10.0;
    $p['split_max_parts'] = (int)($p['split_max_parts'] ?? 4);
    if ($p['split_max_parts'] < 1) $p['split_max_parts'] = 1;
    if ($p['split_max_parts'] > 8) $p['split_max_parts'] = 8;
    $p['variants'] = is_array($p['variants'] ?? null) ? $p['variants'] : [];
    return $p;
}, $products);
$categories = array_map(function($c){
    $c['sort'] = (int)($c['sort'] ?? 0);
    return $c;
}, $categories);

// ---------------------------- Telegram ----------------------------
function tg_send(string $text, array $opts = []): bool {
    global $settings;
    $token = trim((string)($settings['telegram_bot_token'] ?? ''));
    $chat  = trim((string)($settings['telegram_chat_id'] ?? ''));
    if ($token === '' || $chat === '') return false;
    $url = "https://api.telegram.org/bot{$token}/sendMessage";
    $payload = ['chat_id'=>$chat,'text'=>$text,'parse_mode'=>'HTML','disable_web_page_preview'=>false] + $opts;
    $json = json_encode($payload, JSON_UNESCAPED_UNICODE);
    if (function_exists('curl_init')) {
        $ch = curl_init($url);
        curl_setopt_array($ch, [
            CURLOPT_POST => true,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],
            CURLOPT_POSTFIELDS => $json,
            CURLOPT_TIMEOUT => 15,
            CURLOPT_CONNECTTIMEOUT => 8
        ]);
        $res = curl_exec($ch); $err = curl_error($ch); curl_close($ch);
        return $res !== false && empty($err);
    } else {
        $ctx = stream_context_create(['http'=>['method'=>'POST','header'=>"Content-Type: application/json\r\n",'content'=>$json,'timeout'=>15]]);
        return @file_get_contents($url, false, $ctx) !== false;
    }
}
function tg_send_photo(string $photo_url, string $caption = ''): bool {
    global $settings;
    $token = trim((string)($settings['telegram_bot_token'] ?? ''));
    $chat  = trim((string)($settings['telegram_chat_id'] ?? ''));
    if ($token === '' || $chat === '') return false;
    $url = "https://api.telegram.org/bot{$token}/sendPhoto";
    $payload = ['chat_id'=>$chat,'photo'=>$photo_url,'caption'=>$caption,'parse_mode'=>'HTML'];
    $json = json_encode($payload, JSON_UNESCAPED_UNICODE);
    if (function_exists('curl_init')) {
        $ch = curl_init($url);
        curl_setopt_array($ch, [CURLOPT_POST=>true, CURLOPT_RETURNTRANSFER=>true, CURLOPT_HTTPHEADER=>['Content-Type: application/json'], CURLOPT_POSTFIELDS=>$json, CURLOPT_CONNECTTIMEOUT=>8, CURLOPT_TIMEOUT=>20]);
        $res = curl_exec($ch); $err = curl_error($ch); curl_close($ch);
        return $res !== false && empty($err);
    } else {
        $ctx = stream_context_create(['http'=>['method'=>'POST','header'=>"Content-Type: application/json\r\n",'content'=>$json,'timeout'=>20]]);
        return @file_get_contents($url, false, $ctx) !== false;
    }
}

// ---------------------------- Delivery stub ----------------------------
function send_to_delivery_api(array $order): array {
    global $settings;
    $url = trim((string)($settings['delivery_api_url'] ?? ''));
    $key = trim((string)($settings['delivery_api_key'] ?? ''));
    if ($url === '') return ['ok'=>false,'message'=>'Delivery URL is not set'];
    $payload = ['api_key' => $key, 'order' => $order];
    $json = json_encode($payload, JSON_UNESCAPED_UNICODE);
    if (function_exists('curl_init')) {
        $ch = curl_init($url);
        curl_setopt_array($ch, [CURLOPT_POST=>true, CURLOPT_RETURNTRANSFER=>true, CURLOPT_HTTPHEADER=>['Content-Type: application/json'], CURLOPT_POSTFIELDS=>$json, CURLOPT_CONNECTTIMEOUT=>8, CURLOPT_TIMEOUT=>20]);
        $res = curl_exec($ch); $err = curl_error($ch); curl_close($ch);
        if ($res === false) return ['ok'=>false,'message'=>$err ?: 'Delivery failed'];
        return ['ok'=>true,'message'=>'Sent to delivery','response'=>$res];
    } else {
        $ctx = stream_context_create(['http'=>['method'=>'POST','header'=>"Content-Type: application/json\r\n",'content'=>$json,'timeout'=>20]]);
        $res = @file_get_contents($url, false, $ctx);
        if ($res === false) return ['ok'=>false,'message'=>'Delivery failed'];
        return ['ok'=>true,'message'=>'Sent to delivery','response'=>$res];
    }
}

// ---------------------------- Loyalty helpers ----------------------------
function current_customer_id(): ?string { return $_SESSION['customer_id'] ?? null; }
function get_customer_by_id(string $id) {
    global $customers;
    foreach ($customers as $c) if (($c['id'] ?? '') === $id) return $c;
    return null;
}
function get_customer_by_login(string $login) {
    global $customers;
    $login = trim(mb_strtolower($login));
    foreach ($customers as $c) {
        $phone = mb_strtolower((string)($c['phone'] ?? ''));
        $email = mb_strtolower((string)($c['email'] ?? ''));
        if ($login !== '' && ($phone === $login || ($email && $email === $login))) return $c;
    }
    return null;
}
function compute_customer_stats(string $customer_id): array {
    global $orders;
    $cnt = 0; $spent = 0.0; $last_discount = 0.0;
    foreach ($orders as $o) {
        if (($o['customer_id'] ?? '') !== $customer_id) continue;
        $cnt++;
        $spent += (float)($o['total'] ?? 0);
        $d = (float)($o['discount'] ?? 0);
        if ($d > 0) $last_discount = $d;
    }
    return ['orders_count'=>$cnt, 'total_spent'=>round($spent,2), 'last_discount'=>round($last_discount,2)];
}
function determine_loyalty_level(string $customer_id): array {
    global $settings;
    $levels = $settings['loyalty']['levels'] ?? [];
    if (!is_array($levels) || !count($levels)) $levels = [['name'=>'Bronze','percent'=>0,'min_orders'=>0,'min_spent'=>0]];
    $stats = compute_customer_stats($customer_id);
    $best = ['name'=>'Bronze','percent'=>0,'min_orders'=>0,'min_spent'=>0];
    foreach ($levels as $lv) {
        $mo = (int)($lv['min_orders'] ?? 0);
        $ms = (float)($lv['min_spent'] ?? 0);
        if ($stats['orders_count'] >= $mo || $stats['total_spent'] >= $ms) {
            if ((float)($lv['percent'] ?? 0) >= (float)($best['percent'] ?? 0)) $best = $lv;
        }
    }
    return ['level'=>(string)($best['name'] ?? 'Bronze'), 'percent'=>(float)($best['percent'] ?? 0)] + $stats;
}

// ---------------------------- Totals calc ----------------------------
function find_promo(?string $code) {
    global $settings;
    if (!$code) return null;
    $code = trim($code);
    if ($code === '') return null;
    foreach ($settings['promos'] as $p) {
        if (!$p || empty($p['active'])) continue;
        if (strcasecmp((string)($p['code'] ?? ''), $code) !== 0) continue;
        $expires = trim((string)($p['expires'] ?? ''));
        if ($expires !== '' && strtotime($expires) && time() > strtotime($expires)) continue;
        return $p;
    }
    return null;
}
function calc_totals(array $cart, ?string $promo_code): array {
    global $settings;
    $subtotal = 0.0;
    foreach ($cart as $it) {
        $qty = max(1, (int)($it['qty'] ?? 1));
        $price = (float)($it['price'] ?? 0);
        $subtotal += $qty * $price;
    }
    $subtotal = round($subtotal, 2);
    $delivery_base = (float)($settings['delivery']['base_fee'] ?? 0);
    $free_from     = (float)($settings['delivery']['free_from'] ?? 0);
    $delivery_fee  = ($free_from > 0 && $subtotal >= $free_from) ? 0.0 : $delivery_base;

    $discount = 0.0; $promo_applied = null; $promo = find_promo($promo_code);
    if ($promo && $subtotal > 0 && (float)($promo['min_total'] ?? 0) <= $subtotal) {
        if (($promo['type'] ?? 'percent') === 'fixed') $discount = min($subtotal, round((float)$promo['value'], 2));
        else $discount = min($subtotal, round($subtotal * ((float)$promo['value']/100), 2));
        $promo_applied = $promo['code'];
    }

    // Loyalty (only if promo not applied)
    $loyalty_percent = 0.0; $loyalty_applied = false;
    $cust_id = current_customer_id();
    if (!$promo_applied && $cust_id) {
        $lo = determine_loyalty_level($cust_id);
        $loyalty_percent = (float)($lo['percent'] ?? 0);
        if ($loyalty_percent > 0 && $subtotal > 0) {
            $discount += round($subtotal * ($loyalty_percent / 100), 2);
            $loyalty_applied = true;
            $promo_applied = 'LOYALTY';
        }
    }

    $total = max(0.0, round($subtotal - $discount + $delivery_fee, 2));
    return [
        'subtotal' => $subtotal,
        'delivery_fee' => $delivery_fee,
        'discount' => $discount,
        'total' => $total,
        'promo_code' => $promo_applied ?? '',
        'loyalty_percent' => $loyalty_percent,
        'loyalty_applied' => $loyalty_applied,
    ];
}

// ---------------------------- Actions (AJAX) ----------------------------
$action = $_GET['action'] ?? '';

if ($action === 'admin_login') {
    $b = get_body();
    $pass = (string)($b['password'] ?? '');
    $hash = (string)($settings['admin_password_hash'] ?? '');
    if (password_verify($pass, $hash)) { $_SESSION['is_admin'] = true; respond_json(['ok'=>true]); }
    respond_json(['ok'=>false,'message'=>'Invalid password']);
}
if ($action === 'admin_logout') { unset($_SESSION['is_admin']); header('Location: ?route=home'); exit; }

// Customer
if ($action === 'customer_register') {
    $b = get_body();
    $name = trim((string)($b['name'] ?? ''));
    $phone= trim((string)($b['phone'] ?? ''));
    $email= trim((string)($b['email'] ?? ''));
    $pass = (string)($b['password'] ?? '');
    if ($name === '' || $phone === '' || strlen($pass) < 6) {
        respond_json(['ok'=>false,'message'=>'Name, phone and password (>=6) are required']);
    }
    if (get_customer_by_login($phone) || ($email && get_customer_by_login($email))) {
        respond_json(['ok'=>false,'message'=>'User already exists']);
    }
    $cust = [
        'id' => 'c_' . guid(),
        'name' => $name,
        'phone'=> $phone,
        'email'=> $email,
        'password_hash' => password_hash($pass, PASSWORD_BCRYPT),
        'created_at' => date('c'),
        'last_login' => null,
        'reset_token' => '',
        'reset_expires' => '',
    ];
    $customers[] = $cust; write_json($customersFile, $customers);
    $_SESSION['customer_id'] = $cust['id'];
    respond_json(['ok'=>true,'customer'=>['id'=>$cust['id'],'name'=>$cust['name'],'phone'=>$cust['phone'],'email'=>$cust['email']]]);
}
if ($action === 'customer_login') {
    $b = get_body();
    $login = trim((string)($b['login'] ?? ''));
    $pass  = (string)($b['password'] ?? '');
    $c = get_customer_by_login($login);
    if (!$c || !password_verify($pass, (string)($c['password_hash'] ?? ''))) {
        respond_json(['ok'=>false,'message'=>'Invalid credentials']);
    }
    $_SESSION['customer_id'] = $c['id'];
    foreach ($customers as &$cx) { if ($cx['id'] === $c['id']) { $cx['last_login'] = date('c'); break; } } unset($cx);
    write_json($customersFile, $customers);
    respond_json(['ok'=>true,'customer'=>['id'=>$c['id'],'name'=>$c['name'],'phone'=>$c['phone'],'email'=>$c['email']]]);
}
if ($action === 'customer_logout') { unset($_SESSION['customer_id']); respond_json(['ok'=>true]); }
if ($action === 'customer_me') {
    $cid = current_customer_id();
    if (!$cid) respond_json(['ok'=>false,'message'=>'Not logged in']);
    $c = get_customer_by_id($cid);
    if (!$c) respond_json(['ok'=>false,'message'=>'Not found']);
    $lo = determine_loyalty_level($cid);
    respond_json(['ok'=>true,'customer'=>['id'=>$c['id'],'name'=>$c['name'],'phone'=>$c['phone'],'email'=>$c['email']],'loyalty'=>['level'=>$lo['level'],'percent'=>$lo['percent']],'stats'=>['orders_count'=>$lo['orders_count'],'total_spent'=>$lo['total_spent'],'last_discount'=>$lo['last_discount']]]);
}
if ($action === 'customer_orders') {
    $cid = current_customer_id();
    if (!$cid) respond_json(['ok'=>false,'message'=>'Not logged in']);
    $mine = [];
    foreach ($orders as $o) if (($o['customer_id'] ?? '') === $cid) $mine[] = $o;
    usort($mine, fn($a,$b)=>strcmp($b['created_at']??'', $a['created_at']??''));
    respond_json(['ok'=>true,'orders'=>$mine]);
}
if ($action === 'customer_request_reset') {
    $b = get_body();
    $login = trim((string)($b['login'] ?? ''));
    $c = get_customer_by_login($login);
    if (!$c) respond_json(['ok'=>false,'message'=>'User not found']);
    $token = bin2hex(random_bytes(12));
    $expires = time() + 3600;
    foreach ($customers as &$cx) {
        if ($cx['id'] === $c['id']) { $cx['reset_token'] = $token; $cx['reset_expires'] = $expires; break; }
    } unset($cx);
    write_json($customersFile, $customers);
    respond_json(['ok'=>true,'token'=>$token,'message'=>'Reset token generated (valid 1h)']);
}
if ($action === 'customer_reset_password') {
    $b = get_body();
    $token = trim((string)($b['token'] ?? ''));
    $pass  = (string)($b['new_password'] ?? '');
    if (strlen($pass) < 6) respond_json(['ok'=>false,'message'=>'Password too short']);
    $done = false;
    foreach ($customers as &$cx) {
        if (!empty($cx['reset_token']) && hash_equals((string)$cx['reset_token'], $token) && (int)($cx['reset_expires'] ?? 0) >= time()) {
            $cx['password_hash'] = password_hash($pass, PASSWORD_BCRYPT);
            $cx['reset_token'] = ''; $cx['reset_expires'] = '';
            $done = true; break;
        }
    } unset($cx);
    if ($done) { write_json($customersFile, $customers); respond_json(['ok'=>true]); }
    respond_json(['ok'=>false,'message'=>'Invalid or expired token']);
}
// Support chat
if ($action === 'customer_chat_list') {
    $cid = current_customer_id();
    if (!$cid) respond_json(['ok'=>false,'message'=>'Not logged in']);
    $out = array_values(array_filter($chats['messages'], fn($m)=>($m['customer_id'] ?? '') === $cid));
    usort($out, fn($a,$b)=>strcmp($a['time']??'', $b['time']??''));
    respond_json(['ok'=>true,'messages'=>$out]);
}
if ($action === 'customer_chat_send') {
    $cid = current_customer_id();
    if (!$cid) respond_json(['ok'=>false,'message'=>'Not logged in']);
    if (!empty($_SESSION['last_chat']) && (time() - (int)$_SESSION['last_chat']) < 3) {
        respond_json(['ok'=>false,'message'=>'Too fast, please wait a few seconds']);
    }
    $b = get_body();
    $text = trim((string)($b['text'] ?? ''));
    if ($text === '') respond_json(['ok'=>false,'message'=>'Empty message']);
    $msg = ['id'=>'m_'.guid(),'customer_id'=>$cid,'sender'=>'customer','text'=>$text,'time'=>date('c')];
    $chats['messages'][] = $msg; write_json($chatsFile, $chats);
    $_SESSION['last_chat'] = time();
    $c = get_customer_by_id($cid);
    tg_send("💬 New support chat message\nFrom: ".htmlspecialchars((string)($c['name'] ?? ''))." (".htmlspecialchars((string)($c['phone'] ?? '')).")\n\n".substr($text,0,500));
    respond_json(['ok'=>true,'message'=>$msg]);
}

// ---------------------------- Uploads ----------------------------
if ($action === 'upload') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    if (!isset($_FILES['file'])) respond_json(['ok'=>false,'message'=>'No file']);
    $f = $_FILES['file'];
    if (!isset($f['error']) || $f['error'] !== UPLOAD_ERR_OK) respond_json(['ok'=>false,'message'=>'Upload error']);

    $mime = guess_mime($f['tmp_name']);
    $ext  = strtolower((string)(pathinfo(($f['name'] ?? ''), PATHINFO_EXTENSION) ?: ''));
    if ($ext === '') {
        if (preg_match('~image/png~i', $mime)) $ext = 'png';
        elseif (preg_match('~image/jpeg~i', $mime)) $ext = 'jpg';
        elseif (preg_match('~image/gif~i', $mime)) $ext = 'gif';
        elseif (preg_match('~image/webp~i', $mime)) $ext = 'webp';
        elseif (preg_match('~(svg|xml)~i', $mime)) $ext = 'svg';
        else $ext = 'png';
    }
    $allowed = ['png','jpg','jpeg','gif','webp','svg'];
    if (!in_array($ext, $allowed, true)) respond_json(['ok'=>false,'message'=>'Unsupported file type']);
    $mimeOk = preg_match('~^image/(png|jpe?g|gif|webp|svg)~i', (string)$mime) || in_array($ext, $allowed, true);
    if (!$mimeOk) respond_json(['ok'=>false,'message'=>'Only images are allowed']);

    $name = date('Ymd_His') . '_' . guid() . '.' . $ext;
    $dest = UPLOAD_DIR . '/' . $name;
    if (!@move_uploaded_file($f['tmp_name'], $dest)) {
        if (!@copy($f['tmp_name'], $dest)) respond_json(['ok'=>false,'message'=>'Move failed']);
    }
    $ht = UPLOAD_DIR . '/.htaccess';
    if (!file_exists($ht)) @file_put_contents($ht, "Options -Indexes\nphp_flag engine off\n", LOCK_EX);

    $rel = 'uploads/' . $name;
    $context = $_POST['context'] ?? 'misc';
    if ($context === 'qr')  { $settings['qr_image'] = $rel;  write_json($settingsFile, $settings); }
    if ($context === 'logo'){ $settings['logo'] = $rel;      write_json($settingsFile, $settings); }
    respond_json(['ok'=>true,'path'=>$rel]);
}

// Public upload for receipt screenshot
if ($action === 'upload_public') {
    if (!isset($_FILES['file'])) respond_json(['ok'=>false,'message'=>'No file']);
    $f = $_FILES['file'];
    if (!isset($f['error']) || $f['error'] !== UPLOAD_ERR_OK) respond_json(['ok'=>false,'message'=>'Upload error']);
    $mime = guess_mime($f['tmp_name']);
    $ext  = strtolower((string)(pathinfo(($f['name'] ?? ''), PATHINFO_EXTENSION) ?: ''));
    if ($ext === '') {
        if (preg_match('~image/png~i', $mime)) $ext = 'png';
        elseif (preg_match('~image/jpeg~i', $mime)) $ext = 'jpg';
        elseif (preg_match('~image/gif~i', $mime)) $ext = 'gif';
        elseif (preg_match('~image/webp~i', $mime)) $ext = 'webp';
        else $ext = 'png';
    }
    $allowed = ['png','jpg','jpeg','gif','webp'];
    if (!in_array($ext, $allowed, true)) respond_json(['ok'=>false,'message'=>'Unsupported file type']);
    $name = 'receipt_' . date('Ymd_His') . '_' . guid() . '.' . $ext;
    $dest = UPLOAD_DIR . '/' . $name;
    if (!@move_uploaded_file($f['tmp_name'], $dest)) {
        if (!@copy($f['tmp_name'], $dest)) respond_json(['ok'=>false,'message'=>'Move failed']);
    }
    $ht = UPLOAD_DIR . '/.htaccess';
    if (!file_exists($ht)) @file_put_contents($ht, "Options -Indexes\nphp_flag engine off\n", LOCK_EX);

    $rel = 'uploads/' . $name;
    $context = $_POST['context'] ?? 'misc';
    if ($context === 'qr')  { $settings['qr_image'] = $rel;  write_json($settingsFile, $settings); }
    if ($context === 'logo'){ $settings['logo'] = $rel;      write_json($settingsFile, $settings); }
    respond_json(['ok'=>true,'path'=>$rel]);
}

// ---------------------------- Admin CRUD ----------------------------
if ($action === 'save_product') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $id = (string)($b['id'] ?? '');
    $badges = [];
    if (isset($b['badges'])) {
        $badges = array_values(array_intersect(array_map('strval',(array)$b['badges']), ['new','hot','spicy','vegan','bestseller']));
    }
    $custom_badges = [];
    if (!empty($b['custom_badges'])) {
        $custom_badges = is_array($b['custom_badges']) ? $b['custom_badges'] : explode(',', (string)$b['custom_badges']);
        $custom_badges = array_values(array_filter(array_map('trim',$custom_badges)));
    }
    $item = [
        'id' => $id ?: guid(),
        'title' => trim((string)($b['title'] ?? 'Untitled')),
        'description' => trim((string)($b['description'] ?? '')),
        'price' => (float)($b['price'] ?? 0),
        'category' => (string)($b['category'] ?? ''),
        'label' => (string)($b['label'] ?? ''),
        'image' => (string)($b['image'] ?? ''),
        'visible' => (bool)($b['visible'] ?? true),
        'created_at' => (string)($b['created_at'] ?? date('c')),
        'updated_at' => date('c'),
        'sort' => (int)($b['sort'] ?? 0),
        'tags' => array_values(array_filter(array_map('trim', is_array($b['tags'] ?? null) ? $b['tags'] : explode(',', (string)($b['tags'] ?? ''))))),
        'options' => is_array($b['options'] ?? null) ? $b['options'] : [],
        'available_times' => is_array($b['available_times'] ?? null) ? $b['available_times'] : [],
        'modifiers' => is_array($b['modifiers'] ?? null) ? $b['modifiers'] : [],
        'enable_weight' => (bool)($b['enable_weight'] ?? false),
        'enable_split' => (bool)($b['enable_split'] ?? false),
        'badges' => $badges,
        'custom_badges' => $custom_badges,
        'weight_min' => isset($b['weight_min']) ? (float)$b['weight_min'] : 0,
        'weight_max' => isset($b['weight_max']) ? (float)$b['weight_max'] : 1000,
        'weight_step' => isset($b['weight_step']) ? (float)$b['weight_step'] : 10,
        'split_max_parts' => isset($b['split_max_parts']) ? max(1,(int)$b['split_max_parts']) : 4,
        'variants' => is_array($b['variants'] ?? null) ? $b['variants'] : [],
    ];
    $found = false;
    foreach ($products as $k => $p) { if (($p['id'] ?? '') === $item['id']) { $products[$k] = array_merge($p, $item); $found = true; break; } }
    if (!$found) $products[] = $item;
    write_json($productsFile, $products);
    respond_json(['ok'=>true,'product'=>$item]);
}
if ($action === 'delete_product') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $id = (string)($b['id'] ?? '');
    $products = array_values(array_filter($products, fn($p) => ($p['id'] ?? '') !== $id));
    write_json($productsFile, $products); respond_json(['ok'=>true]);
}

if ($action === 'save_category') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $id = (string)($b['id'] ?? ''); $name = trim((string)($b['name'] ?? 'New category')); $slug = trim((string)($b['slug'] ?? ''));
    $sort = (int)($b['sort'] ?? 0);
    $item = ['id' => $id ?: guid(), 'name' => $name, 'slug' => $slug ? slugify($slug) : slugify($name), 'sort'=>$sort];
    $found = false;
    foreach ($categories as $k => $c) { if (($c['id'] ?? '') === $item['id']) { $categories[$k] = array_merge($c, $item); $found = true; break; } }
    if (!$found) $categories[] = $item;
    write_json($catsFile, $categories); respond_json(['ok'=>true,'category'=>$item]);
}
if ($action === 'delete_category') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $id = (string)($b['id'] ?? '');
    $categories = array_values(array_filter($categories, fn($c) => ($c['id'] ?? '') !== $id));
    write_json($catsFile, $categories); respond_json(['ok'=>true]);
}

if ($action === 'save_page') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $id = (string)($b['id'] ?? ''); $title = trim((string)($b['title'] ?? 'New page')); $slug  = trim((string)($b['slug'] ?? ''));
    $item = ['id'=>$id ?: guid(),'title'=>$title,'slug'=>$slug ? slugify($slug) : slugify($title),'content'=>(string)($b['content'] ?? ''),'updated_at'=>date('c'),'created_at'=>(string)($b['created_at'] ?? date('c'))];
    $found = false;
    foreach ($pages as $k => $pg) { if (($pg['id'] ?? '') === $item['id']) { $pages[$k] = $item; $found = true; break; } }
    if (!$found) $pages[] = $item;
    write_json($pagesFile, $pages); respond_json(['ok'=>true,'page'=>$item]);
}
if ($action === 'delete_page') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $id = (string)($b['id'] ?? '');
    $pages = array_values(array_filter($pages, fn($p) => ($p['id'] ?? '') !== $id));
    write_json($pagesFile, $pages); respond_json(['ok'=>true]);
}

// NEW: Articles CRUD + reactions/comments
if ($action === 'save_article') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $id = (string)($b['id'] ?? '');
    $title = trim((string)($b['title'] ?? 'Untitled'));
    $slug  = trim((string)($b['slug'] ?? ''));
    $tags  = array_values(array_filter(array_map('trim', is_array($b['tags'] ?? null) ? $b['tags'] : explode(',', (string)($b['tags'] ?? '')))));
    $item = [
        'id' => $id ?: 'a_' . guid(),
        'title' => $title,
        'slug'  => $slug ? slugify($slug) : slugify($title),
        'image' => (string)($b['image'] ?? ''),
        'content' => (string)($b['content'] ?? ''),
        'excerpt' => (string)($b['excerpt'] ?? ''),
        'tags' => $tags,
        'visible' => (bool)($b['visible'] ?? true),
        'status' => in_array(($b['status'] ?? 'published'), ['draft','published'], true) ? $b['status'] : 'published',
        'created_at' => (string)($b['created_at'] ?? date('c')),
        'updated_at' => date('c'),
    ];
    $foundIdx = null;
    foreach ($articles as $k => $a) { if (($a['id'] ?? '') === $item['id']) { $foundIdx = $k; break; } }
    if ($foundIdx !== null) {
        $old = $articles[$foundIdx];
        if (!isset($old['reactions']) || !is_array($old['reactions'])) $old['reactions'] = ['like'=>0,'love'=>0,'clap'=>0];
        if (!isset($old['comments']) || !is_array($old['comments'])) $old['comments'] = [];
        $articles[$foundIdx] = array_merge($old, $item);
    } else {
        $item['reactions'] = ['like'=>0,'love'=>0,'clap'=>0];
        $item['comments'] = [];
        $articles[] = $item;
    }
    write_json($articlesFile, $articles);
    respond_json(['ok'=>true,'article'=>$item]);
}
if ($action === 'delete_article') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $id = (string)($b['id'] ?? '');
    $articles = array_values(array_filter($articles, fn($a)=>($a['id'] ?? '') !== $id));
    write_json($articlesFile, $articles);
    respond_json(['ok'=>true]);
}
if ($action === 'article_react') {
    $b = get_body();
    $id = (string)($b['id'] ?? '');
    $type = (string)($b['type'] ?? 'like');
    $allowed = ['like','love','clap'];
    if (!in_array($type, $allowed, true)) respond_json(['ok'=>false,'message'=>'Invalid reaction']);
    $ok = false;
    foreach ($articles as &$a) {
        if (($a['id'] ?? '') === $id && (!isset($a['status']) || $a['status'] !== 'draft') && !empty($a['visible'])) {
            if (!isset($a['reactions']) || !is_array($a['reactions'])) $a['reactions'] = ['like'=>0,'love'=>0,'clap'=>0];
            $a['reactions'][$type] = (int)($a['reactions'][$type] ?? 0) + 1;
            $ok = true;
            break;
        }
    }
    unset($a);
    if ($ok) { write_json($articlesFile, $articles); respond_json(['ok'=>true]); }
    respond_json(['ok'=>false,'message'=>'Article not found']);
}
if ($action === 'article_comment') {
    $b = get_body();
    $id = (string)($b['id'] ?? '');
    $name = trim((string)($b['name'] ?? ''));
    $text = trim((string)($b['text'] ?? ''));
    if ($name === '' || $text === '') respond_json(['ok'=>false,'message'=>'Name and text required']);
    if (function_exists('mb_strlen')) {
        if (mb_strlen($name) > 60 || mb_strlen($text) > 2000) respond_json(['ok'=>false,'message'=>'Too long']);
    } else {
        if (strlen($name) > 60 || strlen($text) > 2000) respond_json(['ok'=>false,'message'=>'Too long']);
    }
    $ok = false; $comment = null;
    foreach ($articles as &$a) {
        if (($a['id'] ?? '') === $id && (!isset($a['status']) || $a['status'] !== 'draft') && !empty($a['visible'])) {
            if (!isset($a['comments']) || !is_array($a['comments'])) $a['comments'] = [];
            $comment = [
                'id' => 'cm_' . guid(),
                'name' => htmlspecialchars($name, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8'),
                'text' => nl2br(htmlspecialchars($text, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8')),
                'time' => date('c')
            ];
            $a['comments'][] = $comment; $ok = true; break;
        }
    }
    unset($a);
    if ($ok) { write_json($articlesFile, $articles); respond_json(['ok'=>true,'comment'=>$comment]); }
    respond_json(['ok'=>false,'message'=>'Article not found']);
}

if ($action === 'save_settings') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $settings['site_name'] = trim((string)($b['site_name'] ?? $settings['site_name']));
    $settings['brand_color'] = (string)($b['brand_color'] ?? $settings['brand_color']);
    $settings['accent_beige'] = (string)($b['accent_beige'] ?? $settings['accent_beige']);
    $settings['telegram_bot_token'] = trim((string)($b['telegram_bot_token'] ?? $settings['telegram_bot_token']));
    $settings['telegram_chat_id']   = trim((string)($b['telegram_chat_id'] ?? $settings['telegram_chat_id']));
    $settings['tg_send_payment_form'] = (bool)($b['tg_send_payment_form'] ?? $settings['tg_send_payment_form']);
    $settings['delivery_api_url']   = trim((string)($b['delivery_api_url'] ?? $settings['delivery_api_url']));
    $settings['delivery_api_key']   = trim((string)($b['delivery_api_key'] ?? $settings['delivery_api_key']));
    $settings['auto_send_delivery'] = (bool)($b['auto_send_delivery'] ?? $settings['auto_send_delivery']);
    $settings['delivery']['base_fee'] = isset($b['delivery_base']) ? (float)$b['delivery_base'] : ($settings['delivery']['base_fee'] ?? 0);
    $settings['delivery']['free_from'] = isset($b['delivery_free_from']) ? (float)$b['delivery_free_from'] : ($settings['delivery']['free_from'] ?? 0);
    $settings['ga4_id'] = (string)($b['ga4_id'] ?? $settings['ga4_id']);
    $settings['yandex_metrika_id'] = (string)($b['yandex_metrika_id'] ?? $settings['yandex_metrika_id']);
    $settings['pwa_enabled'] = (bool)($b['pwa_enabled'] ?? $settings['pwa_enabled']);
    if (!empty($b['new_admin_password'])) $settings['admin_password_hash'] = password_hash((string)$b['new_admin_password'], PASSWORD_BCRYPT);

    if (isset($b['footer_widgets']) && is_array($b['footer_widgets'])) {
        $fw = [];
        foreach ($b['footer_widgets'] as $w) {
            $fw[] = ['title'=>trim((string)($w['title'] ?? '')),'content'=>(string)($w['content'] ?? ''),'column'=>(int)($w['column'] ?? 1)];
        }
        $settings['footer_widgets'] = $fw;
    }
    if (isset($b['promos']) && is_array($b['promos'])) {
        $norm = [];
        foreach ($b['promos'] as $p) {
            $norm[] = [
                'code' => strtoupper(trim((string)($p['code'] ?? ''))),
                'type' => in_array(($p['type'] ?? 'percent'), ['percent','fixed'], true) ? $p['type'] : 'percent',
                'value' => (float)($p['value'] ?? 0),
                'active' => (bool)($p['active'] ?? false),
                'expires' => trim((string)($p['expires'] ?? '')),
                'min_total' => (float)($p['min_total'] ?? 0),
            ];
        }
        $settings['promos'] = $norm;
    }
    // Donation & Loyalty
    if (isset($b['donation']) && is_array($b['donation'])) {
        $don = $settings['donation'] ?? [];
        $don['enabled'] = (bool)($b['donation']['enabled'] ?? $don['enabled'] ?? true);
        $don['button_label'] = (string)($b['donation']['button_label'] ?? $don['button_label'] ?? 'Donate');
        $don['title'] = (string)($b['donation']['title'] ?? $don['title'] ?? 'Donate');
        $don['content'] = (string)($b['donation']['content'] ?? $don['content'] ?? '');
        $settings['donation'] = $don;
    }
    if (isset($b['loyalty']) && is_array($b['loyalty'])) {
        $levels = [];
        foreach (($b['loyalty']['levels'] ?? []) as $lv) {
            $levels[] = [
                'name' => (string)($lv['name'] ?? 'Level'),
                'percent' => (float)($lv['percent'] ?? 0),
                'min_orders' => (int)($lv['min_orders'] ?? 0),
                'min_spent'  => (float)($lv['min_spent'] ?? 0),
            ];
        }
        if ($levels) $settings['loyalty']['levels'] = $levels;
    }
    
    // Payment links
    if (isset($b['payment_links']) && is_array($b['payment_links'])) {
        $settings['payment_links']['zelle_email'] = trim((string)($b['payment_links']['zelle_email'] ?? $settings['payment_links']['zelle_email']));
        $settings['payment_links']['venmo_url'] = trim((string)($b['payment_links']['venmo_url'] ?? $settings['payment_links']['venmo_url']));
    }

    write_json($settingsFile, $settings); respond_json(['ok'=>true]);
}

// Save slider
if ($action === 'save_slider') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $items = is_array($b['items'] ?? null) ? $b['items'] : [];
    $normalized = [];
    foreach ($items as $it) {
        $normalized[] = [
            'image' => (string)($it['image'] ?? ''),
            'title' => trim((string)($it['title'] ?? '')),
            'subtitle' => trim((string)($it['subtitle'] ?? '')),
            'align' => in_array(($it['align'] ?? ''), ['left','center','right'], true) ? $it['align'] : 'center',
            'title_size' => isset($it['title_size']) ? (int)$it['title_size'] : null,
            'subtitle_size' => isset($it['subtitle_size']) ? (int)$it['subtitle_size'] : null,
        ];
    }
    $settings['slider_items'] = $normalized; $settings['slider_images'] = [];
    write_json($settingsFile, $settings); respond_json(['ok'=>true]);
}

// Save styles
if ($action === 'save_styles') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $theme = $settings['theme'] ?? [];
    $theme['font_family'] = (string)($b['font_family'] ?? $theme['font_family'] ?? '');
    $theme['base_font_size'] = (int)($b['base_font_size'] ?? $theme['base_font_size'] ?? 16);
    $theme['radius'] = (int)($b['radius'] ?? $theme['radius'] ?? 12);
    $theme['glass_blur'] = (int)($b['glass_blur'] ?? $theme['glass_blur'] ?? 12);
    $theme['slider_title_size'] = (int)($b['slider_title_size'] ?? $theme['slider_title_size'] ?? 22);
    $theme['slider_subtitle_size'] = (int)($b['slider_subtitle_size'] ?? $theme['slider_subtitle_size'] ?? 14);
    $theme['logo_height'] = (int)($b['logo_height'] ?? $theme['logo_height'] ?? 28);
    $settings['theme'] = $theme;
    write_json($settingsFile, $settings); respond_json(['ok'=>true,'theme'=>$theme]);
}

if ($action === 'order_status') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $oid = (string)($b['order_id'] ?? ''); $status = (string)($b['status'] ?? '');
    $ok = false; foreach ($orders as $k => $o) { if (($o['id'] ?? '') === $oid) { $orders[$k]['status'] = $status; $ok = true; break; } }
    if ($ok) write_json($ordersFile, $orders); respond_json(['ok'=>$ok]);
}
if ($action === 'send_to_delivery') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $oid = (string)($b['order_id'] ?? ''); $order = null;
    foreach ($orders as $o) if (($o['id'] ?? '') === $oid) { $order = $o; break; }
    if (!$order) respond_json(['ok'=>false,'message'=>'Order not found']);
    $res = send_to_delivery_api($order); respond_json($res);
}

// Sort
if ($action === 'product_sort') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $id = (string)($b['id'] ?? ''); $delta = (int)($b['delta'] ?? 0);
    foreach ($products as &$p) { if (($p['id'] ?? '') === $id) { $p['sort'] = (int)($p['sort'] ?? 0) + $delta; if ($p['sort'] < 0) $p['sort']=0; break; } }
    unset($p);
    write_json($productsFile, $products); respond_json(['ok'=>true]);
}
if ($action === 'category_sort') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body(); $id = (string)($b['id'] ?? ''); $delta = (int)($b['delta'] ?? 0);
    foreach ($categories as &$c) { if (($c['id'] ?? '') === $id) { $c['sort'] = (int)($c['sort'] ?? 0) + $delta; if ($c['sort'] < 0) $c['sort']=0; break; } }
    unset($c);
    write_json($catsFile, $categories); respond_json(['ok'=>true]);
}

// CSV
if ($action === 'export_csv') {
    require_admin();
    header('Content-Type: text/csv; charset=utf-8');
    header('Content-Disposition: attachment; filename="products.csv"');
    $out = fopen('php://output', 'w');
    fputcsv($out, ['id','title','price','category','label','description','visible','image','tags','sort']);
    foreach ($products as $p) {
        fputcsv($out, [
            $p['id'] ?? '',
            $p['title'] ?? '',
            $p['price'] ?? 0,
            $p['category'] ?? '',
            $p['label'] ?? '',
            $p['description'] ?? '',
            !empty($p['visible']) ? 1 : 0,
            $p['image'] ?? '',
            implode(';', $p['tags'] ?? []),
            (int)($p['sort'] ?? 0),
        ]);
    }
    fclose($out); exit;
}
if ($action === 'import_csv') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    if (!isset($_FILES['file'])) respond_json(['ok'=>false,'message'=>'No file']);
    $tmp = $_FILES['file']['tmp_name'] ?? '';
    if (!$tmp || !is_uploaded_file($tmp)) respond_json(['ok'=>false,'message'=>'Upload failed']);
    $fh = fopen($tmp, 'r'); if (!$fh) respond_json(['ok'=>false,'message'=>'Open failed']);
    $header = fgetcsv($fh, 0, ','); $map = [];
    foreach ($header as $i=>$h) $map[strtolower(trim((string)$h))] = $i;
    $count = 0;
    while (($row = fgetcsv($fh, 0, ',')) !== false) {
        $get = function($k) use ($map, $row){ $i = $map[$k] ?? null; return $i !== null ? (string)($row[$i] ?? '') : ''; };
        $id = $get('id') ?: guid();
        $item = [
            'id' => $id,
            'title' => $get('title'),
            'price' => (float)$get('price'),
            'category' => $get('category'),
            'label' => $get('label'),
            'description' => $get('description'),
            'visible' => ((int)$get('visible')) ? true : false,
            'image' => $get('image'),
            'tags' => array_values(array_filter(array_map('trim', explode(';', $get('tags'))))),
            'sort' => (int)$get('sort'),
            'updated_at' => date('c'),
        ];
        $found = false;
        foreach ($products as $k=>$p) { if (($p['id'] ?? '') === $id) { $products[$k] = array_merge($p, $item); $found = true; break; } }
        if (!$found) {
            $item['created_at'] = date('c');
            $item['visible'] = $item['visible'] ?? true;
            $item['options'] = [];
            $item['available_times'] = [];
            $item['modifiers'] = [];
            $item['enable_weight'] = false;
            $item['enable_split'] = false;
            $item['badges'] = [];
            $item['custom_badges'] = [];
            $item['weight_min'] = 0;
            $item['weight_max'] = 1000;
            $item['weight_step'] = 10;
            $item['split_max_parts'] = 4;
            $item['variants'] = [];
            $products[] = $item;
        }
        $count++;
    }
    fclose($fh);
    write_json($productsFile, $products); respond_json(['ok'=>true,'imported'=>$count]);
}

// Totals API
if ($action === 'calc_totals') {
    $b = get_body();
    $cart = is_array($b['cart'] ?? null) ? $b['cart'] : [];
    $promo_code = (string)($b['promo_code'] ?? '');
    $t = calc_totals($cart, $promo_code);
    respond_json(['ok'=>true] + $t);
}

// Create order
if ($action === 'create_order') {
    $b = get_body();
    $cart = is_array($b['cart'] ?? null) ? $b['cart'] : [];

    $customer = [
        'name' => trim((string)($b['name'] ?? '')),
        'phone' => trim((string)($b['phone'] ?? '')),
        'car_number' => trim((string)($b['car_number'] ?? '')),
        'address' => trim((string)($b['address'] ?? '')),
        'comment' => trim((string)($b['comment'] ?? '')),
        'truckstop_name' => trim((string)($b['truckstop_name'] ?? '')),
        'truck_brand' => trim((string)($b['truck_brand'] ?? '')),
        'cabin_color' => trim((string)($b['cabin_color'] ?? '')),
        'license_plate' => trim((string)($b['license_plate'] ?? '')),
    ];

    $cid = current_customer_id();
    if ($cid) {
        $c = get_customer_by_id($cid);
        if ($c) {
            if ($customer['name'] === '' && !empty($c['name'])) $customer['name'] = $c['name'];
            if ($customer['phone'] === '' && !empty($c['phone'])) $customer['phone'] = $c['phone'];
        }
    }

    $required_fields = ['name','phone','truckstop_name','truck_brand','cabin_color','license_plate'];
    foreach ($required_fields as $rf) {
        if (empty($customer[$rf])) respond_json(['ok'=>false,'message'=>"Field '{$rf}' is required"]);
    }

    $promo_code = trim((string)($b['promo_code'] ?? ''));
    $t = calc_totals($cart, $promo_code);

    $items = [];
    foreach ($cart as $it) {
        $qty = max(1, (int)($it['qty'] ?? 1)); $price = (float)($it['price'] ?? 0);
        $items[] = [
            'id'=>(string)($it['id'] ?? ''),
            'title'=>(string)($it['title'] ?? ''),
            'qty'=>$qty,
            'price'=>$price,
            'options'=> $it['options'] ?? [],
        ];
    }
    $order = [
        'id'=>'ord_' . date('YmdHis') . '_' . substr(guid(),0,6),
        'status'=>'awaiting_payment',
        'items'=>$items,
        'subtotal'=>(float)$t['subtotal'],
        'discount'=>(float)$t['discount'],
        'delivery_fee'=>(float)$t['delivery_fee'],
        'total'=>(float)$t['total'],
        'promo_code'=>$t['promo_code'],
        'customer'=>$customer,
        'customer_id'=>$cid ?: '',
        'created_at'=>date('c'),
        'payment'=>null,
    ];
    $orders[] = $order; write_json($ordersFile, $orders);

    $lines = ["🛒 New order <b>{$order['id']}</b>", ''];
    foreach ($items as $it) {
        $optTxt = '';
        if (!empty($it['options']) && is_array($it['options'])) {
            $pairs = [];
            foreach ($it['options'] as $g=>$v) $pairs[] = "$g: $v";
            $optTxt = $pairs ? " (" . implode(', ', $pairs) . ")" : '';
        }
        $linePrice = (float)$it['price'] * (int)$it['qty'];
        $lines[] = "• {$it['title']} × {$it['qty']}{$optTxt} — $" . number_format($linePrice,2,'.','');
    }
    $lines[] = '';
    $lines[] = "Subtotal: $" . number_format((float)$order['subtotal'],2,'.','');
    if ($order['discount']>0) $lines[] = "Discount: -$" . number_format((float)$order['discount'],2,'.','') . ($order['promo_code'] ? " ({$order['promo_code']})" : '');
    if ($order['delivery_fee']>0) $lines[] = "Delivery: $" . number_format((float)$order['delivery_fee'],2,'.','');
    $lines[] = "Total: <b>$" . number_format($order['total'],2,'.','') . "</b>";
    $lines[] = "Name: " . htmlspecialchars($customer['name']); $lines[] = "Phone: " . htmlspecialchars($customer['phone']);
    if ($customer['license_plate']) $lines[] = "License plate: " . htmlspecialchars($customer['license_plate']);
    if ($customer['truck_brand']) $lines[] = "Truck brand: " . htmlspecialchars($customer['truck_brand']);
    if ($customer['cabin_color']) $lines[] = "Cabin color: " . htmlspecialchars($customer['cabin_color']);
    if ($customer['truckstop_name']) $lines[] = "Truckstop: " . htmlspecialchars($customer['truckstop_name']);
    if ($customer['car_number']) $lines[] = "Car (legacy): " . htmlspecialchars($customer['car_number']);
    if ($customer['address']) $lines[] = "Address: " . htmlspecialchars($customer['address']);
    if ($customer['comment']) $lines[] = "Comment: " . htmlspecialchars($customer['comment']);
    tg_send(implode("\n", $lines));
    if (!empty($settings['auto_send_delivery'])) send_to_delivery_api($order);

    respond_json(['ok'=>true,'order_id'=>$order['id'],'redirect'=>'?route=qr&order='.$order['id']]);
}
if ($action === 'confirm_payment') {
    $b = get_body(); $oid = (string)($b['order_id'] ?? '');
    $payment = [
        'name'=>trim((string)($b['name'] ?? '')),
        'phone'=>trim((string)($b['phone'] ?? '')),
        'car_number'=>trim((string)($b['car_number'] ?? '')),
        'amount'=>(float)($b['amount'] ?? 0),
        'receipt'=>trim((string)($b['receipt'] ?? '')),
        'receipt_image'=>trim((string)($b['receipt_image'] ?? '')),
        'submitted_at'=>date('c')
    ];
    $found = false; foreach ($orders as $k => $o) { if (($o['id'] ?? '') === $oid) { $orders[$k]['payment'] = $payment; $orders[$k]['status'] = 'payment_submitted'; $found = true; break; } }
    if (!$found) respond_json(['ok'=>false,'message'=>'Order not found']);
    write_json($ordersFile, $orders);
    if (!empty($settings['tg_send_payment_form'])) {
        $caption = "✅ Payment form submitted for <b>{$oid}</b>\n"
                 . "Name: " . htmlspecialchars($payment['name']) . "\n"
                 . "Phone: " . htmlspecialchars($payment['phone']) . "\n"
                 . ($payment['car_number'] ? "Car: " . htmlspecialchars($payment['car_number']) . "\n" : "")
                 . "Amount: $" . number_format($payment['amount'],2,'.','') . "\n"
                 . ($payment['receipt'] ? "Receipt: " . htmlspecialchars($payment['receipt']) : "");
        if (!empty($payment['receipt_image'])) {
            $absUrl = rtrim(base_url(),'/') . '/' . ltrim($payment['receipt_image'],'/');
            tg_send_photo($absUrl, $caption);
        } else {
            tg_send($caption);
        }
    }
    respond_json(['ok'=>true,'message'=>'Submitted']);
}

// Telegram test
if ($action === 'tg_test') {
    require_admin();
    if (!csrf_ok()) respond_json(['ok'=>false,'message'=>'CSRF']);
    $b = get_body();
    $msg = (string)($b['message'] ?? '🧪 Test message');
    $ok = tg_send("🧪 Telegram test\n{$msg}\nTime: ".date('Y-m-d H:i:s'));
    respond_json(['ok'=>$ok, 'message'=>$ok ? 'Sent' : 'Failed. Check token/chat id and talk to the bot first.']);
}

// ---------------------------- Routing ----------------------------
$route = $_GET['route'] ?? 'home';
$param_order = $_GET['order'] ?? null;
$pageBySlug = null;

// Special routes: manifest/sw/sitemap
if ($route === 'manifest.json') {
    if (empty($settings['pwa_enabled'])) { header('Content-Type: application/json'); echo json_encode(['name'=>$settings['site_name']??'Site']); exit; }
    header('Content-Type: application/manifest+json; charset=utf-8');
    echo json_encode([
        'name' => (string)($settings['site_name'] ?? 'Site'),
        'short_name' => (string)($settings['site_name'] ?? 'Site'),
        'start_url' => base_url().'/?route=home',
        'display' => 'standalone',
        'background_color' => '#ffffff',
        'theme_color' => (string)($settings['brand_color'] ?? '#0ea5e9'),
        'icons' => [],
    ], JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
    exit;
}
if ($route === 'sw.js') {
    header('Content-Type: application/javascript; charset=utf-8');
    ?>
self.addEventListener('install', e => { self.skipWaiting(); });
self.addEventListener('activate', e => { self.clients.claim(); });
self.addEventListener('fetch', e => {
  const req = e.request;
  if (req.method !== 'GET') return;
  e.respondWith(caches.open('nb-cache-v1').then(async cache => {
    const hit = await cache.match(req);
    if (hit) return hit;
    try {
      const res = await fetch(req);
      if (res && res.status===200 && (req.url.includes('.png') || req.url.includes('.jpg') || req.url.includes('.webp') || req.url.includes('.css') || req.url.includes('.js'))) {
        cache.put(req, res.clone());
      }
      return res;
    } catch (err) {
      return hit || Response.error();
    }
  }));
});
<?php
    exit;
}
if ($route === 'sitemap.xml') {
    header('Content-Type: application/xml; charset=utf-8');
    $base = base_url().'/';
    $urls = [];
    $urls[] = $base.'?route=home';
    $urls[] = $base.'?route=articles';
    foreach ($pages as $pg) $urls[] = $base.'?route='.urlencode((string)($pg['slug'] ?? ''));
    echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
    echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\n";
    foreach ($urls as $u) { echo '  <url><loc>'.htmlspecialchars($u).'</loc></url>'."\n"; }
    echo '</urlset>';
    exit;
}

// Page routing (map custom pages by slug)
if ($route && !in_array($route, ['home','admin','qr','product','account','donate','articles','article','cart'], true)) {
    foreach ($pages as $pg) {
        if (($pg['slug'] ?? '') === $route) {
            $pageBySlug = $pg;
            break;
        }
    }
    if (!$pageBySlug) $route = 'home';
}

// ---------------------------- Head/Styles ----------------------------
$siteName = htmlspecialchars((string)($settings['site_name'] ?? 'Site'));
$brand    = htmlspecialchars((string)($settings['brand_color'] ?? '#0ea5e9'));
$beige    = htmlspecialchars((string)($settings['accent_beige'] ?? '#f6efe3'));
$logo     = htmlspecialchars((string)($settings['logo'] ?? ''));
$theme    = $settings['theme'] ?? [];
$ff       = (string)($theme['font_family'] ?? 'ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial,sans-serif');
$fs       = (int)($theme['base_font_size'] ?? 16);
$radius   = (int)($theme['radius'] ?? 12);
$blur     = (int)($theme['glass_blur'] ?? 12);
$stitle   = (int)($theme['slider_title_size'] ?? 22);
$ssub     = (int)($theme['slider_subtitle_size'] ?? 14);
$logoH    = (int)($theme['logo_height'] ?? 28);
$isCustomer = !empty($_SESSION['customer_id']);
$don      = $settings['donation'] ?? ['enabled'=>false,'button_label'=>'Donate'];
?><!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title><?= $siteName ?></title>
<?php if (!empty($settings['pwa_enabled'])): ?>
<link rel="manifest" href="?route=manifest.json">
<meta name="theme-color" content="<?= htmlspecialchars((string)$settings['brand_color']) ?>">
<?php endif; ?>
<?php if ($route === 'admin' && is_admin()): ?>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<?php endif; ?>
<style>
:root{
  --brand: <?= $brand ?>;
  --beige: <?= $beige ?>;
  --bg: #faf8f4;
  --card: #ffffff;
  --text: #151515;
  --muted: #6b7280;
  --success: #10b981;
  --danger: #ef4444;
  --shadow: 0 10px 30px rgba(0,0,0,.07);
  --glass: rgba(246, 239, 227, .72);
  --neon: 0 0 12px rgba(14,165,233,.45), 0 0 30px rgba(14,165,233,.2);
  --ff: <?= json_encode($ff) ?>;
  --fs: <?= $fs ?>px;
  --radius: <?= $radius ?>px;
  --blur: <?= $blur ?>px;
  --sliderTitle: <?= $stitle ?>px;
  --sliderSubtitle: <?= $ssub ?>px;
  --logoH: <?= $logoH ?>px;
}
*, *::before, *::after { box-sizing:border-box }
html,body{margin:0;padding:0;font-family:var(--ff);font-size:var(--fs);color:var(--text);background:var(--bg)}
a{color:inherit;text-decoration:none}
.container{max-width:1200px;margin:0 auto;padding:0 16px}
.glass-nav{position:sticky;top:0;z-index:50;background:var(--glass);backdrop-filter: blur(var(--blur));box-shadow: var(--shadow), 0 2px 0 rgba(255,255,255,.4) inset, var(--neon);border-bottom:1px solid rgba(255,255,255,.6)}
.nav-inner{display:flex;align-items:center;gap:12px;padding:10px 12px}
.brand{display:flex;align-items:center;gap:10px;font-weight:800;letter-spacing:.3px;min-width:0;flex:1}
.brand img{height:var(--logoH);width:auto;border-radius:6px;box-shadow:var(--neon)}
/* Brand title hidden on mobile: only logo stays */
.brand span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:100%;font-size:clamp(14px, 2.2vw, 20px);flex:1;min-width:0}

/* ИСПРАВЛЕННЫЙ МОБИЛЬНЫЙ СЛОГАН - теперь в 3 строчки и адаптивный */
.mobile-slogan{
  display:none;
  font-size:clamp(16px, 4.2vw, 20px);
  color:#64748b;
  font-weight:400;
  text-align:center;
  padding:2px 4px;
  line-height:1.1;
  max-width:100%;
  word-wrap:break-word;
  hyphens:auto;
  -webkit-hyphens:auto;
  -ms-hyphens:auto;
}

.nav-menu{display:flex;gap:10px;flex-wrap:wrap;margin-left:8px}
.nav-right{margin-left:auto;display:flex;gap:8px;align-items:center}
.hamb{display:none;border:1px solid rgba(0,0,0,.06);background:#fff;box-shadow:var(--shadow);padding:10px 12px;border-radius:10px;cursor:pointer}
@media(max-width:760px){
  .nav-menu{display:none}
  .hamb{display:inline-flex}
  .nav-right > .btn{display:none !important} /* hide register/login/account/cart buttons */
  .brand span{display:none} /* hide site title, leave only logo */
  .mobile-slogan{display:block} /* показываем мобильный слоган */
}
/* Mobile menu: slide-in drawer + overlay */
.mobile-menu{
  position:fixed; top:0; right:0; bottom:0; width:86vw; max-width:380px;
  background:#fff; border-left:1px solid #eee; box-shadow:var(--shadow);
  transform:translateX(100%); transition:transform .25s ease; z-index:81;
  padding:16px; overflow:auto; -webkit-overflow-scrolling:touch;
}
.mobile-menu.open{ transform: translateX(0); }
.menu-overlay{
  position:fixed; inset:0; background:rgba(0,0,0,.45);
  display:none; opacity:0; transition:opacity .2s ease; z-index:80;
}
.menu-overlay.show{ display:block; opacity:1; }
.mobile-menu a{display:block;padding:10px;border-radius:8px}
.btn{display:inline-flex;align-items:center;gap:8px;justify-content:center;padding:10px 14px;border-radius:var(--radius);border:1px solid rgba(0,0,0,.06);background:#fff;box-shadow:var(--shadow);cursor:pointer;transition:.2s ease}
.btn:hover{transform: translateY(-1px); box-shadow: 0 14px 30px rgba(0,0,0,.12)}
.btn-primary{background:linear-gradient(180deg, #fff, #eef6ff); border-color:rgba(14,165,233,.25)}
.btn-primary.active, .btn-primary:active {box-shadow:var(--neon)}
.btn-ghost{background:rgba(255,255,255,.7)}
.badge{font-size:12px;padding:3px 8px;border-radius:999px;font-weight:700}
.badge-new{background:#6366f1;color:#fff}
.badge-hot{background:#ef4444;color:#fff}
.badge-spicy{background:#f97316;color:#fff}
.badge-vegan{background:#22c55e;color:#fff}
.badge-best{background:#06b6d4;color:#fff}
.badge-deal{background:#22c55e;color:#fff}
.hero{padding:22px 0}
.slider{position:relative;overflow:hidden;border-radius:calc(var(--radius) + 4px); box-shadow: var(--shadow)}
.slider-track{display:flex;transition: transform .6s ease}
.slide{min-width:100%;height:280px;background:#ddd;background-size:cover;background-position:center;position:relative}
@media(max-width:760px){.slide{height:220px}}
.slide::after{content:'';position:absolute;inset:0;background:linear-gradient(0deg, rgba(0,0,0,.45), rgba(0,0,0,.15));pointer-events:none}
.slide .overlay{position:absolute;inset:auto 0 0 0;padding:18px;color:#fff;text-shadow:0 1px 2px rgba(0,0,0,.5)}
.slide .overlay.align-left{text-align:left}
.slide .overlay.align-center{text-align:center}
.slide .overlay.align-right{text-align:right}
.slide .overlay h2{margin:0 0 6px 0;font-size:var(--sliderTitle)}
.slide .overlay p{margin:0;opacity:.95;font-size:var(--sliderSubtitle)}
.slider-dots{position:absolute;left:0;right:0;bottom:10px;display:flex;gap:8px;justify-content:center;z-index:2}
.dot{width:8px;height:8px;border-radius:999px;background:rgba(255,255,255,.7);box-shadow:var(--shadow);cursor:pointer}
.dot.active{background:var(--brand)}
.grid{display:grid;grid-template-columns:repeat(4,1fr);gap:16px}
@media(max-width:1024px){.grid{grid-template-columns:repeat(3,1fr)}}
@media(max-width:760px){.grid{grid-template-columns:repeat(2,1fr)}}
@media(max-width:480px){.grid{grid-template-columns:1fr}}
.card{background:var(--card);border-radius:calc(var(--radius) + 4px);box-shadow:var(--shadow);padding:12px;display:flex;flex-direction:column;gap:10px;position:relative;transition: transform .2s ease, box-shadow .2s ease;cursor:pointer}
.card:hover{ transform: translateY(-2px); box-shadow: 0 16px 34px rgba(0,0,0,.12)}
.card .img{height:170px;background-size: cover;border-radius:var(--radius);background-position:center;background-repeat:no-repeat;position:relative;display:flex;align-items:center;justify-content:center;color:#888;font-size:12px}
.card .img .ph{position:absolute;bottom:8px;right:8px;background:rgba(255,255,255,0.8);padding:4px 6px;border-radius:8px}
.card h4{margin:0;font-size:16px}
.card .price{font-weight:800}
.ribbon{position:absolute;top:12px;left:12px;display:flex;gap:6px;flex-wrap:wrap;max-width:75%}
.topbar{display:flex;gap:10px;flex-wrap:wrap;align-items:center;justify-content:space-between;margin:12px 0}
.cat-tabs{display:flex;gap:8px;flex-wrap:wrap}
.tab{padding:8px 12px;border-radius:999px;background:#fff;border:1px solid rgba(0,0,0,.06);cursor:pointer}
.tab.active{background:var(--brand);color:#fff;box-shadow:var(--neon)}
.cart-btn{margin-left:auto}
.cart-panel{position:fixed;right:16px;bottom:16px;z-index:40;background:#fff;border:1px solid rgba(0,0,0,.06);border-radius:var(--radius);box-shadow:var(--shadow);padding:14px;width:320px;max-width:calc(100% - 32px)}
@media(max-width:760px){.cart-panel{display:none !important}}
.cart-item{display:flex;align-items:center;justify-content:space-between;padding:8px 0;border-bottom:1px dashed #eee}
.cart-item:last-child{border-bottom:0}
/* MODALS */
.modal{position:fixed;inset:0;background:rgba(0,0,0,.35);display:none;align-items:center;justify-content:center;padding:16px;z-index:60}
.modal.show{display:flex}
.modal-card{background:#fff;border-radius:var(--radius);box-shadow:var(--shadow);width:min(860px,100%);padding:16px;max-height: calc(100vh - 40px); overflow:auto; -webkit-overflow-scrolling:touch}
.row{display:flex;gap:10px;flex-wrap:wrap}
.col{flex:1 1 220px}
.input, textarea, select{width:100%;padding:10px 12px;border:1px solid #e5e7eb;border-radius:10px;background:#fff}
.footer{margin-top:40px;background:#fff;border-top:1px solid #eee}
.footer .cols{display:grid;grid-template-columns:repeat(3,1fr);gap:16px;padding:24px 0}
@media(max-width:760px){.footer .cols{grid-template-columns:1fr}}
.small{font-size:12px;color:var(--muted)}
.fav{position:absolute;top:12px;right:12px;background:#fff;border:1px solid #eee;border-radius:999px;padding:6px;cursor:pointer;box-shadow:var(--shadow);user-select:none}
.fav.active{color:#ef4444;border-color:#fca5a5}
.detail{display:grid;grid-template-columns: 1.2fr 1fr; gap:16px}
@media(max-width:900px){.detail{grid-template-columns:1fr}}
.detail .hero-img{width:100%;border-radius:12px;object-fit:cover;max-height:420px}

/* Switch */
.switch {position:relative;display:inline-block;width:44px;height:24px;vertical-align:middle}
.switch input{opacity:0;width:0;height:0}
.switch .slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background:#e5e7eb;transition:.2s;border-radius:999px}
.switch .slider:before{position:absolute;content:"";height:18px;width:18px;left:3px;bottom:3px;background:white;transition:.2s;border-radius:50%}
.switch input:checked + .slider{background:#60a5fa;box-shadow:var(--neon)}
.switch input:checked + .slider:before{transform:translateX(20px)}
.table{width:100%;border-collapse:collapse;background:#fff;border-radius:12px;overflow:hidden;box-shadow:var(--shadow)}
.table th,.table td{padding:10px;border-bottom:1px solid #f0f0f0;text-align:left;vertical-align:top}
.table th{background:#fafafa;font-weight:700}
.dz{border:2px dashed #cbd5e1;border-radius:12px;padding:20px;text-align:center;background:#f8fafc;color:#64748b}
.dz.drag{background:#eef6ff;border-color:var(--brand);box-shadow:var(--neon)}
.action{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border:1px solid #eee;border-radius:8px;background:#fff;cursor:pointer}
.action:hover{box-shadow:var(--shadow)}
.help{background:#f1f5f9;padding:6px 10px;border-radius:8px}
.notice{padding:10px;border-radius:10px;background:#ecfeff;border:1px solid #bae6fd}
.slide-editor{border:1px solid #eee;border-radius:12px;padding:10px;background:#fff;box-shadow:var(--shadow)}
.slide-thumb{width:160px;height:100px;background:#eee;border-radius:10px;background-size:cover;background-position:center}
.summary{background:#f8fafc;border:1px solid #e5e7eb;border-radius:12px;padding:10px}
.builder{border:1px dashed #e5e7eb;border-radius:10px;padding:10px}
.builder .rowline{display:flex;gap:8px;align-items:center;margin:6px 0;flex-wrap:wrap}
.canvas-wrap{display:grid;grid-template-columns:repeat(2,1fr);gap:12px}
@media(max-width:900px){.canvas-wrap{grid-template-columns:1fr}}

/* Cart page */
.cart-page{padding:18px 0}
.cart-page .items{background:#fff;border:1px solid #eee;border-radius:12px;padding:10px}
.cart-page .rowline{display:flex;align-items:center;justify-content:space-between;padding:8px 0;border-bottom:1px dashed #eee}
.cart-page .rowline:last-child{border-bottom:0}
@media(max-width:760px){
  .topbar{flex-direction:column; align-items:stretch}
  .brand span{max-width:40vw}
  .cat-tabs{display:none} /* hide categories tabs on mobile */
}
/* Floating cart FAB on mobile */
.cart-fab{
  position:fixed; left:14px; bottom:16px;
  width:56px; height:56px; border-radius:50%;
  background:#fff; border:1px solid #e5e7eb; box-shadow:var(--shadow);
  display:none; align-items:center; justify-content:center; gap:0;
  font-size:20px; font-weight:800; z-index:85; cursor:pointer;
}
.cart-fab span{position:absolute; right:-6px; top:-6px; background:#ef4444; color:#fff; width:20px; height:20px; border-radius:50%; font-size:12px; display:flex; align-items:center; justify-content:center; box-shadow:var(--shadow)}
@media(max-width:760px){ .cart-fab{display:flex} }
</style>
</head>
<body>
<!-- NAV -->
<div class="glass-nav">
  <div class="container nav-inner">
    <div class="brand">
      <?php if ($logo): ?><img src="<?= $logo ?>" alt="Logo"><?php endif; ?>
      <span><?= $siteName ?></span>
      <div class="mobile-slogan">One for all and all for one, together we are stronger</div>
    </div>
    <div class="nav-menu" id="navMenu">
      <a class="btn btn-ghost" href="?route=home">Home</a>
      <a class="btn btn-ghost" href="?route=articles">Association news</a>
      <?php foreach ($pages as $pg): ?>
        <a class="btn btn-ghost" href="?route=<?= htmlspecialchars((string)$pg['slug']) ?>"><?= htmlspecialchars((string)$pg['title']) ?></a>
      <?php endforeach; ?>
      <?php if (!empty($don['enabled'])): ?>
        <a class="btn btn-ghost" href="?route=donate"><?= htmlspecialchars((string)($don['button_label'] ?? 'Donate')) ?></a>
      <?php endif; ?>
    </div>
    <div class="nav-right">
      <?php if (!$isCustomer): ?>
        <a class="btn" href="?route=account#register">Register</a>
        <a class="btn" href="?route=account#login">Login</a>
      <?php else: ?>
        <a class="btn btn-primary" href="?route=account">Account</a>
      <?php endif; ?>
      <button class="hamb" onclick="toggleMobileMenu()">☰ Menu</button>
      <button class="btn btn-primary cart-btn" onclick="openCart()">Cart (<span id="cartCount">0</span>)</button>
    </div>
  </div>
</div>

<!-- Floating Cart FAB (mobile only) -->
<div class="cart-fab" onclick="openCart()" title="Cart">
  🛒
  <span id="cartCountFab">0</span>
</div>

<!-- Mobile Menu Drawer + Overlay -->
<div class="menu-overlay" id="menuOverlay" onclick="closeMobileMenu()"></div>
<div class="mobile-menu" id="mobileMenu" role="dialog" aria-modal="true" aria-label="Mobile menu">
  <div style="padding:8px 0">
    <a href="?route=home" onclick="closeMobileMenu()">Home</a>
    <a href="?route=articles" onclick="closeMobileMenu()">Association news</a>
    <?php foreach ($pages as $pg): ?>
      <a href="?route=<?= htmlspecialchars((string)$pg['slug']) ?>" onclick="closeMobileMenu()"><?= htmlspecialchars((string)$pg['title']) ?></a>
    <?php endforeach; ?>
    <?php if (!empty($don['enabled'])): ?>
      <a href="?route=donate" onclick="closeMobileMenu()"><?= htmlspecialchars((string)($don['button_label'] ?? 'Donate')) ?></a>
    <?php endif; ?>
    <div class="small" style="margin:8px 0 4px;color:#94a3b8">Categories</div>
    <?php foreach ($categories as $c): ?>
      <a href="?route=home#cat=<?= htmlspecialchars((string)$c['slug']) ?>" onclick="closeMobileMenu()"><?= htmlspecialchars((string)$c['name']) ?></a>
    <?php endforeach; ?>
    <a href="?route=cart" onclick="closeMobileMenu()">Cart</a>
    <?php if (!$isCustomer): ?>
      <a href="?route=account#register" onclick="closeMobileMenu()">Register</a>
      <a href="?route=account#login" onclick="closeMobileMenu()">Login</a>
    <?php else: ?>
      <a href="?route=account" onclick="closeMobileMenu()">Account</a>
    <?php endif; ?>
  </div>
</div>
<div class="container">
<?php if ($route === 'admin'): ?>
  <?php if (!is_admin()): ?>
    <div class="admin">
      <h2>Admin login</h2>
      <div class="modal-card" style="max-width:420px">
        <div class="small">Default password: admin123 — change it in Settings</div>
        <div style="height:8px"></div>
        <input id="adminPass" type="password" class="input" placeholder="Password">
        <div style="height:8px"></div>
        <button class="btn btn-primary" onclick="adminLogin()">Login</button>
        <div id="adminMsg" class="small" style="color:var(--danger);margin-top:8px;"></div>
      </div>
    </div>
  <?php else: ?>
    <div class="admin">
      <div style="display:flex;justify-content:space-between;align-items:center">
        <h2>Admin panel</h2>
        <a class="action" href="?action=admin_logout">Logout</a>
      </div>
      <div class="tabs">
        <button class="tabbtn active" data-tab="products" onclick="openTab('products')">Products</button>
        <button class="tabbtn" data-tab="categories" onclick="openTab('categories')">Categories</button>
        <button class="tabbtn" data-tab="articles" onclick="openTab('articles')">Association news</button>
        <button class="tabbtn" data-tab="pages" onclick="openTab('pages')">Pages</button>
        <button class="tabbtn" data-tab="slider" onclick="openTab('slider')">Slider</button>
        <button class="tabbtn" data-tab="footer" onclick="openTab('footer')">Footer</button>
        <button class="tabbtn" data-tab="orders" onclick="openTab('orders')">Orders</button>
        <button class="tabbtn" data-tab="analytics" onclick="openTab('analytics')">Analytics</button>
        <button class="tabbtn" data-tab="styles" onclick="openTab('styles')">Styles</button>
        <button class="tabbtn" data-tab="settings" onclick="openTab('settings')">Settings</button>
      </div>
  <!-- Products -->
  <div id="tab-products">
    <div style="display:flex;gap:8px;align-items:center;justify-content:space-between;margin-bottom:8px;flex-wrap:wrap">
      <div class="help">Create products: drag&drop photo, title, price, category, badges. Options, variants, modifiers, weight/split, sort, CSV.</div>
      <div style="display:flex;gap:8px;flex-wrap:wrap">
        <button class="btn" onclick="exportCSV()">Export CSV</button>
        <label class="action" style="gap:4px"><input type="file" id="csvFile" accept=".csv" style="display:none" onchange="importCSV(this)">Import CSV</label>
        <button class="btn btn-primary" onclick="editProduct()">Add product</button>
      </div>
    </div>
    <table class="table">
      <thead><tr><th>Sort</th><th>Image</th><th>Title</th><th>Category</th><th>Price</th><th>Badges</th><th>Visible</th><th>Actions</th></tr></thead>
      <tbody id="prodRows"></tbody>
    </table>
  </div>
  <!-- Categories -->
  <div id="tab-categories" style="display:none">
    <div style="display:flex;justify-content:flex-end;margin-bottom:8px">
      <button class="btn btn-primary" onclick="editCategory()">Add category</button>
    </div>
    <table class="table">
      <thead><tr><th>Sort</th><th>Name</th><th>Slug</th><th>Actions</th></tr></thead>
      <tbody id="catRows"></tbody>
    </table>
  </div>
  <!-- Articles -->
  <div id="tab-articles" style="display:none">
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;gap:8px;flex-wrap:wrap">
      <div class="notice">Create news/articles. Drag & drop cover image. Reactions and comments are built-in.</div>
      <div>
        <button class="btn btn-primary" onclick="editArticle()">Add article</button>
      </div>
    </div>
    <table class="table">
      <thead><tr><th>Cover</th><th>Title</th><th>Status</th><th>Updated</th><th>Reactions</th><th>Comments</th><th>Actions</th></tr></thead>
      <tbody id="artRows"></tbody>
    </table>
  </div>
  <!-- Pages -->
  <div id="tab-pages" style="display:none">
    <div style="display:flex;justify-content:space-between;margin-bottom:8px;gap:8px;flex-wrap:wrap">
      <button class="btn btn-primary" onclick="editPage()">Add page</button>
      <button class="btn" onclick="ensureArticlesNav()">Create "Association news" nav page</button>
    </div>
    <table class="table">
      <thead><tr><th>Title</th><th>Slug</th><th>Updated</th><th>Actions</th></tr></thead>
      <tbody id="pageRows"></tbody>
    </table>
  </div>
  <!-- Slider -->
  <div id="tab-slider" style="display:none">
    <div class="notice">Each slide may have an image, title, subtitle and alignment. Custom font sizes per slide.</div>
    <div id="slidesWrap" style="display:flex;flex-direction:column;gap:12px;margin-top:10px"></div>
    <div style="display:flex;gap:8px;margin-top:8px">
      <button class="btn" onclick="addSlide()">Add slide</button>
      <button class="btn btn-primary" onclick="saveSlider()">Save slider</button>
    </div>
    <div id="sliderGlobalsWrap" style="margin-top:12px"></div>
  </div>
  <!-- Footer -->
  <div id="tab-footer" style="display:none">
    <div class="notice">Build footer with widgets (HTML allowed).</div>
    <div id="footerWidgets"></div>
    <div style="display:flex;gap:8px;margin-top:8px">
      <button class="btn" onclick="addFooterWidget()">Add widget</button>
      <button class="btn btn-primary" onclick="saveFooter()">Save footer</button>
    </div>
  </div>
  <!-- Orders -->
  <div id="tab-orders" style="display:none">
    <table class="table">
      <thead><tr><th>ID</th><th>Status</th><th>Totals</th><th>Customer</th><th>Payment</th><th>Actions</th></tr></thead>
      <tbody id="orderRows"></tbody>
    </table>
  </div>
  <!-- Analytics -->
  <div id="tab-analytics" style="display:none">
    <div class="row">
      <div class="col">
        <div class="summary">
          <div class="small">Revenue today</div>
          <div style="font-size:22px;font-weight:800;color:#16a34a">$<span id="kpi_rev_today">0.00</span></div>
        </div>
      </div>
      <div class="col">
        <div class="summary">
          <div class="small">Orders today</div>
          <div style="font-size:22px;font-weight:800;color:#2563eb"><span id="kpi_orders_today">0</span></div>
        </div>
      </div>
      <div class="col">
        <div class="summary">
          <div class="small">Avg order (30d)</div>
          <div style="font-size:22px;font-weight:800">$<span id="kpi_avg">0.00</span></div>
        </div>
      </div>
    </div>
    <div style="height:12px"></div>
    <div class="canvas-wrap">
      <div class="card"><h3 style="margin:0 0 8px 0">Revenue (30 days)</h3><canvas id="chRevenue"></canvas></div>
      <div class="card"><h3 style="margin:0 0 8px 0">Orders (30 days)</h3><canvas id="chOrders"></canvas></div>
      <div class="card"><h3 style="margin:0 0 8px 0">Top products</h3><canvas id="chTopProducts"></canvas></div>
      <div class="card"><h3 style="margin:0 0 8px 0">Sales by category</h3><canvas id="chByCat"></canvas></div>
    </div>
    <div style="height:12px"></div>
    <div class="card">
      <h3 style="margin:0 0 8px 0">Top customers</h3>
      <table class="table">
        <thead><tr><th>Name</th><th>Phone</th><th>Orders</th><th>Total</th></tr></thead>
        <tbody id="custRows"></tbody>
      </table>
    </div>
  </div>
  <!-- Styles -->
  <div id="tab-styles" style="display:none">
    <div class="notice">Live style editor. Click "Save styles" to persist.</div>
    <div class="row">
      <div class="col">
        <label class="small">Base font size (px)</label>
        <input id="sty_fs" type="range" min="14" max="20" value="<?= $fs ?>" oninput="applyStyle('--fs', this.value+'px'); qs('#sty_fs_val').textContent=this.value">
        <div class="small">Current: <span id="sty_fs_val"><?= $fs ?></span> px</div>
        <div style="height:8px"></div>
        <label class="small">Radius (px)</label>
        <input id="sty_radius" type="range" min="6" max="24" value="<?= $radius ?>" oninput="applyStyle('--radius', this.value+'px'); qs('#sty_radius_val').textContent=this.value">
        <div class="small">Current: <span id="sty_radius_val"><?= $radius ?></span> px</div>
        <div style="height:8px"></div>
        <label class="small">Glass blur (px)</label>
        <input id="sty_blur" type="range" min="6" max="24" value="<?= $blur ?>" oninput="applyStyle('--blur', this.value+'px'); qs('#sty_blur_val').textContent=this.value">
        <div class="small">Current: <span id="sty_blur_val"><?= $blur ?></span> px</div>
      </div>
      <div class="col">
        <label class="small">Font family</label>
        <select id="sty_ff" class="input" onchange="applyStyle('--ff', this.value)">
          <?php
            $fonts = [
              'System UI' => 'ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial,sans-serif',
              'Poppins-like' => '"Poppins",ui-sans-serif,system-ui,Arial,sans-serif',
              'Roboto-like' => 'Roboto,ui-sans-serif,system-ui,Arial,sans-serif',
              'Serif (Georgia)' => 'Georgia,Times,serif',
            ];
            foreach ($fonts as $nm=>$val) {
                $sel = (trim($ff) === $val) ? 'selected' : '';
                echo '<option value="'.htmlspecialchars($val).'" '.$sel.'>'.htmlspecialchars($nm).'</option>';
            }
          ?>
        </select>
        <div style="height:8px"></div>
        <label class="small">Default slider title size (px)</label>
        <input id="sty_stitle" type="range" min="16" max="40" value="<?= $stitle ?>" oninput="applyStyle('--sliderTitle', this.value+'px'); qs('#sty_stitle_val').textContent=this.value">
        <div class="small">Current: <span id="sty_stitle_val"><?= $stitle ?></span> px</div>
        <div style="height:8px"></div>
        <label class="small">Default slider subtitle size (px)</label>
        <input id="sty_ssub" type="range" min="12" max="24" value="<?= $ssub ?>" oninput="applyStyle('--sliderSubtitle', this.value+'px'); qs('#sty_ssub_val').textContent=this.value">
        <div class="small">Current: <span id="sty_ssub_val"><?= $ssub ?></span> px</div>
      </div>
      <div class="col">
        <label class="small">Logo height (px)</label>
        <input id="sty_logoH" type="range" min="20" max="100" value="<?= $logoH ?>" oninput="applyStyle('--logoH', this.value+'px'); qs('#sty_logoH_val').textContent=this.value">
        <div class="small">Current: <span id="sty_logoH_val"><?= $logoH ?></span> px</div>
      </div>
    </div>
    <div style="height:10px"></div>
    <button class="btn btn-primary" onclick="saveStyles()">Save styles</button>
  </div>
  <!-- Settings -->
  <div id="tab-settings" style="display:none">
    <div class="row">
      <div class="col">
        <h3>Site</h3>
        <label class="small">Site name</label>
        <input id="setSiteName" class="input" value="<?= htmlspecialchars((string)$settings['site_name']) ?>">
        <div style="height:8px"></div>
        <label class="small">Brand color</label>
        <input id="setBrand" type="color" class="input" value="<?= htmlspecialchars((string)$settings['brand_color']) ?>">
        <div style="height:8px"></div>
        <label class="small">Accent beige</label>
        <input id="setBeige" type="color" class="input" value="<?= htmlspecialchars((string)$settings['accent_beige']) ?>">
        <div style="height:8px"></div>
        <label class="small">New admin password</label>
        <input id="setPass" type="password" class="input" placeholder="Leave blank to keep">
        <div style="height:10px"></div>
        <h3>Logo</h3>
        <div class="dz" id="dzLogo">Drag & drop logo here, or click</div>
        <div class="small">Current: <?= $logo ? '<a href="'.htmlspecialchars($logo).'" target="_blank">Open</a>' : 'not set' ?></div>
        <div style="height:10px"></div>
        <h3>PWA</h3>
        <label class="small">
          <span style="margin-right:6px">Enable PWA</span>
          <label class="switch"><input id="setPWA" type="checkbox" <?= !empty($settings['pwa_enabled'])?'checked':'' ?>><span class="slider"></span></label>
        </label>
      </div>
      <div class="col">
        <h3>Telegram</h3>
        <label class="small">Bot token</label>
        <input id="setTgToken" class="input" value="<?= htmlspecialchars((string)$settings['telegram_bot_token']) ?>">
        <div style="height:8px"></div>
        <label class="small">Chat ID</label>
        <input id="setTgChat" class="input" value="<?= htmlspecialchars((string)$settings['telegram_chat_id']) ?>">
        <div style="height:8px"></div>
        <label class="small"><label class="switch"><input id="setTgSendPay" type="checkbox" <?= !empty($settings['tg_send_payment_form'])?'checked':'' ?>><span class="slider"></span></label> <span style="margin-left:6px">Send payment form to Telegram</span></label>
        <div style="height:8px"></div>
        <button class="action" onclick="tgTest()">Send test</button>
        <div class="small">Tip: talk to your bot first; set your chat ID; then click test.</div>
        <div style="height:12px"></div>
        <h3>Delivery</h3>
        <label class="small">Base fee</label>
        <input id="setDelBase" class="input" type="number" step="0.01" value="<?= htmlspecialchars((string)$settings['delivery']['base_fee']) ?>">
        <div style="height:8px"></div>
        <label class="small">Free from (subtotal)</label>
        <input id="setDelFreeFrom" class="input" type="number" step="0.01" value="<?= htmlspecialchars((string)$settings['delivery']['free_from']) ?>">
        <div style="height:12px"></div>
        <h4>Delivery API</h4>
        <label class="small">API URL</label>
        <input id="setDelUrl" class="input" value="<?= htmlspecialchars((string)$settings['delivery_api_url']) ?>">
        <div style="height:8px"></div>
        <label class="small">API key</label>
        <input id="setDelKey" class="input" value="<?= htmlspecialchars((string)$settings['delivery_api_key']) ?>">
        <div style="height:8px"></div>
        <label class="small"><label class="switch"><input id="setAutoDel" type="checkbox" <?= !empty($settings['auto_send_delivery'])?'checked':'' ?>><span class="slider"></span></label> <span style="margin-left:6px">Auto send orders to delivery</span></label>
      </div>
      <div class="col">
        <h3>QR Payment</h3>
        <div class="dz" id="dzQR">Drag & drop QR image here, or click</div>
        <div class="small">Current: <?= $settings['qr_image'] ? '<a href="'.htmlspecialchars((string)$settings['qr_image']).'" target="_blank">Open</a>' : 'not set' ?></div>
        <div style="height:8px"></div>
        <h4>Payment Links</h4>
        <label class="small">Zelle Email</label>
        <input id="setZelleEmail" class="input" value="<?= htmlspecialchars((string)$settings['payment_links']['zelle_email']) ?>">
        <div style="height:8px"></div>
        <label class="small">Venmo URL</label>
        <input id="setVenmoUrl" class="input" value="<?= htmlspecialchars((string)$settings['payment_links']['venmo_url']) ?>">
        <div style="height:12px"></div>
        <h3>Analytics</h3>
        <label class="small">GA4 Measurement ID</label>
        <input id="setGA4" class="input" placeholder="G-XXXXXXXXXX" value="<?= htmlspecialchars((string)$settings['ga4_id']) ?>">
        <div style="height:8px"></div>
        <label class="small">Yandex Metrika ID</label>
        <input id="setYM" class="input" placeholder="XXXXXXXX" value="<?= htmlspecialchars((string)$settings['yandex_metrika_id']) ?>">
        <div style="height:8px"></div>
        <h3>Promocodes</h3>
        <div id="promoWrap"></div>
        <div style="display:flex;gap:8px;margin-top:8px">
          <button class="btn" onclick="addPromo()">Add promo</button>
          <button class="btn btn-primary" onclick="savePromos()">Save promos</button>
        </div>
        <div style="height:12px"></div>
        <h3>Donation</h3>
        <div class="card">
          <label class="small"><label class="switch"><input id="don_enabled" type="checkbox" <?= !empty($settings['donation']['enabled'])?'checked':'' ?>><span class="slider"></span></label> <span style="margin-left:6px">Enabled</span></label>
          <div style="height:8px"></div>
          <label class="small">Button label</label>
          <input id="don_btn" class="input" value="<?= htmlspecialchars((string)($settings['donation']['button_label'] ?? 'Donate')) ?>">
          <div style="height:8px"></div>
          <label class="small">Title</label>
          <input id="don_title" class="input" value="<?= htmlspecialchars((string)($settings['donation']['title'] ?? 'Donate')) ?>">
          <div style="height:8px"></div>
          <label class="small">Content (HTML)</label>
          <textarea id="don_content" class="input" rows="5"><?= htmlspecialchars((string)($settings['donation']['content'] ?? '')) ?></textarea>
          <div style="height:8px"></div>
          <button class="btn" onclick="saveDonation()">Save donation</button>
        </div>
        <div style="height:12px"></div>
        <h3>Loyalty</h3>
        <div id="loyaltyWrap"></div>
        <div style="display:flex;gap:8px;margin-top:8px">
          <button class="btn" onclick="addLoyaltyLevel()">Add level</button>
          <button class="btn btn-primary" onclick="saveLoyalty()">Save loyalty</button>
        </div>
      </div>
    </div>
    <div style="height:10px"></div>
    <button class="btn btn-primary" onclick="saveSettings()">Save settings</button>
  </div>
</div>
<!-- Product modal -->
<div class="modal" id="modalProduct">
  <div class="modal-card">
    <h3>Edit product</h3>
    <input type="hidden" id="p_id">
    <div class="row">
      <div class="col">
        <label class="small">Title</label>
        <input id="p_title" class="input" placeholder="Title">
      </div>
      <div class="col">
        <label class="small">Price</label>
        <input id="p_price" type="number" step="0.01" class="input"  placeholder="0.00">
           </div>
      <div class="col">
        <label class="small">Category</label>
        <select id="p_category" class="input">
          <option value="">—</option>
          <?php foreach ($categories as $c): ?>
            <option value="<?= htmlspecialchars((string)$c['slug']) ?>"><?= htmlspecialchars((string)$c['name']) ?></option>
          <?php endforeach; ?>
        </select>
      </div>
    </div>
  <div class="row" style="margin-top:8px">
  <div class="col">
    <label class="small">Sort (0..)</label>
    <input id="p_sort" class="input" type="number" min="0" step="1" value="0">
  </div>
  <div class="col">
    <label class="small">Legacy label</label>
    <input id="p_label" class="input" placeholder="New / Deal">
  </div>
  <div class="col">
    <label class="small">Tags (comma separated)</label>
    <input id="p_tags" class="input" placeholder="spicy, vegan">
  </div>
</div>

<div style="height:8px"></div>
<label class="small">Description</label>
<textarea id="p_desc" rows="3" class="input" placeholder="Description"></textarea>

<div style="height:8px"></div>
<label class="small">Badges</label>
<div style="display:flex;gap:12px;flex-wrap:wrap;align-items:center">
  <label class="small"><label class="switch"><input type="checkbox" id="b_new"><span class="slider"></span></label> <span style="margin-left:6px">New</span></label>
  <label class="small"><label class="switch"><input type="checkbox" id="b_hot"><span class="slider"></span></label> <span style="margin-left:6px">Hot</span></label>
  <label class="small"><label class="switch"><input type="checkbox" id="b_spicy"><span class="slider"></span></label> <span style="margin-left:6px">Spicy</span></label>
  <label class="small"><label class="switch"><input type="checkbox" id="b_vegan"><span class="slider"></span></label> <span style="margin-left:6px">Vegan</span></label>
  <label class="small"><label class="switch"><input type="checkbox" id="b_best"><span class="slider"></span></label> <span style="margin-left:6px">Bestseller</span></label>
</div>
<div style="height:8px"></div>
<label class="small">Custom badges (comma separated)</label>
<input id="p_badges_custom" class="input" placeholder="Limited, Chef's Choice">

<!-- Option builder -->
<div style="height:12px"></div>
<div class="builder">
  <div style="display:flex;justify-content:space-between;align-items:center">
    <strong>Options builder</strong>
    <button class="action" onclick="addOptGroup()">Add group</button>
  </div>
  <div id="optBuilder"></div>
</div>

<!-- Variant builder -->
<div style="height:12px"></div>
<div class="builder">
  <div style="display:flex;justify-content:space-between;align-items:center">
    <strong>Variants</strong>
    <button class="action" onclick="addVariant()">Add variant</button>
  </div>
  <div id="varBuilder"></div>
  <div class="small">Price delta will be added to the base price.</div>
</div>

<!-- Modifier builder -->
<div style="height:12px"></div>
<div class="builder">
  <div style="display:flex;justify-content:space-between;align-items:center">
    <strong>Modifiers</strong>
    <button class="action" onclick="addModifier()">Add modifier</button>
  </div>
  <div id="modBuilder"></div>
</div>

<div style="height:12px"></div>
<div class="card" style="padding:10px">
  <strong>Weight and split</strong>
  <div style="height:8px"></div>
  <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap">
    <label class="small"><label class="switch"><input id="p_weight" type="checkbox"><span class="slider"></span></label> <span style="margin-left:6px">Enable weight</span></label>
    <label class="small">Min g <input id="p_wmin" class="input" type="number" min="0" step="1" style="width:100px" value="0"></label>
    <label class="small">Max g <input id="p_wmax" class="input" type="number" min="0" step="1" style="width:100px" value="1000"></label>
    <label class="small">Step g <input id="p_wstep" class="input" type="number" min="1" step="1" style="width:100px" value="10"></label>
  </div>
  <div style="height:8px"></div>
  <div style="display:flex;gap:12px;align-items:center;flex-wrap:wrap">
    <label class="small"><label class="switch"><input id="p_split" type="checkbox"><span class="slider"></span></label> <span style="margin-left:6px">Enable split</span></label>
    <label class="small">Max parts <input id="p_splitmax" class="input" type="number" min="1" max="8" step="1" style="width:100px" value="4"></label>
  </div>
</div>

<div style="height:8px"></div>
<label class="small">Image</label>
<div class="dz" id="dzProductImg">Drop image here or click</div>
<div class="small" id="p_img_preview"></div>

<div style="height:10px"></div>
<label class="small"><label class="switch"><input id="p_visible" type="checkbox" checked><span class="slider"></span></label> <span style="margin-left:6px">Visible</span></label>

<div style="height:12px"></div>
<div style="display:flex;gap:8px;justify-content:flex-end">
  <button class="btn" onclick="closeModal('modalProduct')">Cancel</button>
  <button class="btn btn-primary" onclick="saveProduct()">Save</button>
</div>
  </div>
  </div>
  
</div>
<div class="modal" id="modalCategory">
  <div class="modal-card">
    <h3>Edit category</h3>
    <input type="hidden" id="c_id">
    <div class="row">
      <div class="col">
        <label class="small">Name</label>
        <input id="c_name" class="input" placeholder="Name">
      </div>
      <div class="col">
        <label class="small">Slug</label>
        <input id="c_slug" class="input" placeholder="auto by name">
      </div>
      <div class="col">
        <label class="small">Sort</label>
        <input id="c_sort" type="number" min="0" step="1" class="input" value="0">
      </div>
    </div>
    <div style="height:12px"></div>
    <div style="display:flex;gap:8px;justify-content:flex-end">
      <button class="btn" onclick="closeModal('modalCategory')">Cancel</button>
      <button class="btn btn-primary" onclick="saveCategory()">Save</button>
    </div>
  </div>
</div>
<div class="modal" id="modalPage">
  <div class="modal-card">
    <h3>Edit page</h3>
    <input type="hidden" id="pg_id">
    <label class="small">Title</label>
    <input id="pg_title" class="input" placeholder="Title">
    <div style="height:8px"></div>
    <label class="small">Slug</label>
    <input id="pg_slug" class="input" placeholder="auto by title">
    <div style="height:8px"></div>
    <label class="small">Content (HTML allowed)</label>
    <textarea id="pg_content" rows="10" class="input" placeholder="<h2>About</h2>..."></textarea>
    <div style="height:12px"></div>
    <div style="display:flex;gap:8px;justify-content:flex-end">
      <button class="btn" onclick="closeModal('modalPage')">Cancel</button>
      <button class="btn btn-primary" onclick="savePage()">Save</button>
    </div>
  </div>
</div>
<div class="modal" id="modalArticle">
  <div class="modal-card">
    <h3>Edit article</h3>
    <input type="hidden" id="a_id">
    <div class="row">
      <div class="col">
        <label class="small">Title</label>
        <input id="a_title" class="input" placeholder="Title">
      </div>
      <div class="col">
        <label class="small">Slug</label>
        <input id="a_slug" class="input" placeholder="auto by title">
      </div>
      <div class="col">
        <label class="small">Status</label>
        <select id="a_status" class="input">
          <option value="published">published</option>
          <option value="draft">draft</option>
        </select>
      </div>
    </div>
    <div class="row" style="margin-top:8px">
      <div class="col">
        <label class="small">Tags (comma separated)</label>
        <input id="a_tags" class="input" placeholder="news, update">
      </div>
      <div class="col">
        <label class="small"><label class="switch"><input id="a_visible" type="checkbox" checked><span class="slider"></span></label> <span style="margin-left:6px">Visible</span></label>
      </div>
    </div>
    <div style="height:8px"></div>
    <label class="small">Excerpt (optional)</label>
    <textarea id="a_excerpt" class="input" rows="3" placeholder="Short preview"></textarea>
    <div style="height:8px"></div>
    <label class="small">Content (HTML allowed)</label>
    <textarea id="a_content" class="input" rows="10" placeholder="<h2>Headline</h2>..."></textarea>
    <div style="height:8px"></div>
    <label class="small">Cover image</label>
    <div class="dz" id="dzArticleImg">Drop image here or click</div>
    <div class="small" id="a_img_preview"></div>
    <div style="height:12px"></div>
    <div style="display:flex;gap:8px;justify-content:flex-end">
      <button class="btn" onclick="closeModal('modalArticle')">Cancel</button>
      <button class="btn btn-primary" onclick="saveArticle()">Save</button>
    </div>
  </div>
</div>
<?php endif; ?>
<?php elseif ($route === 'qr'): ?>
  <?php $order = null; $oid = (string)($param_order ?? ''); foreach ($orders as $o) if (($o['id'] ?? '') === $oid) { $order = $o; break; } ?>
  <div class="hero">
    <h2>Payment</h2>
    <?php if (!$order): ?>
      <div class="notice">Order not found.</div>
    <?php else: ?>
      <div class="row">
        <div class="col" style="flex:1 1 300px">
          <div class="card">
            <h3>Scan the QR to pay</h3>
            <div style="text-align:center">
              <?php if (!empty($settings['qr_image'])): ?>
                <img src="<?= htmlspecialchars((string)$settings['qr_image']) ?>" alt="QR" style="max-width:100%;height:auto;border-radius:12px;box-shadow:var(--shadow)">
              <?php else: ?>
                <div class="dz">Upload QR in Admin → Settings</div>
              <?php endif; ?>
            </div>
            <div class="small">Order: <?= htmlspecialchars($order['id']) ?> • Total: $<?= number_format((float)($order['total'] ?? $order['subtotal'] ?? 0),2,'.','') ?></div>
            <div class="small">
              <?php if (!empty($order['discount'])): ?>
                Discount: -$<?= number_format((float)$order['discount'],2,'.','') ?> <?= $order['promo_code'] ? '('.htmlspecialchars((string)$order['promo_code']).')':'' ?><br>
              <?php endif; ?>
              <?php if (!empty($order['delivery_fee'])): ?>
                Delivery: $<?= number_format((float)$order['delivery_fee'],2,'.','') ?><br>
              <?php endif; ?>
            </div>
            <div style="margin-top:12px;padding:12px;background:#f8fafc;border-radius:8px">
              <div class="small"><strong>Payment by Zelle:</strong></div>
              <div class="small"><a href="mailto:<?= htmlspecialchars($settings['payment_links']['zelle_email']) ?>" style="color:#2563eb"><?= htmlspecialchars($settings['payment_links']['zelle_email']) ?></a></div>
              <div style="height:8px"></div>
              <div class="small"><strong>Payment by Venmo:</strong></div>
              <div class="small"><a href="<?= htmlspecialchars($settings['payment_links']['venmo_url']) ?>" target="_blank" style="color:#2563eb"><?= htmlspecialchars($settings['payment_links']['venmo_url']) ?></a></div>
            </div>
          </div>
        </div>
        <div class="col" style="flex:1 1 300px">
          <div class="card">
            <h3>Submit payment details</h3>
            <input type="hidden" id="pay_order_id" value="<?= htmlspecialchars((string)$order['id']) ?>">
            <label class="small">Your name</label>
            <input id="pay_name" class="input" placeholder="Name">
            <div style="height:8px"></div>
            <label class="small">Phone</label>
            <input id="pay_phone" class="input" placeholder="+1 ...">
            <div style="height:8px"></div>
            <label class="small">Car number</label>
            <input id="pay_car" class="input" placeholder="ABC-123">
            <div style="height:8px"></div>
            <label class="small">Amount</label>
            <input id="pay_amount" type="number" step="0.01" class="input" value="<?= htmlspecialchars((string)($order['total'] ?? $order['subtotal'] ?? 0)) ?>">
            <div style="height:8px"></div>
            <label class="small">Receipt number</label>
            <input id="pay_receipt" class="input" placeholder="Receipt #">
            <div style="height:8px"></div>
            <div>
              <button class="btn btn-primary" onclick="pickReceipt()">Upload a screenshot of your receipt</button>
              <div id="receiptStatus" class="small" style="margin-top:6px"></div>
            </div>
            <div style="height:12px"></div>
            <button class="btn btn-primary" onclick="submitPayment()">Send</button>
            <div id="payMsg" class="small" style="margin-top:8px"></div>
          </div>
        </div>
      </div>
    <?php endif; ?>
  </div>
<?php elseif ($route === 'product'): ?>
  <?php
    $pid = $_GET['id'] ?? '';
    $prod = null;
    foreach ($products as $p) { if (($p['id'] ?? '') === $pid && !empty($p['visible'])) { $prod = $p; break; } }
  ?>
  <?php if (!$prod): ?>
  <div class="hero"><div class="notice">Product not found.</div></div>
  <?php else:
    $desc = trim((string)($prod['description'] ?? ''));
    if ($desc === '') {
      $t = htmlspecialchars((string)$prod['title']);
      $desc = "Our {$t} is freshly prepared with selected ingredients. Enjoy a balanced taste, great texture and a neon vibe — perfect for any time of the day.";
    } else {
      $desc = htmlspecialchars($desc);
    }
    $badgeChips = [];
    if (!empty($prod['label'])) $badgeChips[] = ['text'=>$prod['label'],'cls'=>'badge-new'];
    $map = ['new'=>'badge-new','hot'=>'badge-hot','spicy'=>'badge-spicy','vegan'=>'badge-vegan','bestseller'=>'badge-best'];
    foreach (($prod['badges'] ?? []) as $b) { $cls = $map[$b] ?? 'badge-new'; $badgeChips[] = ['text'=>ucfirst($b),'cls'=>$cls]; }
    foreach (($prod['custom_badges'] ?? []) as $b) { $badgeChips[] = ['text'=>$b,'cls'=>'badge-deal']; }
  ?>
  <div class="hero">
    <div class="detail">
      <div>
        <div class="card" style="padding:0">
          <div class="img" style="height:420px;background-image:url('<?= htmlspecialchars((string)$prod['image'] ?: '') ?>')">
            <?php if (empty($prod['image'])): ?>
              <div class="ph">at a photo shoot</div>
            <?php endif; ?>
          </div>
        </div>
        <div style="height:10px"></div>
        <div class="card">
          <div style="display:flex;align-items:center;justify-content:space-between;gap:8px">
            <div>
              <h2 style="margin:0 0 8px 0"><?= htmlspecialchars((string)$prod['title']) ?></h2>
              <div class="ribbon" style="position:static; padding:6px 0 0 0">
                <?php foreach ($badgeChips as $bc): ?>
                  <span class="badge <?= htmlspecialchars($bc['cls']) ?>"><?= htmlspecialchars($bc['text']) ?></span>
                <?php endforeach; ?>
              </div>
            </div>
            <div class="fav" data-id="<?= htmlspecialchars((string)$prod['id']) ?>" onclick="toggleFav('<?= htmlspecialchars((string)$prod['id']) ?>', this)">❤</div>
          </div>
          <div class="small" style="font-size:14px;line-height:1.6"><?= $desc ?></div>
          <?php if (!empty($prod['tags'])): ?>
            <div class="small" style="margin-top:6px">#<?= htmlspecialchars(implode(' #', array_map('strval', $prod['tags']))) ?></div>
          <?php endif; ?>
          <div style="height:10px"></div>
          <div style="display:flex;align-items:center;justify-content:space-between">
            <div class="price" style="font-size:20px">$<?= number_format((float)$prod['price'],2,'.','') ?></div>
            <button class="btn btn-primary" onclick='handleAddToCart(<?= json_encode(["id"=>$prod['id'],"title"=>$prod['title'],"price"=>(float)$prod['price'],"image"=>$prod['image'],"options"=>$prod['options'],"variants"=>$prod['variants'],"modifiers"=>$prod['modifiers'],"enable_weight"=>$prod['enable_weight'],"enable_split"=>$prod['enable_split'],"weight_min"=>$prod["weight_min"],"weight_max"=>$prod["weight_max"],"weight_step"=>$prod["weight_step"],"split_max_parts"=>$prod["split_max_parts"]], JSON_UNESCAPED_UNICODE | JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT) ?>)'>Add to cart</button>
          </div>
        </div>
      </div>
      <div>
        <div class="card">
          <h3>Customize</h3>
          <div class="small">Choose variants, options and modifiers in the popup.</div>
          <div style="height:8px"></div>
          <button class="btn" onclick='handleAddToCart(<?= json_encode(["id"=>$prod['id'],"title"=>$prod['title'],"price"=>(float)$prod['price'],"image"=>$prod['image'],"options"=>$prod['options'],"variants"=>$prod['variants'],"modifiers"=>$prod['modifiers'],"enable_weight"=>$prod['enable_weight'],"enable_split"=>$prod['enable_split'],"weight_min"=>$prod["weight_min"],"weight_max"=>$prod["weight_max"],"weight_step"=>$prod["weight_step"],"split_max_parts"=>$prod["split_max_parts"]], JSON_UNESCAPED_UNICODE | JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT) ?>)'>Configure & Add</button>
          <div class="small" style="margin-top:8px">Price changes dynamically based on your choices.</div>
        </div>
      </div>
    </div>
  </div>
  <?php endif; ?>
<?php elseif ($route === 'account'): ?>
  <div class="hero">
    <h2>Account</h2>
    <?php if (!$isCustomer): ?>
      <div class="row">
        <div class="col">
          <div class="card">
            <h3 id="acc_title">Register</h3>
            <label class="small">Name</label>
            <input id="reg_name" class="input" placeholder="Your name">
            <div style="height:6px"></div>
            <label class="small">Phone</label>
            <input id="reg_phone" class="input" placeholder="+1 ...">
            <div style="height:6px"></div>
            <label class="small">Email (optional)</label>
            <input id="reg_email" class="input" placeholder="you@example.com">
            <div style="height:6px"></div>
            <label class="small">Password</label>
            <input id="reg_pass" type="password" class="input" placeholder="min 6 chars">
            <div style="height:10px"></div>
            <button class="btn btn-primary" onclick="accRegister()">Register</button>
            <div id="regMsg" class="small" style="margin-top:6px"></div>
            <div class="small" style="margin-top:10px">Already have an account? <a href="#login" onclick="switchAccForm('login')">Login</a></div>
          </div>
        </div>
        <div class="col">
          <div class="card">
            <h3>Login</h3>
            <label class="small">Phone or Email</label>
            <input id="log_login" class="input" placeholder="+1 ... or you@example.com">
            <div style="height:6px"></div>
            <label class="small">Password</label>
            <input id="log_pass" type="password" class="input">
            <div style="height:10px"></div>
            <button class="btn btn-primary" onclick="accLogin()">Login</button>
            <div id="logMsg" class="small" style="margin-top:6px"></div>
            <div class="small" style="margin-top:10px"><a href="#reset" onclick="switchAccForm('reset')">Forgot password?</a></div>
          </div>
        </div>
        <div class="col" id="resetBox" style="display:none">
          <div class="card">
            <h3>Reset password</h3>
            <label class="small">Phone or Email</label>
            <input id="rst_login" class="input" placeholder="+1 ... or you@example.com">
            <div style="height:6px"></div>
            <button class="btn" onclick="reqReset()">Get reset token</button>
            <div id="rstMsg" class="small" style="margin-top:6px"></div>
            <div style="height:10px"></div>
            <label class="small">Token</label>
            <input id="rst_token" class="input" placeholder="Paste the token">
            <div style="height:6px"></div>
            <label class="small">New password</label>
            <input id="rst_pass" type="password" class="input">
            <div style="height:10px"></div>
            <button class="btn btn-primary" onclick="doReset()">Change password</button>
            <div id="rstMsg2" class="small" style="margin-top:6px"></div>
          </div>
        </div>
      </div>
      <script>
        function switchAccForm(t){
          if (t==='login') location.hash='#login';
          if (t==='reset') { qs('#resetBox').style.display='block'; location.hash='#reset'; }
          if (t==='register') location.hash='#register';
        }
        document.addEventListener('DOMContentLoaded', ()=>{
          if (location.hash==='#login') qs('#acc_title').textContent='Register';
          if (location.hash==='#reset') qs('#resetBox').style.display='block';
        });
      </script>
    <?php else: ?>
      <div class="row">
        <div class="col">
          <div class="card" id="discCard">
            <h3>Discount card</h3>
            <div class="small">Level: <b id="dc_level">-</b></div>
            <div class="small">Personal discount: <b id="dc_percent">0%</b></div>
            <div class="small">Orders: <b id="dc_orders">0</b></div>
            <div class="small">Total spent: <b>$<span id="dc_spent">0.00</span></b></div>
            <div class="small">Last discount: <b>$<span id="dc_last">0.00</span></b></div>
            <div style="height:10px"></div>
            <button class="btn" onclick="accLogout()">Logout</button>
          </div>
        </div>
        <div class="col">
          <div class="card">
            <h3>My orders</h3>
            <div id="accOrders"></div>
          </div>
        </div>
        <div class="col">
          <div class="card">
            <h3>Support chat</h3>
            <div id="chatBox" style="height:260px; overflow:auto; border:1px solid #eee; border-radius:8px; padding:8px; background:#fafafa"></div>
            <div style="display:flex;gap:8px;margin-top:8px">
              <input id="chatInput" class="input" placeholder="Type your message">
              <button class="btn btn-primary" onclick="sendChat()">Send</button>
            </div>
            <div id="chatMsg" class="small" style="margin-top:6px"></div>
          </div>
        </div>
      </div>
      <script>
        async function loadMe(){
          const r = await fetch('?action=customer_me').then(r=>r.json()).catch(()=>({ok:false}));
          if (r.ok){
            qs('#dc_level').textContent = r.loyalty.level;
            qs('#dc_percent').textContent = (r.loyalty.percent||0) + '%';
            qs('#dc_orders').textContent = r.stats.orders_count||0;
            qs('#dc_spent').textContent = (Number(r.stats.total_spent)||0).toFixed(2);
            qs('#dc_last').textContent = (Number(r.stats.last_discount)||0).toFixed(2);
          }
        }
        async function loadOrders(){
          const r = await fetch('?action=customer_orders').then(r=>r.json()).catch(()=>({ok:false}));
          const box = qs('#accOrders'); box.innerHTML='';
          if (!r.ok || !(r.orders||[]).length){ box.innerHTML = '<div class="small">No orders yet.</div>'; return; }
          r.orders.forEach(o=>{
            const el = document.createElement('div'); el.className='summary';
            const itemsTxt = (o.items||[]).map(i=> (i.title||'') + '×' + (i.qty||1)).join(', ');
            el.innerHTML = `<div><strong>${o.id}</strong> <span class="small">(${(o.created_at||'').replace('T',' ').slice(0,19)})</span></div>
              <div class="small">Status: ${o.status}</div>
              <div class="small">Items: ${itemsTxt}</div>
              <div class="small">Subtotal: $${(o.subtotal||o.total||0).toFixed(2)}, Discount: -$${(o.discount||0).toFixed(2)} ${o.promo_code? '('+o.promo_code+')':''}, Delivery: $${(o.delivery_fee||0).toFixed(2)}</div>
              <div><strong>Total: $${(o.total||0).toFixed(2)}</strong> <a class="action" href="?route=qr&order=${o.id}" target="_blank">Pay/Receipt</a></div>`;
            box.appendChild(el);
          });
        }
        async function loadChat(){
          const r = await fetch('?action=customer_chat_list').then(r=>r.json()).catch(()=>({ok:false}));
          const b = qs('#chatBox'); b.innerHTML='';
          if (!r.ok) { b.innerHTML='<div class="small">Load failed</div>'; return; }
          r.messages.forEach(m=>{
            const div = document.createElement('div');
            const who = m.sender==='customer' ? 'You' : 'Support';
            div.innerHTML = `<div class="small"><b>${who}:</b> ${m.text}</div>`;
            b.appendChild(div);
          });
          b.scrollTop = b.scrollHeight;
        }
        async function sendChat(){
          const t = qs('#chatInput').value.trim(); const msg = qs('#chatMsg');
          if (!t){ notify(msg,'Enter a message', false); return; }
          const r = await fetch('?action=customer_chat_send',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text:t})}).then(r=>r.json()).catch(()=>({ok:false}));
          if (r.ok){ qs('#chatInput').value=''; notify(msg,'Sent', true); loadChat(); } else notify(msg, r.message||'Error', false);
        }
        async function accLogout(){
          await fetch('?action=customer_logout', {method:'POST'}).then(r=>r.json()).catch(()=>({}));
          location.reload();
        }
        loadMe(); loadOrders(); loadChat(); setInterval(loadChat, 10000);
      </script>
    <?php endif; ?>
  </div>
<?php elseif ($route === 'donate'): ?>
  <div class="hero">
    <h2><?= htmlspecialchars((string)($settings['donation']['title'] ?? 'Donate')) ?></h2>
    <div class="card">
      <div><?= (string)($settings['donation']['content'] ?? '') ?></div>
    </div>
  </div>
<?php elseif ($route === 'articles'): ?>
  <?php
    $arts = array_filter($articles, function($a){
        if (empty($a['visible'])) return false;
        if (($a['status'] ?? 'published') === 'draft') return false;
        return true;
    });
    usort($arts, fn($a,$b)=>strcmp($b['updated_at']??$b['created_at']??'', $a['updated_at']??$a['created_at']??''));
  ?>
  <div class="hero">
    <h2>Association news</h2>
    <div class="grid" id="articlesGrid">
      <?php foreach ($arts as $a): ?>
        <?php
          $plain = strip_tags((string)($a['content'] ?? ''));
          $excerpt = (string)($a['excerpt'] ?? '');
          if ($excerpt === '') {
              if (function_exists('mb_substr') && function_exists('mb_strlen')) {
                  $excerpt = mb_substr($plain, 0, 120);
                  if (mb_strlen($plain) > 120) $excerpt .= '…';
              } else {
                  $excerpt = substr($plain, 0, 120);
                  if (strlen($plain) > 120) $excerpt .= '…';
              }
          }
          $dt = htmlspecialchars(date('Y-m-d', strtotime((string)($a['updated_at'] ?? $a['created_at'] ?? date('c')))));
        ?>
        <div class="card" onclick="location='?route=article&id=<?= htmlspecialchars((string)$a['id']) ?>'">
          <div class="img" style="background-image:url('<?= htmlspecialchars((string)($a['image'] ?? '')) ?>')">
            <?php if (empty($a['image'])): ?><div class="ph">no cover</div><?php endif; ?>
          </div>
          <h4><?= htmlspecialchars((string)$a['title']) ?></h4>
          <div class="small"><?= htmlspecialchars($excerpt) ?></div>
          <div class="small"><?= $dt ?></div>
          <div style="display:flex;gap:8px;align-items:center;justify-content:space-between">
            <div class="small">#<?= htmlspecialchars(implode(' #', array_map('strval', $a['tags'] ?? []))) ?></div>
            <a class="action" href="?route=article&id=<?= htmlspecialchars((string)$a['id']) ?>">Read</a>
          </div>
        </div>
      <?php endforeach; ?>
      <?php if (!count($arts)): ?>
        <div class="card"><div class="small">No articles yet.</div></div>
      <?php endif; ?>
    </div>
  </div>
<?php elseif ($route === 'article'): ?>
  <?php
    $aid = $_GET['id'] ?? '';
    $art = null;
    foreach ($articles as $a) {
        if (($a['id'] ?? '') === $aid && !empty($a['visible']) && ($a['status'] ?? 'published') === 'published') { $art = $a; break; }
    }
  ?>
  <?php if (!$art): ?>
  <div class="hero"><div class="notice">Article not found.</div></div>
  <?php else: ?>
  <div class="hero">
  <div class="detail">
    <div>
      <div class="card" style="padding:0">
        <div class="img" style="height:380px;background-image:url('<?= htmlspecialchars((string)$art['image'] ?: '') ?>')">
          <?php if (empty($art['image'])): ?><div class="ph">no cover</div><?php endif; ?>
        </div>
      </div>
      <div style="height:10px"></div>
      <div class="card">
        <h2 style="margin:0 0 8px 0"><?= htmlspecialchars((string)$art['title']) ?></h2>
        <div class="small" style="margin-bottom:8px;color:#64748b">
          <?= htmlspecialchars(date('Y-m-d H:i', strtotime((string)($art['updated_at'] ?? $art['created_at'] ?? date('c'))))) ?>
          <?php if (!empty($art['tags'])): ?> • #<?= htmlspecialchars(implode(' #', array_map('strval', $art['tags']))) ?><?php endif; ?>
        </div>
        <div><?= (string)$art['content'] ?></div>
        <div style="height:12px"></div>
        <div style="display:flex;gap:8px;flex-wrap:wrap">
          <button class="action" onclick="reactArticle('<?= htmlspecialchars((string)$art['id']) ?>','like')">👍 Like <span id="r_like"><?= (int)($art['reactions']['like'] ?? 0) ?></span></button>
          <button class="action" onclick="reactArticle('<?= htmlspecialchars((string)$art['id']) ?>','love')">❤️ Love <span id="r_love"><?= (int)($art['reactions']['love'] ?? 0) ?></span></button>
          <button class="action" onclick="reactArticle('<?= htmlspecialchars((string)$art['id']) ?>','clap')">👏 Clap <span id="r_clap"><?= (int)($art['reactions']['clap'] ?? 0) ?></span></button>
        </div>
      </div>
    </div>
    <div>
      <div class="card">
        <h3>Comments</h3>
        <div id="commentsBox">
          <?php foreach ((array)($art['comments'] ?? []) as $cm): ?>
            <div class="summary">
              <div><strong><?= htmlspecialchars((string)($cm['name'] ?? '')) ?></strong> <span class="small"><?= !empty($cm['time']) ? htmlspecialchars(date('Y-m-d H:i', strtotime((string)$cm['time']))) : '' ?></span></div>
              <div class="small"><?= (string)($cm['text'] ?? '') ?></div>
            </div>
          <?php endforeach; ?>
          <?php if (empty($art['comments'])): ?>
            <div class="small">No comments yet.</div>
          <?php endif; ?>
        </div>
        <div style="height:8px"></div>
        <div class="row">
          <div class="col"><input id="cm_name" class="input" placeholder="Your name"></div>
          <div class="col"><input id="cm_email_fake" class="input" placeholder="Email (optional)" style="display:none"></div>
        </div>
        <div style="height:6px"></div>
        <textarea id="cm_text" class="input" rows="3" placeholder="Your comment..."></textarea>
        <div style="height:8px"></div>
        <button class="btn btn-primary" onclick="postComment('<?= htmlspecialchars((string)$art['id']) ?>')">Send</button>
        <div id="cm_msg" class="small" style="margin-top:6px"></div>
      </div>
    </div>
  </div>
</div>
<?php endif; ?>
<?php elseif ($pageBySlug): ?>
  <div class="hero">
    <h2><?= htmlspecialchars((string)$pageBySlug['title']) ?></h2>
    <div class="card">
      <div><?= (string)$pageBySlug['content'] ?></div>
    </div>
  </div>
<?php elseif ($route === 'cart'): ?>
  <div class="cart-page">
    <h2>Cart</h2>
    <div class="row">
      <div class="col" style="flex:1 1 300px">
        <div class="items" id="cartPageItems"></div>
        <div style="display:flex;justify-content:space-between;align-items:center;margin-top:10px">
          <div><strong>Total: $<span id="cartPageTotal">0.00</span></strong></div>
          <a class="btn btn-primary" href="?route=home">Continue shopping</a>
        </div>
      </div>
      <div class="col" style="flex:1 1 300px">
        <div class="card">
          <h3>Checkout</h3>
          <div class="row">
            <div class="col"><label class="small">Your name</label><input id="co_name" class="input" placeholder="Name" required></div>
            <div class="col"><label class="small">Phone</label><input id="co_phone" class="input" placeholder="+1 ..." required></div>
          </div>
          <div class="row" style="margin-top:8px">
            <div class="col"><label class="small">Truckstop name</label><input id="co_truckstop" class="input" placeholder="Truckstop" required></div>
            <div class="col"><label class="small">Truck brand</label><input id="co_truck_brand" class="input" placeholder="Brand" required></div>
          </div>
          <div class="row" style="margin-top:8px">
            <div class="col"><label class="small">Cabin color</label><input id="co_cabin_color" class="input" placeholder="Color" required></div>
            <div class="col"><label class="small">License plate</label><input id="co_license_plate" class="input" placeholder="ABC-123" required></div>
          </div>
          <div class="row" style="margin-top:8px">
            <div class="col"><label class="small">Address</label><input id="co_address" class="input" placeholder="Street, house"></div>
            <div class="col"><label class="small">Promo code</label><div style="display:flex;gap:6px"><input id="co_promo" class="input" placeholder="PROMO"><button class="action" onclick="applyPromo()">Apply</button></div></div>
          </div>
          <div style="margin-top:8px"><label class="small">Comment</label><textarea id="co_comment" class="input" rows="3" placeholder="Anything else?"></textarea></div>
          <div style="margin-top:10px" class="summary">
            <div class="small">Subtotal: $<span id="sum_subtotal">0.00</span></div>
            <div class="small">Discount: -$<span id="sum_discount">0.00</span> <span id="sum_promo"></span></div>
            <div class="small">Delivery: $<span id="sum_delivery">0.00</span></div>
            <div><strong>Total: $<span id="sum_total">0.00</span></strong></div>
          </div>
          <div style="display:flex;gap:8px;justify-content:flex-end;margin-top:12px">
            <button class="btn btn-primary" onclick="placeOrder()">Pay</button>
          </div>
          <div id="coMsg" class="small" style="margin-top:8px"></div>
        </div>
      </div>
    </div>
  </div>
<?php else: /* HOME */ ?>
  <div class="hero">
    <div class="slider">
      <div class="slider-track" id="sliderTrack">
        <?php if (!empty($settings['slider_items'])): ?>
          <?php foreach ($settings['slider_items'] as $s): ?>
            <div class="slide" style="background-image:url('<?= htmlspecialchars((string)($s['image'] ?? '')) ?>')">
              <?php if (!empty($s['title']) || !empty($s['subtitle'])): ?>
                <div class="overlay <?= 'align-'.htmlspecialchars((string)($s['align'] ?? 'center')) ?>">
                  <?php if (!empty($s['title'])): ?>
                    <h2<?= isset($s['title_size']) && $s['title_size'] ? ' style="font-size:'.(int)$s['title_size'].'px"' : '' ?>><?= htmlspecialchars((string)$s['title']) ?></h2>
                  <?php endif; ?>
                  <?php if (!empty($s['subtitle'])): ?>
                    <p<?= isset($s['subtitle_size']) && $s['subtitle_size'] ? ' style="font-size:'.(int)$s['subtitle_size'].'px"' : '' ?>><?= htmlspecialchars((string)$s['subtitle']) ?></p>
                  <?php endif; ?>
                </div>
              <?php endif; ?>
            </div>
          <?php endforeach; ?>
        <?php else: ?>
          <div class="slide" style="background-image:linear-gradient(120deg,#fef3c7,#e0f2fe);display:flex;align-items:flex-end;justify-content:center">
            <div class="overlay align-center">
              <h2>Welcome to <?= $siteName ?></h2>
              <p>Delicious taste, neon vibe</p>
            </div>
          </div>
        <?php endif; ?>
      </div>
      <div class="slider-dots" id="sliderDots"></div>
    </div>
    <div class="topbar">
      <div class="cat-tabs" id="catTabs">
        <span class="tab active" data-cat="" onclick="filterCat('')">All</span>
        <span class="tab" data-cat="__favorites__" onclick="filterCat('__favorites__')">Favorites</span>
        <?php
          $catsSorted = $categories;
          usort($catsSorted, fn($a,$b)=> ($a['sort']<=>$b['sort']) ?: strcmp((string)$a['name'], (string)$b['name']));
          foreach ($catsSorted as $c): ?>
          <span class="tab" data-cat="<?= htmlspecialchars((string)$c['slug']) ?>" onclick="filterCat('<?= htmlspecialchars((string)$c['slug']) ?>')"><?= htmlspecialchars((string)$c['name']) ?></span>
        <?php endforeach; ?>
      </div>
      <div style="display:flex;gap:8px;align-items:center;flex-wrap:wrap">
        <input id="search" class="input" placeholder="Search products... (title, description, #tag)" oninput="renderProducts()">
        <?php if (!empty($don['enabled'])): ?>
          <a class="btn btn-primary" href="?route=donate"><?= htmlspecialchars((string)($don['button_label'] ?? 'Donate')) ?></a>
        <?php endif; ?>
        <a class="btn" href="?route=articles">Association news</a>
      </div>
    </div>

    <div class="grid" id="productGrid">
      <?php
        $prodsSorted = $products;
        usort($prodsSorted, fn($a,$b)=> ($a['sort']<=>$b['sort']) ?: strcmp((string)$a['title'], (string)$b['title']));
        foreach ($prodsSorted as $p): if (empty($p['visible'])) continue;
          $tagsAttr = implode(',', array_map(fn($t)=>strtolower((string)$t), $p['tags'] ?? []));
          $badgeChips = [];
          if (!empty($p['label'])) $badgeChips[] = ['text'=>$p['label'],'cls'=>'badge-new'];
          $map = ['new'=>'badge-new','hot'=>'badge-hot','spicy'=>'badge-spicy','vegan'=>'badge-vegan','bestseller'=>'badge-best'];
          foreach (($p['badges'] ?? []) as $bb) { $cls = $map[$bb] ?? 'badge-new'; $badgeChips[] = ['text'=>ucfirst($bb),'cls'=>$cls]; }
          foreach (($p['custom_badges'] ?? []) as $bb) { $badgeChips[] = ['text'=>$bb,'cls'=>'badge-deal']; }
      ?>
        <div class="card" data-cat="<?= htmlspecialchars((string)$p['category']) ?>" data-title="<?= htmlspecialchars((string)(function_exists('mb_strtolower')?mb_strtolower((string)$p['title']):strtolower((string)$p['title']))) ?>" data-desc="<?= htmlspecialchars((string)(function_exists('mb_strtolower')?mb_strtolower((string)$p['description']):strtolower((string)$p['description']))) ?>" data-tags="<?= htmlspecialchars($tagsAttr) ?>" data-id="<?= htmlspecialchars((string)$p['id']) ?>" onclick="openProduct('<?= htmlspecialchars((string)$p['id']) ?>')">
          <div class="ribbon">
            <?php foreach ($badgeChips as $bc): ?>
              <span class="badge <?= htmlspecialchars($bc['cls']) ?>"><?= htmlspecialchars($bc['text']) ?></span>
            <?php endforeach; ?>
          </div>
          <div class="fav" data-id="<?= htmlspecialchars((string)$p['id']) ?>" onclick="event.stopPropagation(); toggleFav('<?= htmlspecialchars((string)$p['id']) ?>', this)" title="Add to favorites">❤</div>
          <div class="img" style="background-image:url('<?= htmlspecialchars((string)$p['image'] ?: '') ?>')">
            <?php if (empty($p['image'])): ?>
              <div class="ph">at a photo shoot</div>
            <?php endif; ?>
          </div>
          <h4><?= htmlspecialchars((string)$p['title']) ?></h4>
          <div class="small"><?= htmlspecialchars((string)$p['description']) ?></div>
          <?php if (!empty($p['tags'])): ?>
            <div class="small">#<?= htmlspecialchars(implode(' #', array_map('strval', $p['tags']))) ?></div>
          <?php endif; ?>
          <div style="display:flex;align-items:center;justify-content:space-between">
            <div class="price">$<?= number_format((float)$p['price'],2,'.','') ?></div>
            <button class="btn btn-primary" onclick='event.stopPropagation(); handleAddToCart(<?= json_encode(["id"=>$p['id'],"title"=>$p['title'],"price"=>(float)$p['price'],"image"=>$p['image'],"options"=>$p['options'],"variants"=>$p['variants'],"modifiers"=>$p['modifiers'],"enable_weight"=>$p['enable_weight'],"enable_split"=>$p['enable_split'],"weight_min"=>$p["weight_min"],"weight_max"=>$p["weight_max"],"weight_step"=>$p["weight_step"],"split_max_parts"=>$p["split_max_parts"]], JSON_UNESCAPED_UNICODE | JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT) ?>)'>Add</button>
          </div>
        </div>
      <?php endforeach; ?>
    </div>
  </div>
<?php endif; ?>
</div>

<!-- Cart panel (desktop only) -->
<div class="cart-panel" id="cartPanel" style="display:none">
  <div style="display:flex;justify-content:space-between;align-items:center">
    <strong>Your cart</strong>
    <button class="action" onclick="toggleCart()">Close</button>
  </div>
  <div id="cartItems"></div>
  <div style="display:flex;justify-content:space-between;align-items:center;margin-top:10px">
    <div><strong>Total: $<span id="cartTotal">0.00</span></strong></div>
    <button class="btn btn-primary" onclick="openCheckout()">Checkout</button>
  </div>
</div>
<!-- Checkout modal (desktop) -->
<div class="modal" id="checkoutModal">
  <div class="modal-card">
    <h3>Checkout</h3>
    <div class="row">
      <div class="col"><label class="small">Your name</label><input id="co_name" class="input" placeholder="Name" required></div>
      <div class="col"><label class="small">Phone</label><input id="co_phone" class="input" placeholder="+1 ..." required></div>
    </div>
    <div class="row" style="margin-top:8px">
      <div class="col"><label class="small">Truckstop name</label><input id="co_truckstop" class="input" placeholder="Truckstop" required></div>
      <div class="col"><label class="small">Truck brand</label><input id="co_truck_brand" class="input" placeholder="Brand" required></div>
    </div>
    <div class="row" style="margin-top:8px">
      <div class="col"><label class="small">Cabin color</label><input id="co_cabin_color" class="input" placeholder="Color" required></div>
      <div class="col"><label class="small">License plate</label><input id="co_license_plate" class="input" placeholder="ABC-123" required></div>
    </div>
    <div class="row" style="margin-top:8px">
      <div class="col"><label class="small">Address</label><input id="co_address" class="input" placeholder="Street, house"></div>
      <div class="col"><label class="small">Promo code</label><div style="display:flex;gap:6px"><input id="co_promo" class="input" placeholder="PROMO"><button class="action" onclick="applyPromo()">Apply</button></div></div>
    </div>
    <div style="margin-top:8px"><label class="small">Comment</label><textarea id="co_comment" class="input" rows="3" placeholder="Anything else?"></textarea></div>
    <div style="margin-top:10px" class="summary">
      <div class="small">Subtotal: $<span id="sum_subtotal">0.00</span></div>
      <div class="small">Discount: -$<span id="sum_discount">0.00</span> <span id="sum_promo"></span></div>
      <div class="small">Delivery: $<span id="sum_delivery">0.00</span></div>
      <div><strong>Total: $<span id="sum_total">0.00</span></strong></div>
    </div>
    <div style="display:flex;gap:8px;justify-content:flex-end;margin-top:12px">
      <button class="btn" onclick="closeModal('checkoutModal')">Cancel</button>
      <button class="btn btn-primary" onclick="placeOrder()">Pay</button>
    </div>
    <div id="coMsg" class="small" style="margin-top:8px"></div>
  </div>
</div>
<!-- Options modal -->
<div class="modal" id="optionsModal">
  <div class="modal-card">
    <h3>Select options</h3>
    <div id="optWrap"></div>
    <div style="display:flex;gap:8px;justify-content:flex-end;margin-top:12px">
      <button class="btn" onclick="closeModal('optionsModal')">Cancel</button>
      <button class="btn btn-primary" onclick="confirmOptions()">Add to cart</button>
    </div>
  </div>
</div>
<!-- Footer -->
<div class="footer">
  <div class="container">
    <div class="cols">
      <?php $cols = [1=>[],2=>[],3=>[]]; foreach ($settings['footer_widgets'] as $w) { $col = (int)($w['column'] ?? 1); if ($col < 1 || $col > 3) $col = 1; $cols[$col][] = $w; } for ($i=1;$i<=3;$i++): ?>
      <div><?php foreach ($cols[$i] as $w): ?><h4><?= htmlspecialchars((string)$w['title']) ?></h4><div><?= (string)$w['content'] ?></div><?php endforeach; ?></div>
      <?php endfor; ?>
    </div>
    <div class="small">© <?= date('Y') ?> <?= $siteName ?>. All rights reserved.</div>
  </div>
</div>
<script>
// ---------- Utilities ----------
function qs(sel, root=document){return root.querySelector(sel)}
function qsa(sel, root=document){return Array.from(root.querySelectorAll(sel))}
function fmt(n){return (Number(n)||0).toFixed(2)}
function notify(el, msg, ok=true){if(!el)return; el.textContent = msg; el.style.color = ok ? 'green' : 'var(--danger)'}
function openModal(id){const el=qs('#'+id); if(el) el.classList.add('show')}
function closeModal(id){const el=qs('#'+id); if(el) el.classList.remove('show')}
function slugify(s){return (s||'').toLowerCase().trim().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'')}

// Mobile menu toggle
let escHandlerMenu = null;
function openMobileMenu(){
  const m = qs('#mobileMenu'), ov = qs('#menuOverlay');
  if (!m || !ov) return;
  m.classList.add('open');
  ov.classList.add('show');
  document.body.style.overflow = 'hidden';
  escHandlerMenu = (e)=>{ if (e.key === 'Escape') closeMobileMenu(); };
  document.addEventListener('keydown', escHandlerMenu);
}
function closeMobileMenu(){
  const m = qs('#mobileMenu'), ov = qs('#menuOverlay');
  if (!m || !ov) return;
  m.classList.remove('open');
  ov.classList.remove('show');
  document.body.style.overflow = '';
  if (escHandlerMenu){ document.removeEventListener('keydown', escHandlerMenu); escHandlerMenu = null; }
}
function toggleMobileMenu(){
  const m = qs('#mobileMenu');
  if (!m) return;
  if (m.classList.contains('open')) closeMobileMenu(); else openMobileMenu();
}

const CSRF = <?= json_encode($_SESSION['csrf_token'] ?? '') ?>;
<?php if ($route==='admin' && is_admin()): ?>
const ADMIN_ORDERS = <?= json_encode($orders, JSON_UNESCAPED_UNICODE) ?>;
<?php else: ?>
const ADMIN_ORDERS = [];
<?php endif; ?>

async function api(url, opts={}){
  opts.headers = opts.headers || {};
  opts.headers['X-CSRF'] = CSRF;
  return fetch(url, opts);
}

// ---------- Slider view ----------
const sliderImagesCount = <?= (int)count($settings['slider_items']) ?>;
let slideIdx = 0;
function renderSliderDots(){
  const dots = qs('#sliderDots'); if (!dots) return;
  dots.innerHTML = ''; if (sliderImagesCount <= 1) return;
  for (let i=0;i<sliderImagesCount;i++){
    const d=document.createElement('div');
    d.className='dot'+(i===0?' active':'');
    d.onclick=()=>goSlide(i);
    dots.appendChild(d);
  }
  setInterval(()=>goSlide((slideIdx+1)%Math.max(sliderImagesCount,1)), 5000);
}
function goSlide(i){
  slideIdx = i; const track=qs('#sliderTrack'); const dots=qsa('.dot', qs('#sliderDots'));
  if (track) track.style.transform = 'translateX(' + (-i*100) + '%)';
  dots.forEach((d,idx)=>d.classList.toggle('active', idx===i));
}
renderSliderDots();

// ---------- Favorites ----------
let favs = JSON.parse(localStorage.getItem('favs')||'[]');
function isFav(id){ return favs.includes(id); }
function renderFavHearts(){
  qsa('.fav').forEach(h=>{
    const id = h.getAttribute('data-id'); if (!id) return;
    h.classList.toggle('active', isFav(id));
  });
}
function toggleFav(id, el){
  const i = favs.indexOf(id); if (i>=0) favs.splice(i,1); else favs.push(id);
  localStorage.setItem('favs', JSON.stringify(favs));
  if (el) el.classList.toggle('active', isFav(id));
  renderProducts();
}

// ---------- Products filter/search ----------
let currentCat = '';
function filterCat(slug){
  currentCat = slug||'';
  qsa('.tab', qs('#catTabs')).forEach(t=>t.classList.toggle('active', t.getAttribute('data-cat')===currentCat));
  renderProducts();
  if (currentCat) { try { history.replaceState(null, '', '?route=home#cat='+encodeURIComponent(currentCat)); } catch(e){} }
}
function renderProducts(){
  const q = (qs('#search')?.value || '').toLowerCase().trim();
  const hasTag = q.startsWith('#') ? q.slice(1) : null;
  qsa('#productGrid .card').forEach(card=>{
    const cat = card.getAttribute('data-cat') || '';
    const id = card.getAttribute('data-id') || '';
    const title = (card.getAttribute('data-title') || '');
    const desc  = (card.getAttribute('data-desc') || '');
    const tags  = (card.getAttribute('data-tags') || '');
    const okCat = !currentCat || (currentCat==='__favorites__' ? favs.includes(id) : cat === currentCat);
    let okText = true;
    if (q) {
      if (hasTag) okText = tags.split(',').includes(hasTag);
      else okText = title.includes(q) || desc.includes(q) || tags.includes(q);
    }
    card.style.display = (okCat && okText) ? '' : 'none';
  });
}
function openProduct(id){ location = '?route=product&id='+encodeURIComponent(id); }
document.addEventListener('DOMContentLoaded', ()=>{
  renderFavHearts();
  if (location.search.includes('route=home') || location.search==='' || location.search==='?') {
    const m = (location.hash||'').match(/#cat=([^&]+)/);
    if (m && m[1]) { filterCat(decodeURIComponent(m[1])); }
  }
});

// ---------- Cart ----------
let cart = JSON.parse(localStorage.getItem('cart') || '[]');
function saveCart(){ localStorage.setItem('cart', JSON.stringify(cart)); updateCartUI(); renderCartPage(); }
function updateCartUI(){
  const cnt = cart.reduce((s,i)=>s + (i.qty||1), 0);
  if (qs('#cartCount')) qs('#cartCount').textContent = cnt;
  if (qs('#cartCountFab')) qs('#cartCountFab').textContent = cnt;
  const wrap = qs('#cartItems'); if (wrap) {
    wrap.innerHTML = '';
    let total = 0;
    cart.forEach((it, idx)=>{
      const row = document.createElement('div'); row.className = 'cart-item';
      const line = (it.price||0) * (it.qty||1); total += line;
      const optTxt = it.options ? Object.entries(it.options).map(([k,v])=>`${k}: ${v}`).join(', ') : '';
      row.innerHTML = `
        <div style="display:flex;align-items:center;gap:8px">
          ${it.image ? `<img src="${it.image}" style="width:40px;height:40px;object-fit:cover;border-radius:8px">` : ''}
          <div><div><strong>${it.title}</strong></div><div class="small">${optTxt}</div><div class="small">$${fmt(it.price)}</div></div>
        </div>
        <div style="display:flex;align-items:center;gap:6px">
          <button class="action" onclick="chgQty(${idx},-1)">-</button>
          <span>${it.qty||1}</span>
          <button class="action" onclick="chgQty(${idx},1)">+</button>
          <button class="action" onclick="delItem(${idx})">🗑</button>
        </div>`;
      wrap.appendChild(row);
    });
    if (qs('#cartTotal')) qs('#cartTotal').textContent = fmt(total);
  }
}
function addToCart(p, selectedOptions){ const idx = cart.findIndex(x=>x.id===p.id && JSON.stringify(x.options||{})===JSON.stringify(selectedOptions||{})); if (idx>=0) cart[idx].qty = (cart[idx].qty||1) + 1; else cart.push({id:p.id,title:p.title,price:p.price,image:p.image||'',qty:1,options:selectedOptions||{}}); saveCart(); }
function chgQty(i, d){ cart[i].qty = Math.max(1,(cart[i].qty||1)+d); saveCart(); }
function delItem(i){ cart.splice(i,1); saveCart(); }
function toggleCart(){ const p = qs('#cartPanel'); if(!p) return; p.style.display = (p.style.display==='none'||!p.style.display) ? 'block' : 'none'; }
function openCheckout(){ if (!cart.length) { alert('Cart is empty'); return; } openModal('checkoutModal'); refreshTotals(); }
function openCart(){ if (window.innerWidth <= 760) { location='?route=cart'; } else { toggleCart(); } }
updateCartUI();

function renderCartPage(){
  const wrap = qs('#cartPageItems'); if (!wrap) return;
  wrap.innerHTML = '';
  if (!cart.length) { wrap.innerHTML = '<div class="small">Your cart is empty.</div>'; }
  let total = 0;
  cart.forEach((it, idx)=>{
    const line = (it.price||0) * (it.qty||1); total += line;
    const row = document.createElement('div'); row.className='rowline';
    const optTxt = it.options ? Object.entries(it.options).map(([k,v])=>`${k}: ${v}`).join(', ') : '';
    row.innerHTML = `
      <div style="display:flex;align-items:center;gap:8px">
        ${it.image ? `<img src="${it.image}" style="width:50px;height:50px;object-fit:cover;border-radius:8px">` : ''}
        <div>
          <div><strong>${it.title}</strong> <span class="small">$${fmt(it.price)}</span></div>
          <div class="small" style="color:#64748b">${optTxt}</div>
        </div>
      </div>
      <div style="display:flex;align-items:center;gap:6px">
        <button class="action" onclick="chgQty(${idx},-1)">-</button>
        <span>${it.qty||1}</span>
        <button class="action" onclick="chgQty(${idx},1)">+</button>
        <button class="action" onclick="delItem(${idx})">🗑</button>
      </div>
    `;
    wrap.appendChild(row);
  });
  if (qs('#cartPageTotal')) qs('#cartPageTotal').textContent = fmt(total);
}
document.addEventListener('DOMContentLoaded', renderCartPage);

// ---------- Options selection ----------
let pendingProduct = null;
function handleAddToCart(p){
  const opts = Array.isArray(p.options) ? p.options : [];
  const hasMods = Array.isArray(p.modifiers) && p.modifiers.length>0;
  const hasVars = Array.isArray(p.variants) && p.variants.length>0;
  const needsBuiltins = !!(p.enable_weight || p.enable_split);
  if (!opts.length && !hasMods && !needsBuiltins && !hasVars) {
    addToCart(p, {});
    // Go to cart after adding
    openCart();
    return;
  }
  pendingProduct = p;
  const wrap = qs('#optWrap'); wrap.innerHTML = '';

  // Variants
  if (hasVars){
    p.variants.forEach((g, i)=>{
      const gid = 'var_g_'+i;
      const values = (Array.isArray(g.values)?g.values:[]).map(v=>({label:String(v.label||v.value||''), delta: Number(v.delta||0)}));
      const req = g.required ? 'required' : '';
      let html = `<div class="card"><strong>${g.name||('Variant '+(i+1))}${g.required?' *':''}</strong><div style="height:6px"></div>`;
      html += `<select class="input" id="${gid}" ${req}><option value="">-- choose --</option>${values.map(v=>`<option value="${v.label}" data-delta="${v.delta}">${v.label} ${v.delta? `(+$${fmt(v.delta)})`:''}</option>`).join('')}</select>`;
      html += `</div>`;
      wrap.insertAdjacentHTML('beforeend', html);
    });
  }

  // Option groups
  if (opts.length){
    opts.forEach((g, i)=>{
      const gid = 'opt_g_'+i;
      const values = (g.values||[]).map(v=>String(v));
      const req = g.required ? 'required' : '';
      let html = `<div class="card"><strong>${g.name||('Option '+(i+1))}${g.required?' *':''}</strong><div style="height:6px"></div>`;
      html += `<select class="input" id="${gid}" ${req}><option value="">-- choose --</option>${values.map(v=>`<option value="${v}">${v}</option>`).join('')}</select>`;
      html += `</div>`;
      wrap.insertAdjacentHTML('beforeend', html);
    });
  }

  // Modifiers
  if (hasMods){
    p.modifiers.forEach((m, i)=>{
      const type = (m.type||'').toLowerCase();
      const name = m.name || ('Modifier '+(i+1));
      if (type==='addon'){
        const unit = m.unit || '';
        const min = Number.isFinite(m.min) ? m.min : 0;
        const max = Number.isFinite(m.max) ? m.max : 9999;
        const step = Number.isFinite(m.step) ? m.step : 1;
        const dflt = Number.isFinite(m.default) ? m.default : 0;
        const ppu = Number(m.price_per_unit||0);
        wrap.insertAdjacentHTML('beforeend', `
          <div class="card">
            <strong>${name}</strong>
            <div class="small">Price per ${unit||'unit'}: $${fmt(ppu)}</div>
            <div style="height:6px"></div>
            <input id="mod_addon_${i}" class="input" type="number" min="${min}" max="${max}" step="${step}" value="${dflt}">
            <div class="small">Quantity ${unit?('('+unit+')'):''}</div>
          </div>
        `);
      } else if (type==='toggle'){
        const dflt = !!m.default;
        wrap.insertAdjacentHTML('beforeend', `
          <div class="card">
            <label><input id="mod_toggle_${i}" type="checkbox" ${dflt?'checked':''}> ${name}</label>
          </div>
        `);
      } else if (type==='choice'){
        const values = Array.isArray(m.values)?m.values:[];
        wrap.insertAdjacentHTML('beforeend', `
          <div class="card">
            <strong>${name}</strong>
            <div style="height:6px"></div>
            <select id="mod_choice_${i}" class="input">
              <option value="">-- choose --</option>
              ${values.map(v=>`<option value="${String(v)}">${String(v)}</option>`).join('')}
            </select>
          </div>
        `);
      } else if (type==='note'){
        wrap.insertAdjacentHTML('beforeend', `
          <div class="card">
            <strong>${name}</strong>
            <div style="height:6px"></div>
            <textarea id="mod_note_${i}" class="input" rows="3" placeholder="${name}"></textarea>
          </div>
        `);
      }
    });
  }

  // built-ins
  if (p.enable_weight){
    const min = Number(p.weight_min ?? 0) || 0;
    const max = Number(p.weight_max ?? 1000) || 1000;
    const step = Number(p.weight_step ?? 10) || 10;
    wrap.insertAdjacentHTML('beforeend', `
      <div class="card">
        <strong>Weight</strong>
        <div style="height:6px"></div>
        <input id="opt_weight_g" class="input" type="number" min="${min}" max="${max}" step="${step}" placeholder="e.g. ${Math.min(300,max)}">
        <div class="small">grams (min ${min}, max ${max}, step ${step})</div>
      </div>
    `);
  }
  if (p.enable_split){
    const maxp = Math.max(1, parseInt(p.split_max_parts||4));
    let opts = ''; for (let i=1;i<=maxp;i++){ opts += `<option value="${i}">${i} part${i>1?'s':''}</option>`; }
    wrap.insertAdjacentHTML('beforeend', `
      <div class="card">
        <strong>Split into parts</strong>
        <div style="height:6px"></div>
        <select id="opt_split" class="input">${opts}</select>
      </div>
    `);
  }

  openModal('optionsModal');
}
function confirmOptions(){
  if (!pendingProduct) return;
  const p = pendingProduct;
  const optionsOut = {};
  let extrasTotal = 0;

  // variants
  const vars = Array.isArray(p.variants) ? p.variants : [];
  for (let i=0;i<vars.length;i++){
    const g = vars[i]; const el = qs('#var_g_'+i); const val = (el?.value||'').trim();
    if (g.required && !val) { alert('Please select variant: '+(g.name||('Variant '+(i+1)))); return; }
    if (val) {
      optionsOut[g.name||('Variant '+(i+1))] = val;
      const opt = el.options[el.selectedIndex]; const d = parseFloat(opt?.dataset?.delta || '0')||0;
      extrasTotal += d;
    }
  }

  // legacy options
  const opts = Array.isArray(p.options) ? p.options : [];
  for (let i=0;i<opts.length;i++){
    const g = opts[i]; const el = qs('#opt_g_'+i); const val = (el?.value||'').trim();
    if (g.required && !val) { alert('Please select: '+(g.name||('Option '+(i+1)))); return; }
    if (val) optionsOut[g.name||('Option '+(i+1))] = val;
  }

  // modifiers
  if (Array.isArray(p.modifiers)){
    p.modifiers.forEach((m, i)=>{
      const type = (m.type||'').toLowerCase();
      const name = m.name || ('Modifier '+(i+1));
      if (type==='addon'){
        const unit = m.unit || '';
        const ppu = Number(m.price_per_unit||0);
        const qty = parseFloat(qs('#mod_addon_'+i)?.value || '0') || 0;
        if (qty>0){
          const add = qty * ppu;
          extrasTotal += add;
          optionsOut['Ingredients'] = (optionsOut['Ingredients']? optionsOut['Ingredients'] + ', ' : '') + name + ' ' + qty + (unit?unit:'') + ' (+$' + fmt(add) + ')';
        }
      } else if (type==='toggle'){
        const on = !!qs('#mod_toggle_'+i)?.checked;
        optionsOut[name] = on ? 'Yes' : 'No';
      } else if (type==='choice'){
        const v = (qs('#mod_choice_'+i)?.value||'').trim();
        if (v) optionsOut[name] = v;
      } else if (type==='note'){
        const t = (qs('#mod_note_'+i)?.value||'').trim();
        if (t) optionsOut[name] = t;
      }
    });
  }

  // built-ins
  if (p.enable_weight){
    const min = Number(p.weight_min ?? 0) || 0;
    const max = Number(p.weight_max ?? 1000) || 1000;
    const step = Number(p.weight_step ?? 10) || 10;
    let wg = parseFloat(qs('#opt_weight_g')?.value||'0')||0;
    if (wg>0){
      wg = Math.max(min, Math.min(max, wg));
      wg = Math.round(wg/step)*step;
      optionsOut['Weight'] = wg + ' g';
    }
  }
  if (p.enable_split){
    const sp = parseInt(qs('#opt_split')?.value||'1');
    if (sp>1) optionsOut['Split'] = sp + ' parts';
  }

  const priceWithExtras = (Number(p.price)||0) + extrasTotal;
  const toAdd = {...p, price: priceWithExtras};
  addToCart(toAdd, optionsOut);

  pendingProduct = null; closeModal('optionsModal');
  // Go to cart after adding with options
  openCart();
}

// ---------- Checkout totals / promo ----------
let appliedPromo = '';
async function refreshTotals(){
  const msg = qs('#coMsg'); notify(msg, '', true);
  const res = await fetch('?action=calc_totals',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({cart, promo_code: appliedPromo})}).then(r=>r.json()).catch(()=>({ok:false,message:'Network'}));
  if (res.ok){
    qs('#sum_subtotal').textContent = fmt(res.subtotal);
    qs('#sum_discount').textContent = fmt(res.discount);
    qs('#sum_delivery').textContent = fmt(res.delivery_fee);
    qs('#sum_total').textContent = fmt(res.total);
    qs('#sum_promo').textContent = res.promo_code ? (' (' + res.promo_code + ')') : '';
  } else notify(msg, res.message||'Error', false);
}
async function applyPromo(){
  const code = (qs('#co_promo').value||'').trim();
  appliedPromo = code;
  await refreshTotals();
}

// ---------- Checkout ----------
async function placeOrder(){
  const name = qs('#co_name')?.value.trim();
  const phone = qs('#co_phone')?.value.trim();
  const addr = qs('#co_address')?.value.trim() || '';
  const comment = qs('#co_comment')?.value.trim() || '';
  const truckstop = qs('#co_truckstop')?.value.trim();
  const brand = qs('#co_truck_brand')?.value.trim();
  const color = qs('#co_cabin_color')?.value.trim();
  const plate = qs('#co_license_plate')?.value.trim();
  const msg = qs('#coMsg');

  if (!cart.length){ notify(msg, 'Cart is empty', false); return; }
  if (!name || !phone || !truckstop || !brand || !color || !plate){
    notify(msg, 'Please fill all required fields', false); return;
  }

  const res = await fetch('?action=create_order',{
    method:'POST',headers:{'Content-Type':'application/json'},
    body:JSON.stringify({
      cart, name, phone,
      address: addr,
      comment,
      promo_code: appliedPromo,
      truckstop_name: truckstop,
      truck_brand: brand,
      cabin_color: color,
      license_plate: plate,
      car_number: plate
    })
  }).then(r=>r.json()).catch(()=>({ok:false,message:'Network'}));
  if (!res.ok){ notify(msg, res.message || 'Error', false); return; }
  localStorage.removeItem('cart'); cart = []; updateCartUI();
  window.location = res.redirect;
}

// ---------- Payment upload and submit (QR page) ----------
let uploadedReceiptPath = '';
async function pickReceipt(){
  const inp = document.createElement('input'); inp.type='file'; inp.accept='image/*';
  inp.onchange = async ()=>{
    if (!inp.files || !inp.files[0]) return;
    const fd = new FormData(); fd.append('file', inp.files[0]);
    const status = qs('#receiptStatus');
    if (status) status.textContent = 'Uploading...';
    const res = await fetch('?action=upload_public', {method:'POST', body: fd}).then(r=>r.json()).catch(()=>({ok:false,message:'Network'}));
    if (res.ok){
      uploadedReceiptPath = res.path;
      if (status){ status.innerHTML = `Uploaded ✓ <a href="${res.path}" target="_blank">preview</a>`; status.style.color='green'; }
    } else if (status) { status.textContent = res.message||'Upload failed'; status.style.color='var(--danger)'; }
  };
  inp.click();
}
async function submitPayment(){
  const order_id = qs('#pay_order_id')?.value||''; const name = qs('#pay_name')?.value.trim(); const phone = qs('#pay_phone')?.value.trim();
  const car = qs('#pay_car')?.value.trim(); const amount = parseFloat(qs('#pay_amount')?.value||'0'); const receipt = qs('#pay_receipt')?.value.trim();
  const msg = qs('#payMsg'); if (!name || !phone || !amount){ notify(msg,'Fill name, phone and amount', false); return; }
  const res = await fetch('?action=confirm_payment',{
    method:'POST',headers:{'Content-Type':'application/json'},
    body:JSON.stringify({order_id, name, phone, car_number:car, amount, receipt, receipt_image: uploadedReceiptPath})
  }).then(r=>r.json()).catch(()=>({ok:false,message:'Network'}));
  if (!res.ok){ notify(msg, res.message || 'Error', false); return; }
  notify(msg, 'Payment details sent. Thank you!', true);
}

// ---------- Styles (live) ----------
function applyStyle(varName, value){ document.documentElement.style.setProperty(varName, value); }
async function saveStyles(){
  const body = {
    font_family: qs('#sty_ff')?.value || '',
    base_font_size: parseInt(qs('#sty_fs')?.value||'16'),
    radius: parseInt(qs('#sty_radius')?.value||'12'),
    glass_blur: parseInt(qs('#sty_blur')?.value||'12'),
    slider_title_size: parseInt(qs('#sty_stitle')?.value||'22'),
    slider_subtitle_size: parseInt(qs('#sty_ssub')?.value||'14'),
    logo_height: parseInt(qs('#sty_logoH')?.value||'28'),
  };
  const res = await api('?action=save_styles',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Styles saved' : (res.message||'Error'));
}

// ---------- Admin: auth ----------
async function adminLogin(){
  const pass = qs('#adminPass').value;
  const res = await fetch('?action=admin_login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password:pass})}).then(r=>r.json()).catch(()=>({ok:false,message:'Network'}));
  if (res.ok) location.reload(); else qs('#adminMsg').textContent = res.message || 'Error';
}

// ---------- Admin: tabs ----------
function openTab(name){
  qsa('[id^="tab-"]').forEach(e=>e.style.display='none');
  const el = qs('#tab-'+name); if (el) el.style.display='block';
  qsa('.tabbtn').forEach(b=>b.classList.toggle('active', b.getAttribute('data-tab')===name));
  if (name==='products') renderAdminProducts();
  if (name==='categories') renderAdminCategories();
  if (name==='pages') renderAdminPages();
  if (name==='articles') renderAdminArticles();
  if (name==='orders') renderAdminOrders();
  if (name==='analytics') renderAnalytics();
  if (name==='slider') renderSlides();
  if (name==='settings') { initDZ('dzQR','qr'); initDZ('dzLogo','logo'); renderPromos(); renderLoyalty(); }
  if (name==='footer') renderFooterWidgets();
}
document.addEventListener('DOMContentLoaded', ()=>{
  if (location.search.includes('route=admin')) openTab('products');
});

// ---------- Admin: data mirrors ----------
const PRODUCTS  = <?= json_encode($products, JSON_UNESCAPED_UNICODE) ?>;
const CATEGORIES= <?= json_encode($categories, JSON_UNESCAPED_UNICODE) ?>;
const PAGES     = <?= json_encode($pages, JSON_UNESCAPED_UNICODE) ?>;
const ARTICLES  = <?= json_encode($articles, JSON_UNESCAPED_UNICODE) ?>;

// ---------- Admin: products ----------
function renderAdminProducts(){
  const tbody = qs('#prodRows'); if (!tbody) return; tbody.innerHTML = '';
  const list = [...PRODUCTS].sort((a,b)=> (a.sort - b.sort) || String(a.title).localeCompare(String(b.title)));
  list.forEach(p=>{
    const tr = document.createElement('tr');
    const badges = []
      .concat(p.label? [p.label] : [])
      .concat((p.badges||[]).map(x=>x))
      .concat((p.custom_badges||[]));
    tr.innerHTML = `
      <td>${p.sort||0}
        <button class="action" onclick='bumpProductSort("${p.id}", -1)'>↑</button>
        <button class="action" onclick='bumpProductSort("${p.id}", 1)'>↓</button>
      </td>
      <td>${p.image?`<img src="${p.image}" style="width:60px;height:60px;object-fit:cover;border-radius:10px">`:'<div class="small">at a photo shoot</div>'}</td>
      <td>
        <strong>${p.title||''}</strong>
        <div class="small">${p.description||''}</div>
        <div class="small">Tags: ${(p.tags||[]).join(', ')}</div>
      </td>
      <td>${p.category||''}</td>
      <td>$${fmt(p.price||0)}</td>
      <td>${badges.join(', ')}</td>
      <td>${p.visible?'Yes':'No'}</td>
      <td>
        <button class="action" onclick='editProduct(${JSON.stringify(p)})'>Edit</button>
        <button class="action" onclick='deleteProduct("${p.id}")'>Delete</button>
      </td>`;
    tbody.appendChild(tr);
  });
}
async function bumpProductSort(id, delta){
  await api('?action=product_sort',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,delta})}).then(r=>r.json());
  const p = PRODUCTS.find(x=>x.id===id); if (p) p.sort = (p.sort||0)+delta; renderAdminProducts();
}
let prodImgTmp = '';
function resetProductForm(){
  qs('#p_id').value = ''; qs('#p_title').value = ''; qs('#p_price').value = ''; qs('#p_category').value = '';
  qs('#p_label').value = ''; qs('#p_desc').value = ''; qs('#p_visible').checked = true; prodImgTmp = ''; qs('#p_img_preview').innerHTML = '';
  qs('#p_sort').value = 0; qs('#p_tags').value = '';
  qs('#b_new').checked = false; qs('#b_hot').checked = false; qs('#b_spicy').checked = false; qs('#b_vegan').checked = false; qs('#b_best').checked = false;
  qs('#p_badges_custom').value = '';
  qs('#optBuilder').innerHTML = ''; optModel = [];
  qs('#varBuilder').innerHTML = ''; varModel = [];
  qs('#modBuilder').innerHTML = ''; modModel = [];
  qs('#p_weight').checked = false; qs('#p_split').checked = false;
  qs('#p_wmin').value = 0; qs('#p_wmax').value = 1000; qs('#p_wstep').value = 10; qs('#p_splitmax').value = 4;
}
function editProduct(p){
  resetProductForm(); initDZ('dzProductImg', 'product');
  if (p){
    qs('#p_id').value = p.id || ''; qs('#p_title').value = p.title || ''; qs('#p_price').value = p.price || '';
    qs('#p_category').value = p.category || ''; qs('#p_label').value = p.label || ''; qs('#p_desc').value = p.description || '';
    qs('#p_visible').checked = !!p.visible; prodImgTmp = p.image || ''; qs('#p_img_preview').innerHTML = prodImgTmp ? `<a href="${prodImgTmp}" target="_blank">Image set</a>` : '';
    qs('#p_sort').value = p.sort||0; qs('#p_tags').value = (p.tags||[]).join(', ');
    const badges = new Set((p.badges||[]));
    qs('#b_new').checked = badges.has('new');
    qs('#b_hot').checked = badges.has('hot');
    qs('#b_spicy').checked = badges.has('spicy');
    qs('#b_vegan').checked = badges.has('vegan');
    qs('#b_best').checked = badges.has('bestseller');
    qs('#p_badges_custom').value = (p.custom_badges||[]).join(', ');
    optModel = Array.isArray(p.options)? JSON.parse(JSON.stringify(p.options)) : [];
    varModel = Array.isArray(p.variants)? JSON.parse(JSON.stringify(p.variants)) : [];
    modModel = Array.isArray(p.modifiers)? JSON.parse(JSON.stringify(p.modifiers)) : [];
    renderOptBuilder(); renderVarBuilder(); renderModBuilder();
    qs('#p_weight').checked = !!p.enable_weight;
    qs('#p_split').checked = !!p.enable_split;
    qs('#p_wmin').value = p.weight_min ?? 0; qs('#p_wmax').value = p.weight_max ?? 1000; qs('#p_wstep').value = p.weight_step ?? 10; qs('#p_splitmax').value = p.split_max_parts ?? 4;
  }
  openModal('modalProduct');
}
async function saveProduct(){
  const badges = [];
  if (qs('#b_new').checked) badges.push('new');
  if (qs('#b_hot').checked) badges.push('hot');
  if (qs('#b_spicy').checked) badges.push('spicy');
  if (qs('#b_vegan').checked) badges.push('vegan');
  if (qs('#b_best').checked) badges.push('bestseller');

  const body = {
    id: qs('#p_id').value || undefined,
    title: qs('#p_title').value.trim(),
    price: parseFloat(qs('#p_price').value || '0'),
    category: qs('#p_category').value,
    label: qs('#p_label').value.trim(),
    description: qs('#p_desc').value,
    image: prodImgTmp || '',
    visible: qs('#p_visible').checked,
    sort: parseInt(qs('#p_sort').value||'0'),
    tags: (qs('#p_tags').value||'').split(',').map(s=>s.trim()).filter(Boolean),
    options: optModel,
    variants: varModel,
    modifiers: modModel,
    enable_weight: qs('#p_weight').checked,
    enable_split: qs('#p_split').checked,
    weight_min: parseFloat(qs('#p_wmin').value||'0'),
    weight_max: parseFloat(qs('#p_wmax').value||'1000'),
    weight_step: parseFloat(qs('#p_wstep').value||'10'),
    split_max_parts: parseInt(qs('#p_splitmax').value||'4'),
    badges,
    custom_badges: (qs('#p_badges_custom').value||'').split(',').map(s=>s.trim()).filter(Boolean)
  };
  const res = await api('?action=save_product',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){
    const idx = PRODUCTS.findIndex(x=>x.id===res.product.id); if (idx>=0) PRODUCTS[idx]=res.product; else PRODUCTS.push(res.product);
    renderAdminProducts(); closeModal('modalProduct');
  } else alert(res.message||'Error');
}
async function deleteProduct(id){
  if (!confirm('Delete product?')) return;
  const res = await api('?action=delete_product',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ const idx = PRODUCTS.findIndex(x=>x.id===id); if (idx>=0) PRODUCTS.splice(idx,1); renderAdminProducts(); }
}

// ---------- Admin: categories ----------
function renderAdminCategories(){
  const tbody = qs('#catRows'); if (!tbody) return; tbody.innerHTML = '';
  const list = [...CATEGORIES].sort((a,b)=> (a.sort - b.sort) || String(a.name).localeCompare(String(b.name)));
  list.forEach(c=>{
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${c.sort||0}
        <button class="action" onclick='bumpCategorySort("${c.id}", -1)'>↑</button>
        <button class="action" onclick='bumpCategorySort("${c.id}", 1)'>↓</button>
      </td>
      <td><strong>${c.name||''}</strong></td>
      <td>${c.slug||''}</td>
      <td>
        <button class="action" onclick='editCategory(${JSON.stringify(c)})'>Edit</button>
        <button class="action" onclick='deleteCategory("${c.id}")'>Delete</button>
      </td>`;
    tbody.appendChild(tr);
  });
}
function editCategory(c){ qs('#c_id').value = c?.id || ''; qs('#c_name').value = c?.name || ''; qs('#c_slug').value = c?.slug || ''; qs('#c_sort').value = c?.sort||0; openModal('modalCategory'); }
async function saveCategory(){
  const body = { id: qs('#c_id').value || undefined, name: qs('#c_name').value.trim(), slug: qs('#c_slug').value.trim(), sort: parseInt(qs('#c_sort').value||'0') };
  const res = await api('?action=save_category',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ const idx = CATEGORIES.findIndex(x=>x.id===res.category.id); if (idx>=0) CATEGORIES[idx]=res.category; else CATEGORIES.push(res.category); renderAdminCategories(); closeModal('modalCategory'); } else alert(res.message||'Error');
}
async function deleteCategory(id){
  if (!confirm('Delete category?')) return;
  const res = await api('?action=delete_category',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ const idx = CATEGORIES.findIndex(x=>x.id===id); if (idx>=0) CATEGORIES.splice(idx,1); renderAdminCategories(); }
}
async function bumpCategorySort(id, delta){
  await api('?action=category_sort',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,delta})}).then(r=>r.json());
  const c = CATEGORIES.find(x=>x.id===id); if (c) c.sort = (c.sort||0)+delta; renderAdminCategories();
}

// ---------- Admin: pages ----------
function renderAdminPages(){
  const tbody = qs('#pageRows'); if (!tbody) return; tbody.innerHTML = '';
  PAGES.forEach(p=>{
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><strong>${p.title||''}</strong></td>
      <td>${p.slug||''}</td>
      <td>${(p.updated_at||'').replace('T',' ').slice(0,19)}</td>
      <td>
        <button class="action" onclick='editPage(${JSON.stringify(p)})'>Edit</button>
        <button class="action" onclick='deletePage("${p.id}")'>Delete</button>
      </td>`;
    tbody.appendChild(tr);
  });
}
function editPage(p){ qs('#pg_id').value = p?.id || ''; qs('#pg_title').value = p?.title || ''; qs('#pg_slug').value = p?.slug || ''; qs('#pg_content').value = p?.content || ''; openModal('modalPage'); }
async function savePage(){
  const body = { id: qs('#pg_id').value || undefined, title: qs('#pg_title').value.trim(), slug: qs('#pg_slug').value.trim(), content: qs('#pg_content').value };
  const res = await api('?action=save_page',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ const idx = PAGES.findIndex(x=>x.id===res.page.id); if (idx>=0) PAGES[idx]=res.page; else PAGES.push(res.page); renderAdminPages(); closeModal('modalPage'); } else alert(res.message||'Error');
}
async function deletePage(id){
  if (!confirm('Delete page?')) return;
  const res = await api('?action=delete_page',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ const idx = PAGES.findIndex(x=>x.id===id); if (idx>=0) PAGES.splice(idx,1); renderAdminPages(); }
}
async function ensureArticlesNav(){
  if (PAGES.some(p=> (p.slug||'')==='articles')) { alert('Already exists'); return; }
  const res = await api('?action=save_page',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title:'Articles',slug:'articles',content:''})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ PAGES.push(res.page); renderAdminPages(); alert('Created'); } else alert(res.message||'Error');
}

// ---------- Admin: uploads DZ ----------
function initDZ(id, context){
  const el = qs('#'+id); if (!el || el.dataset.bound) return; el.dataset.bound = '1'; el.tabIndex = 0;
  el.onclick = ()=>pickAndUpload(context, el);
  el.ondragover = (e)=>{e.preventDefault(); el.classList.add('drag');}
  el.ondragleave = ()=>el.classList.remove('drag');
  el.ondrop = (e)=>{ e.preventDefault(); el.classList.remove('drag');
    const files = e.dataTransfer.files;
    if (files && files[0]) uploadFile(files[0], context).then(path=>{
      if (context==='qr') el.innerHTML = 'Uploaded: <a href="'+path+'" target="_blank">QR</a>';
      if (context==='logo') el.innerHTML = 'Uploaded: <a href="'+path+'" target="_blank">Logo</a>';
      if (context==='product') { prodImgTmp = path; qs('#p_img_preview').innerHTML = `<a href="${path}" target="_blank">Image set</a>`; }
      if (context==='article') { articleImgTmp = path; qs('#a_img_preview').innerHTML = `<a href="${path}" target="_blank">Cover set</a>`; }
    }).catch(err=>alert(err));
  };
}
async function pickAndUpload(context, el){
  const inp = document.createElement('input'); inp.type='file'; inp.accept='image/*';
  inp.onchange = ()=>{ if (inp.files && inp.files[0]) uploadFile(inp.files[0], context).then(path=>{
    if (context==='qr') el.innerHTML = 'Uploaded: <a href="'+path+'" target="_blank">QR</a>';
    if (context==='logo') el.innerHTML = 'Uploaded: <a href="'+path+'" target="_blank">Logo</a>';
    if (context==='product') { prodImgTmp = path; qs('#p_img_preview').innerHTML = `<a href="${path}" target="_blank">Image set</a>`; }
    if (context==='article') { articleImgTmp = path; qs('#a_img_preview').innerHTML = `<a href="${path}" target="_blank">Cover set</a>`; }
  }).catch(err=>alert(err)); };
  inp.click();
}
async function uploadFile(file, context){
  const fd = new FormData(); fd.append('file', file); fd.append('context', context);
  const res = await api('?action=upload', {method:'POST', body: fd}).then(r=>r.json());
  if (!res.ok) throw (res.message||'Upload failed'); return res.path;
}

// ---------- Admin: slider with text and sizes ----------
let sliderModel = JSON.parse(JSON.stringify(<?= json_encode($settings['slider_items'] ?? [], JSON_UNESCAPED_UNICODE) ?>));
function renderSlides(){
  const wrap = qs('#slidesWrap'); if (!wrap) return; wrap.innerHTML = '';
  if (!sliderModel.length) sliderModel.push({image:'',title:'',subtitle:'',align:'center',title_size:null,subtitle_size:null});
  sliderModel.forEach((s, idx)=>{
    const box = document.createElement('div'); box.className = 'slide-editor';
    box.innerHTML = `
      <div style="display:flex;gap:12px;align-items:flex-start">
        <div>
          <div class="slide-thumb" style="background-image:url('${s.image||''}')"></div>
          <div class="action" style="margin-top:6px" onclick="uploadSlideImg(${idx})">Upload image</div>
        </div>
        <div style="flex:1">
          <div class="row">
            <div class="col">
              <label class="small">Title</label>
              <input class="input" value="${(s.title||'').replace(/"/g,'&quot;')}" oninput="sliderModel[${idx}].title=this.value">
            </div>
            <div class="col">
              <label class="small">Subtitle</label>
              <input class="input" value="${(s.subtitle||'').replace(/"/g,'&quot;')}" oninput="sliderModel[${idx}].subtitle=this.value">
            </div>
            <div class="col">
              <label class="small">Align</label>
              <select class="input" onchange="sliderModel[${idx}].align=this.value">
                <option value="left" ${s.align==='left'?'selected':''}>left</option>
                <option value="center" ${s.align==='center'?'selected':''}>center</option>
                <option value="right" ${s.align==='right'?'selected':''}>right</option>
              </select>
            </div>
          </div>
          <div class="row" style="margin-top:8px">
            <div class="col">
              <label class="small">Title size (px, empty = default)</label>
              <input class="input" type="number" min="12" max="60" value="${s.title_size??''}" oninput="sliderModel[${idx}].title_size=this.value?parseInt(this.value):null">
            </div>
            <div class="col">
              <label class="small">Subtitle size (px, empty = default)</label>
              <input class="input" type="number" min="10" max="40" value="${s.subtitle_size??''}" oninput="sliderModel[${idx}].subtitle_size=this.value?parseInt(this.value):null">
            </div>
          </div>
          <div style="display:flex;gap:8px;margin-top:8px">
            <button class="action" onclick="moveSlide(${idx},-1)">↑</button>
            <button class="action" onclick="moveSlide(${idx},1)">↓</button>
            <button class="action" onclick="removeSlide(${idx})">Remove</button>
          </div>
        </div>
      </div>`;
    wrap.appendChild(box);
  });
}
function addSlide(){ sliderModel.push({image:'',title:'',subtitle:'',align:'center',title_size:null,subtitle_size:null}); renderSlides(); }
function removeSlide(i){ sliderModel.splice(i,1); renderSlides(); }
function moveSlide(i,dir){ const j=i+dir; if (j<0||j>=sliderModel.length) return; const t=sliderModel[i]; sliderModel[i]=sliderModel[j]; sliderModel[j]=t; renderSlides(); }
async function uploadSlideImg(i){
  const inp = document.createElement('input'); inp.type='file'; inp.accept='image/*';
  inp.onchange = async ()=>{ if (inp.files && inp.files[0]) { const path = await uploadFile(inp.files[0], 'slide').catch(e=>alert(e)); if (path){ sliderModel[i].image = path; renderSlides(); } } };
  inp.click();
}
async function saveSlider(){
  const res = await api('?action=save_slider',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({items:sliderModel})}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok?'Saved':'Error');
}

// ---------- Admin: footer widgets ----------
let footerModel = JSON.parse(JSON.stringify(<?= json_encode($settings['footer_widgets'] ?? [], JSON_UNESCAPED_UNICODE) ?>));
function renderFooterWidgets(){
  const wrap = qs('#footerWidgets'); if (!wrap) return; wrap.innerHTML = '';
  footerModel.forEach((w, idx)=>{
    const box = document.createElement('div'); box.className = 'card';
    box.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <strong>Widget #${idx+1}</strong>
        <button class="action" onclick="delFooterWidget(${idx})">Remove</button>
      </div>
      <div class="row">
        <div class="col"><label class="small">Title</label><input class="input" value="${(w.title||'').replace(/"/g,'&quot;')}" oninput="footerModel[${idx}].title=this.value"></div>
        <div class="col"><label class="small">Column (1..3)</label><input class="input" type="number" min="1" max="3" value="${w.column||1}" oninput="footerModel[${idx}].column=parseInt(this.value||'1')"></div>
      </div>
      <div style="margin-top:8px"><label class="small">Content (HTML)</label><textarea class="input" rows="4" oninput="footerModel[${idx}].content=this.value">${w.content||''}</textarea></div>`;
    wrap.appendChild(box);
  });
}
function addFooterWidget(){ footerModel.push({title:'',content:'',column:1}); renderFooterWidgets(); }
function delFooterWidget(i){ footerModel.splice(i,1); renderFooterWidgets(); }
async function saveFooter(){
  const res = await api('?action=save_settings',{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({footer_widgets:footerModel})
  }).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Saved' : (res.message||'Error'));
}

// ---------- Admin: settings (promos, save, Telegram test, donation, loyalty) ----------
const SETTINGS_PROMOS = <?= json_encode($settings['promos'] ?? [], JSON_UNESCAPED_UNICODE) ?>;
let promoModel = JSON.parse(JSON.stringify(SETTINGS_PROMOS || []));
function renderPromos(){
  const wrap = qs('#promoWrap'); if (!wrap) return; wrap.innerHTML = '';
  if (!promoModel.length) promoModel.push({code:'WELCOME',type:'percent',value:10,active:true,expires:'',min_total:0});
  promoModel.forEach((p, idx)=>{
    const box = document.createElement('div'); box.className = 'card';
    box.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap">
        <div style="display:flex;gap:8px;flex-wrap:wrap;align-items:center">
          <label class="small">Code</label><input class="input" style="width:120px" value="${p.code||''}" oninput="promoModel[${idx}].code=this.value.toUpperCase()">
          <label class="small">Type</label>
          <select class="input" style="width:120px" onchange="promoModel[${idx}].type=this.value">
            <option value="percent" ${p.type==='percent'?'selected':''}>percent</option>
            <option value="fixed" ${p.type==='fixed'?'selected':''}>fixed</option>
          </select>
          <label class="small">Value</label><input class="input" style="width:120px" type="number" step="0.01" value="${p.value||0}" oninput="promoModel[${idx}].value=parseFloat(this.value||'0')">
          <label class="small">Min total</label><input class="input" style="width:120px" type="number" step="0.01" value="${p.min_total||0}" oninput="promoModel[${idx}].min_total=parseFloat(this.value||'0')">
          <label class="small">Expires</label><input class="input" style="width:160px" type="date" value="${p.expires||''}" oninput="promoModel[${idx}].expires=this.value">
          <label class="small"><label class="switch"><input type="checkbox" ${p.active?'checked':''} onchange="promoModel[${idx}].active=this.checked"><span class="slider"></span></label> <span style="margin-left:6px">Active</span></label>
        </div>
        <button class="action" onclick="delPromo(${idx})">Remove</button>
      </div>`;
    wrap.appendChild(box);
  });
}
function addPromo(){ promoModel.push({code:'',type:'percent',value:10,active:true,expires:'',min_total:0}); renderPromos(); }
function delPromo(i){ promoModel.splice(i,1); renderPromos(); }
async function savePromos(){
  const res = await api('?action=save_settings',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({promos:promoModel})}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok?'Promos saved':(res.message||'Error'));
}
async function saveSettings(){
  const body = {
    site_name: qs('#setSiteName').value.trim(),
    brand_color: qs('#setBrand').value,
    accent_beige: qs('#setBeige').value,
    new_admin_password: qs('#setPass').value,
    telegram_bot_token: qs('#setTgToken').value.trim(),
    telegram_chat_id: qs('#setTgChat').value.trim(),
    tg_send_payment_form: qs('#setTgSendPay').checked,
    delivery_api_url: qs('#setDelUrl').value.trim(),
    delivery_api_key: qs('#setDelKey').value.trim(),
    auto_send_delivery: qs('#setAutoDel').checked,
    delivery_base: parseFloat(qs('#setDelBase').value||'0'),
    delivery_free_from: parseFloat(qs('#setDelFreeFrom').value||'0'),
    ga4_id: qs('#setGA4').value.trim(),
    yandex_metrika_id: qs('#setYM').value.trim(),
    pwa_enabled: qs('#setPWA').checked,
    payment_links: {
      zelle_email: qs('#setZelleEmail').value.trim(),
      venmo_url: qs('#setVenmoUrl').value.trim()
    }
  };
  const res = await api('?action=save_settings',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Saved' : (res.message||'Error'));
}
async function tgTest(){
  const res = await api('?action=tg_test',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:'Hello from admin settings'})}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Telegram test sent' : ('Telegram test failed: '+(res.message||'')));
}
async function saveDonation(){
  const body = { donation:{
    enabled: qs('#don_enabled').checked,
    button_label: qs('#don_btn').value.trim(),
    title: qs('#don_title').value.trim(),
    content: qs('#don_content').value
  }};
  const res = await api('?action=save_settings',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Donation saved' : 'Error');
}
// Loyalty
const LOY = <?= json_encode($settings['loyalty']['levels'] ?? [], JSON_UNESCAPED_UNICODE) ?>;
let loyModel = JSON.parse(JSON.stringify(LOY||[]));
function renderLoyalty(){
  const wrap = qs('#loyaltyWrap'); if (!wrap) return; wrap.innerHTML='';
  if (!loyModel.length) loyModel = [{name:'Bronze',percent:0,min_orders:0,min_spent:0}];
  loyModel.forEach((lv, idx)=>{
    const box = document.createElement('div'); box.className='card';
    box.innerHTML = `
      <div class="row">
        <div class="col"><label class="small">Name</label><input class="input" value="${(lv.name||'').replace(/"/g,'&quot;')}" oninput="loyModel[${idx}].name=this.value"></div>
        <div class="col"><label class="small">Percent</label><input class="input" type="number" step="0.1" value="${lv.percent||0}" oninput="loyModel[${idx}].percent=parseFloat(this.value||'0')"></div>
      </div>
      <div class="row">
        <div class="col"><label class="small">Min orders</label><input class="input" type="number" step="1" value="${lv.min_orders||0}" oninput="loyModel[${idx}].min_orders=parseInt(this.value||'0')"></div>
        <div class="col"><label class="small">Min spent</label><input class="input" type="number" step="0.01" value="${lv.min_spent||0}" oninput="loyModel[${idx}].min_spent=parseFloat(this.value||'0')"></div>
      </div>
      <div style="display:flex; gap:8px; margin-top:6px">
        <button class="action" onclick="moveLoy(${idx}, -1)">↑</button>
        <button class="action" onclick="moveLoy(${idx}, 1)">↓</button>
        <button class="action" onclick="delLoy(${idx})">Remove</button>
      </div>`;
    wrap.appendChild(box);
  });
}
function addLoyaltyLevel(){ loyModel.push({name:'Level',percent:1,min_orders:0,min_spent:0}); renderLoyalty(); }
function delLoy(i){ loyModel.splice(i,1); renderLoyalty(); }
function moveLoy(i,dir){ const j=i+dir; if (j<0||j>=loyModel.length) return; const t=loyModel[i]; loyModel[i]=loyModel[j]; loyModel[j]=t; renderLoyalty(); }
async function saveLoyalty(){
  const res = await api('?action=save_settings',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({loyalty:{levels:loyModel}})}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Loyalty saved' : 'Error');
}

// ---------- Admin: orders ----------
function renderAdminOrders(){
  const tbody = qs('#orderRows'); if (!tbody) return; tbody.innerHTML = '';
  const ORD = JSON.parse(JSON.stringify(ADMIN_ORDERS || []));
  ORD.sort((a,b)=> (a.created_at>b.created_at?-1:1));
  ORD.forEach(o=>{
    const cust = o.customer||{}; const pay = o.payment||{};
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><strong>${o.id}</strong><div class="small">${(o.created_at||'').replace('T',' ').slice(0,19)}</div><div class="small">${(o.items||[]).map(i=>`${i.title}×${i.qty}`).join(', ')}</div></td>
      <td>
        <select class="input" onchange="changeStatus('${o.id}', this.value)">
          ${['awaiting_payment','payment_submitted','paid','preparing','on_delivery','done','canceled'].map(st=>`<option value="${st}" ${o.status===st?'selected':''}>${st}</option>`).join('')}
        </select>
      </td>
      <td>
        <div class="small">Subtotal: $${fmt(o.subtotal||o.total||0)}</div>
        <div class="small">Discount: -$${fmt(o.discount||0)} ${o.promo_code? '('+o.promo_code+')':''}</div>
        <div class="small">Delivery: $${fmt(o.delivery_fee||0)}</div>
        <div><strong>Total: $${fmt(o.total||0)}</strong></div>
      </td>
      <td>
        ${cust.name||''}<br>
        <span class="small">${cust.phone||''}</span><br>
        <span class="small">${cust.address||''}</span>
        <div class="small">Truckstop: ${cust.truckstop_name||''}</div>
        <div class="small">Truck brand: ${cust.truck_brand||''}</div>
        <div class="small">Cabin color: ${cust.cabin_color||''}</div>
        <div class="small">License: ${cust.license_plate||cust.car_number||''}</div>
      </td>
      <td>
        ${pay.amount ? `<div class="small">Amount: $${fmt(pay.amount)}</div>` : '<div class="small">No payment submitted</div>'}
        ${pay.receipt ? `<div class="small">Receipt: ${pay.receipt}</div>` : ''}
        ${pay.submitted_at ? `<div class="small">${(pay.submitted_at||'').replace('T',' ').slice(0,19)}</div>` : ''}
        ${pay.receipt_image ? `<div class="small"><a href="${pay.receipt_image}" target="_blank">Receipt image</a></div>` : ''}
      </td>
      <td>
        <a class="action" href="?route=qr&order=${o.id}" target="_blank">Open QR</a>
        <button class="action" onclick="sendDelivery('${o.id}')">Send to delivery</button>
      </td>`;
    tbody.appendChild(tr);
  });
}
async function changeStatus(id, status){
  await api('?action=order_status',{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({order_id:id,status})
  }).then(r=>r.json()).catch(()=>({ok:false}));
}
async function sendDelivery(id){
  const res = await api('?action=send_to_delivery',{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({order_id:id})
  }).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? 'Sent to delivery' : (res.message||'Error'));
}

// ---------- Admin: Analytics ----------
function renderAnalytics(){
  const today = new Date().toISOString().slice(0,10);
  let revToday = 0, ordersToday = 0;
  const last30 = [];
  for (let i=29;i>=0;i--){
    const d = new Date(); d.setDate(d.getDate()-i);
    last30.push(d.toISOString().slice(0,10));
  }
  const revenueByDate = Object.fromEntries(last30.map(d=>[d,0]));
  const ordersByDate = Object.fromEntries(last30.map(d=>[d,0]));
  const topProducts = {};
  const byCategory = {};
  const prodById = Object.fromEntries((PRODUCTS||[]).map(p=>[p.id, p]));

  (ADMIN_ORDERS||[]).forEach(o=>{
    const d = (o.created_at||'').slice(0,10);
    if (d===today) { revToday += Number(o.total||0); ordersToday += 1; }
    if (d in revenueByDate) { revenueByDate[d] += Number(o.total||0); ordersByDate[d] += 1; }
    (o.items||[]).forEach(it=>{
      const t = it.title||'Unnamed';
      topProducts[t] = (topProducts[t]||0) + (Number(it.qty)||1);
      const prod = prodById[it.id] || null;
      const cat = prod ? (prod.category||'') : '';
      const key = cat||'uncategorized';
      byCategory[key] = (byCategory[key]||0) + Number(o.total||0) * (Number(it.qty)||1)/Math.max(1,(o.items||[]).reduce((s,x)=>s+(x.qty||1),0));
    });
  });

  const avgOrder = (()=>{ const sum = (ADMIN_ORDERS||[]).reduce((s,o)=>s+Number(o.total||0),0); const cnt = (ADMIN_ORDERS||[]).length||1; return sum/cnt; })();

  if (qs('#kpi_rev_today')) qs('#kpi_rev_today').textContent = fmt(revToday);
  if (qs('#kpi_orders_today')) qs('#kpi_orders_today').textContent = ordersToday;
  if (qs('#kpi_avg')) qs('#kpi_avg').textContent = fmt(avgOrder);

  if (typeof Chart==='undefined') return;
  const lab = last30.map(d=>d.slice(5));
  const rev = last30.map(d=>Number(revenueByDate[d]||0));
  const ord = last30.map(d=>Number(ordersByDate[d]||0));

  const ch1 = qs('#chRevenue');
  if (ch1){ new Chart(ch1.getContext('2d'), {type:'line', data:{labels:lab, datasets:[{label:'Revenue', data:rev, borderColor:'#16a34a', backgroundColor:'rgba(22,163,74,0.2)', tension:.25}]}, options:{plugins:{legend:{display:false}}, scales:{y:{beginAtZero:true}}}}); }
  const ch2 = qs('#chOrders');
  if (ch2){ new Chart(ch2.getContext('2d'), {type:'bar', data:{labels:lab, datasets:[{label:'Orders', data:ord, backgroundColor:'#2563eb'}]}, options:{plugins:{legend:{display:false}}, scales:{y:{beginAtZero:true}}}}); }

  const topArr = Object.entries(topProducts).sort((a,b)=>b[1]-a[1]).slice(0,7);
  const ch3 = qs('#chTopProducts');
  if (ch3){ new Chart(ch3.getContext('2d'), {type:'bar', data:{labels:topArr.map(x=>x[0]), datasets:[{label:'Qty', data:topArr.map(x=>x[1]), backgroundColor:'#06b6d4'}]}, options:{plugins:{legend:{display:false}}, indexAxis:'y', scales:{x:{beginAtZero:true}}}}); }

  const catArr = Object.entries(byCategory).sort((a,b)=>b[1]-a[1]).slice(0,7);
  const ch4 = qs('#chByCat');
  if (ch4){ new Chart(ch4.getContext('2d'), {type:'doughnut', data:{labels:catArr.map(x=>x[0]), datasets:[{data:catArr.map(x=>x[1]), backgroundColor:['#0ea5e9','#22c55e','#f97316','#ef4444','#6366f1','#06b6d4','#f59e0b']}]}, options:{plugins:{legend:{position:'bottom'}}}}); }
}

// ---------- Admin: Option/Variant/Modifier builders ----------
let optModel = []; // [{name, required, values:[...]}]
let varModel = []; // [{name, required, values:[{label, delta}...]}]
let modModel = []; // array of {type, name, ...}
function renderOptBuilder(){
  const wrap = qs('#optBuilder'); if (!wrap) return; wrap.innerHTML='';
  optModel.forEach((g,gi)=>{
    const row = document.createElement('div'); row.className='rowline';
    row.innerHTML = `
      <input class="input" style="width:180px" placeholder="Group name" value="${(g.name||'').replace(/"/g,'&quot;')}" oninput="optModel[${gi}].name=this.value">
      <label class="small"><label class="switch"><input type="checkbox" ${g.required?'checked':''} onchange="optModel[${gi}].required=this.checked"><span class="slider"></span></label> <span style="margin-left:6px">Required</span></label>
      <input class="input" style="flex:1" placeholder="Values, comma separated" value="${(Array.isArray(g.values)?g.values.join(', '):'').replace(/"/g,'&quot;')}" oninput="optModel[${gi}].values=this.value.split(',').map(s=>s.trim()).filter(Boolean)">
      <button class="action" onclick="optModel.splice(${gi},1); renderOptBuilder()">Remove</button>`;
    wrap.appendChild(row);
  });
}
function addOptGroup(){ optModel.push({name:'',required:false,values:[]}); renderOptBuilder(); }

function renderVarBuilder(){
  const wrap = qs('#varBuilder'); if (!wrap) return; wrap.innerHTML='';
  varModel.forEach((g,gi)=>{
    const box = document.createElement('div'); box.className='card';
    box.innerHTML = `
      <div class="rowline">
        <input class="input" style="width:180px" placeholder="Variant group" value="${(g.name||'').replace(/"/g,'&quot;')}" oninput="varModel[${gi}].name=this.value">
        <label class="small"><label class="switch"><input type="checkbox" ${g.required?'checked':''} onchange="varModel[${gi}].required=this.checked"><span class="slider"></span></label> <span style="margin-left:6px">Required</span></label>
        <button class="action" onclick="addVarValue(${gi})">Add value</button>
        <button class="action" onclick="varModel.splice(${gi},1); renderVarBuilder()">Remove group</button>
      </div>
      <div id="varVals_${gi}"></div>`;
    wrap.appendChild(box);
    const list = qs('#varVals_'+gi);
    (g.values||[]).forEach((v,vi)=>{
      const line = document.createElement('div'); line.className='rowline';
      line.innerHTML = `
        <input class="input" style="width:220px" placeholder="Label" value="${(v.label||'').replace(/"/g,'&quot;')}" oninput="varModel[${gi}].values[${vi}].label=this.value">
        <input class="input" style="width:140px" type="number" step="0.01" placeholder="Price delta" value="${v.delta||0}" oninput="varModel[${gi}].values[${vi}].delta=parseFloat(this.value||'0')">
        <button class="action" onclick="varModel[${gi}].values.splice(${vi},1); renderVarBuilder()">Remove</button>`;
      list.appendChild(line);
    });
  });
}
function addVarValue(gi){
  if (!varModel[gi].values) varModel[gi].values=[];
  varModel[gi].values.push({label:'', delta:0});
  renderVarBuilder();
}
function addVariant(){ varModel.push({name:'',required:false,values:[]}); renderVarBuilder(); }

function renderModBuilder(){
  const wrap = qs('#modBuilder'); if (!wrap) return; wrap.innerHTML='';
  modModel.forEach((m,mi)=>{
    const type = (m.type||'addon');
    const box = document.createElement('div'); box.className='card';
    let extra='';
    if (type==='addon'){
      extra = `
        <div class="rowline">
          <input class="input" style="width:120px" placeholder="Unit (g/ml...)" value="${(m.unit||'').replace(/"/g,'&quot;')}" oninput="modModel[${mi}].unit=this.value">
          <input class="input" style="width:120px" type="number" step="0.001" placeholder="Price per unit" value="${m.price_per_unit||0}" oninput="modModel[${mi}].price_per_unit=parseFloat(this.value||'0')">
          <input class="input" style="width:100px" type="number" step="1" placeholder="Min" value="${m.min||0}" oninput="modModel[${mi}].min=parseFloat(this.value||'0')">
          <input class="input" style="width:100px" type="number" step="1" placeholder="Max" value="${m.max||0}" oninput="modModel[${mi}].max=parseFloat(this.value||'0')">
          <input class="input" style="width:100px" type="number" step="1" placeholder="Step" value="${m.step||1}" oninput="modModel[${mi}].step=parseFloat(this.value||'1')">
          <input class="input" style="width:120px" type="number" step="1" placeholder="Default" value="${m.default||0}" oninput="modModel[${mi}].default=parseFloat(this.value||'0')">
        </div>`;
    } else if (type==='toggle'){
      extra = `<div class="rowline"><label class="small"><label class="switch"><input type="checkbox" ${m.default?'checked':''} onchange="modModel[${mi}].default=this.checked"><span class="slider"></span></label> <span style="margin-left:6px">Default ON</span></label></div>`;
    } else if (type==='choice'){
      extra = `<div class="rowline"><input class="input" style="flex:1" placeholder="Values, comma separated" value="${(Array.isArray(m.values)?m.values.join(', '):'').replace(/"/g,'&quot;')}" oninput="modModel[${mi}].values=this.value.split(',').map(s=>s.trim()).filter(Boolean)"></div>`;
    } else if (type==='note'){
      extra = `<div class="small">Customer will be able to type a free-form note.</div>`;
    }
    box.innerHTML = `
      <div class="rowline">
        <select class="input" style="width:140px" onchange="modModel[${mi}].type=this.value; renderModBuilder()">
          <option value="addon" ${type==='addon'?'selected':''}>addon</option>
          <option value="toggle" ${type==='toggle'?'selected':''}>toggle</option>
          <option value="choice" ${type==='choice'?'selected':''}>choice</option>
          <option value="note" ${type==='note'?'selected':''}>note</option>
        </select>
        <input class="input" style="flex:1" placeholder="Name" value="${(m.name||'').replace(/"/g,'&quot;')}" oninput="modModel[${mi}].name=this.value">
        <button class="action" onclick="modModel.splice(${mi},1); renderModBuilder()">Remove</button>
      </div>
      ${extra}`;
    wrap.appendChild(box);
  });
}
function addModifier(){ modModel.push({type:'addon', name:'', unit:'', price_per_unit:0, min:0, max:0, step:1, default:0}); renderModBuilder(); }

// ---------- Admin: Articles ----------
function renderAdminArticles(){
  const tbody = qs('#artRows'); if (!tbody) return; tbody.innerHTML = '';
  const list = [...ARTICLES].sort((a,b)=> String(b.updated_at||b.created_at||'').localeCompare(String(a.updated_at||a.created_at||'')));
  list.forEach(a=>{
    const tr = document.createElement('tr');
    const rx = a.reactions||{};
    const cm = (a.comments||[]).length||0;
    tr.innerHTML = `
      <td>${a.image?`<img src="${a.image}" style="width:60px;height:40px;object-fit:cover;border-radius:8px">`:'—'}</td>
      <td><strong>${a.title||''}</strong><div class="small">#${(a.tags||[]).join(' #')}</div></td>
      <td>${a.status||'published'} / ${a.visible?'visible':'hidden'}</td>
      <td>${(a.updated_at||a.created_at||'').replace('T',' ').slice(0,19)}</td>
      <td class="small">👍 ${rx.like||0} • ❤️ ${rx.love||0} • 👏 ${rx.clap||0}</td>
      <td class="small">${cm}</td>
      <td>
        <button class="action" onclick='editArticle(${JSON.stringify(a)})'>Edit</button>
        <button class="action" onclick='deleteArticle("${a.id}")'>Delete</button>
        <a class="action" href="?route=article&id=${a.id}" target="_blank">Open</a>
      </td>`;
    tbody.appendChild(tr);
  });
}
let articleImgTmp = '';
function editArticle(a){
  qs('#a_id').value = a?.id || '';
  qs('#a_title').value = a?.title || '';
  qs('#a_slug').value = a?.slug || '';
  qs('#a_status').value = a?.status || 'published';
  qs('#a_tags').value = (a?.tags||[]).join(', ');
  qs('#a_visible').checked = (a?.visible ?? true);
  qs('#a_excerpt').value = a?.excerpt || '';
  qs('#a_content').value = a?.content || '';
  articleImgTmp = a?.image || '';
  qs('#a_img_preview').innerHTML = articleImgTmp ? `<a href="${articleImgTmp}" target="_blank">Cover set</a>` : '';
  initDZ('dzArticleImg','article');
  openModal('modalArticle');
}
async function saveArticle(){
  const body = {
    id: qs('#a_id').value || undefined,
    title: qs('#a_title').value.trim(),
    slug: qs('#a_slug').value.trim(),
    status: qs('#a_status').value,
    tags: (qs('#a_tags').value||'').split(',').map(s=>s.trim()).filter(Boolean),
    visible: qs('#a_visible').checked,
    excerpt: qs('#a_excerpt').value,
    content: qs('#a_content').value,
    image: articleImgTmp || ''
  };
  const res = await api('?action=save_article',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){
    const idx = ARTICLES.findIndex(x=>x.id===res.article.id); if (idx>=0) ARTICLES[idx]=res.article; else ARTICLES.push(res.article);
    renderAdminArticles(); closeModal('modalArticle');
  } else alert(res.message||'Error');
}
async function deleteArticle(id){
  if (!confirm('Delete article?')) return;
  const res = await api('?action=delete_article',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (res.ok){ const idx = ARTICLES.findIndex(x=>x.id===id); if (idx>=0) ARTICLES.splice(idx,1); renderAdminArticles(); }
}

// ---------- Public: article reactions/comments ----------
async function reactArticle(id, type){
  const r = await fetch('?action=article_react',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,type})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (r.ok){
    if (type==='like' && qs('#r_like')) qs('#r_like').textContent = String(1 + Number(qs('#r_like').textContent||'0'));
    if (type==='love' && qs('#r_love')) qs('#r_love').textContent = String(1 + Number(qs('#r_love').textContent||'0'));
    if (type==='clap' && qs('#r_clap')) qs('#r_clap').textContent = String(1 + Number(qs('#r_clap').textContent||'0'));
  } else alert(r.message||'Error');
}
async function postComment(id){
  const name = qs('#cm_name')?.value.trim();
  const text = qs('#cm_text')?.value.trim();
  const msg = qs('#cm_msg');
  if (!name || !text){ notify(msg, 'Enter your name and comment', false); return; }
  const r = await fetch('?action=article_comment',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,name,text})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (r.ok){
    notify(msg,'Comment added ✓', true);
    const box = qs('#commentsBox');
    if (box){
      const div = document.createElement('div'); div.className='summary';
      const dt = (r.comment?.time||'').replace('T',' ').slice(0,16);
      div.innerHTML = `<div><strong>${r.comment?.name||''}</strong> <span class="small">${dt}</span></div><div class="small">${r.comment?.text||''}</div>`;
      box.appendChild(div);
    }
    qs('#cm_text').value = '';
  } else notify(msg, r.message||'Error', false);
}

// ---------- Init ----------
document.addEventListener('DOMContentLoaded', ()=>{
  const mp = qs('#modalProduct'); if (mp) initDZ('dzProductImg','product');
  renderFavHearts();
  if ('serviceWorker' in navigator && <?= !empty($settings['pwa_enabled']) ? 'true' : 'false' ?>) {
    navigator.serviceWorker.register('?route=sw.js').catch(()=>{});
  }
});

// ---------- Admin: CSV ----------
function exportCSV(){ location='?action=export_csv'; }
async function importCSV(input){
  if (!input.files || !input.files[0]) return;
  const fd = new FormData(); fd.append('file', input.files[0]);
  const res = await api('?action=import_csv',{method:'POST', body: fd}).then(r=>r.json()).catch(()=>({ok:false}));
  alert(res.ok ? ('Imported: '+res.imported) : (res.message||'Error'));
  if (res.ok) location.reload();
}

// ---------- Account public actions ----------
async function accRegister(){
  const name = qs('#reg_name').value.trim();
  const phone= qs('#reg_phone').value.trim();
  const email= qs('#reg_email').value.trim();
  const pass = qs('#reg_pass').value;
  const out = qs('#regMsg');
  const r = await fetch('?action=customer_register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,phone,email,password:pass})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (r.ok){ notify(out,'Registered ✓', true); setTimeout(()=>location='?route=account',600); } else notify(out, r.message||'Error', false);
}
async function accLogin(){
  const login= qs('#log_login').value.trim();
  const pass = qs('#log_pass').value;
  const out = qs('#logMsg');
  const r = await fetch('?action=customer_login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({login,password:pass})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (r.ok){ notify(out,'Logged in ✓', true); setTimeout(()=>location='?route=account',300); } else notify(out, r.message||'Error', false);
}
async function reqReset(){
  const login= qs('#rst_login').value.trim();
  const out = qs('#rstMsg');
  const r = await fetch('?action=customer_request_reset',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({login})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (r.ok){ notify(out, 'Token: '+r.token, true); } else notify(out, r.message||'Error', false);
}
async function doReset(){
  const token = qs('#rst_token').value.trim();
  const pass  = qs('#rst_pass').value;
  const out = qs('#rstMsg2');
  const r = await fetch('?action=customer_reset_password',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({token,new_password:pass})}).then(r=>r.json()).catch(()=>({ok:false}));
  if (r.ok){ notify(out,'Password changed ✓', true); } else notify(out, r.message||'Error', false);
}
</script>
</body>
</html>
